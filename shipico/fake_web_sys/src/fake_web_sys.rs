//! Raw API bindings for Web APIs
//!
//! This is a procedurally generated crate from browser WebIDL which provides a
//! binding to all APIs that browser provide on the web.
//!
//! This crate by default contains very little when compiled as almost all of
//! its exposed APIs are gated by Cargo features. The exhaustive list of
//! features can be found in `crates/web-sys/Cargo.toml`, but the rule of thumb
//! for `web-sys` is that each type has its own cargo feature (named after the
//! type). Using an API requires enabling the features for all types used in the
//! API, and APIs should mention in the documentation what features they
//! require.
#![doc(html_root_url = "https://docs.rs/web-sys/0.2")]
#![allow(deprecated)]
mod features {
    #[cfg(feature = "CanvasRenderingContext2d")]
    #[allow(non_snake_case)]
    mod gen_CanvasRenderingContext2d {
        #![allow(unused_imports)]
        use super::*;
        use wasm_bindgen::prelude::*;
        #[allow(bad_style)]
        ///The `CanvasRenderingContext2d` class.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        ///
        #[repr(transparent)]
        #[allow(clippy::all)]
        pub struct CanvasRenderingContext2d {
            obj: ::js_sys::Object,
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::fmt::Debug for CanvasRenderingContext2d {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    CanvasRenderingContext2d {
                        obj: ref __self_0_0,
                    } => {
                        let mut debug_trait_builder = f.debug_struct("CanvasRenderingContext2d");
                        let _ = debug_trait_builder.field("obj", &&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::clone::Clone for CanvasRenderingContext2d {
            #[inline]
            fn clone(&self) -> CanvasRenderingContext2d {
                match *self {
                    CanvasRenderingContext2d {
                        obj: ref __self_0_0,
                    } => CanvasRenderingContext2d {
                        obj: ::core::clone::Clone::clone(&(*__self_0_0)),
                    },
                }
            }
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::PartialEq for CanvasRenderingContext2d {
            #[inline]
            fn eq(&self, other: &CanvasRenderingContext2d) -> bool {
                match *other {
                    CanvasRenderingContext2d {
                        obj: ref __self_1_0,
                    } => match *self {
                        CanvasRenderingContext2d {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) == (*__self_1_0),
                    },
                }
            }
            #[inline]
            fn ne(&self, other: &CanvasRenderingContext2d) -> bool {
                match *other {
                    CanvasRenderingContext2d {
                        obj: ref __self_1_0,
                    } => match *self {
                        CanvasRenderingContext2d {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) != (*__self_1_0),
                    },
                }
            }
        }

        #[allow(bad_style)]
        #[allow(clippy::all)]
        const __wbg_generated_const_CanvasRenderingContext2d: () = {
            use wasm_bindgen::__rt::core;
            use wasm_bindgen::convert::RefFromWasmAbi;
            use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
            use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
            use wasm_bindgen::describe::WasmDescribe;
            use wasm_bindgen::{JsCast, JsValue};
            impl WasmDescribe for CanvasRenderingContext2d {
                fn describe() {
                    use wasm_bindgen::describe::*;
                    inform(NAMED_EXTERNREF);
                    inform(24u32);
                    inform(67u32);
                    inform(97u32);
                    inform(110u32);
                    inform(118u32);
                    inform(97u32);
                    inform(115u32);
                    inform(82u32);
                    inform(101u32);
                    inform(110u32);
                    inform(100u32);
                    inform(101u32);
                    inform(114u32);
                    inform(105u32);
                    inform(110u32);
                    inform(103u32);
                    inform(67u32);
                    inform(111u32);
                    inform(110u32);
                    inform(116u32);
                    inform(101u32);
                    inform(120u32);
                    inform(116u32);
                    inform(50u32);
                    inform(68u32);
                }
            }
            impl core::ops::Deref for CanvasRenderingContext2d {
                type Target = ::js_sys::Object;
                #[inline]
                fn deref(&self) -> &::js_sys::Object {
                    &self.obj
                }
            }
            impl IntoWasmAbi for CanvasRenderingContext2d {
                type Abi = <JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    self.obj.into_abi()
                }
            }
            impl OptionIntoWasmAbi for CanvasRenderingContext2d {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl<'a> OptionIntoWasmAbi for &'a CanvasRenderingContext2d {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl FromWasmAbi for CanvasRenderingContext2d {
                type Abi = <JsValue as FromWasmAbi>::Abi;
                #[inline]
                unsafe fn from_abi(js: Self::Abi) -> Self {
                    CanvasRenderingContext2d {
                        obj: JsValue::from_abi(js).into(),
                    }
                }
            }
            impl OptionFromWasmAbi for CanvasRenderingContext2d {
                #[inline]
                fn is_none(abi: &Self::Abi) -> bool {
                    *abi == 0
                }
            }
            impl<'a> IntoWasmAbi for &'a CanvasRenderingContext2d {
                type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    (&self.obj).into_abi()
                }
            }
            impl RefFromWasmAbi for CanvasRenderingContext2d {
                type Abi = <JsValue as RefFromWasmAbi>::Abi;
                type Anchor = core::mem::ManuallyDrop<CanvasRenderingContext2d>;
                #[inline]
                unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
                    let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
                    core::mem::ManuallyDrop::new(CanvasRenderingContext2d {
                        obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
                    })
                }
            }
            impl From<JsValue> for CanvasRenderingContext2d {
                #[inline]
                fn from(obj: JsValue) -> CanvasRenderingContext2d {
                    CanvasRenderingContext2d { obj: obj.into() }
                }
            }
            impl AsRef<JsValue> for CanvasRenderingContext2d {
                #[inline]
                fn as_ref(&self) -> &JsValue {
                    self.obj.as_ref()
                }
            }
            impl AsRef<CanvasRenderingContext2d> for CanvasRenderingContext2d {
                #[inline]
                fn as_ref(&self) -> &CanvasRenderingContext2d {
                    self
                }
            }
            impl From<CanvasRenderingContext2d> for JsValue {
                #[inline]
                fn from(obj: CanvasRenderingContext2d) -> JsValue {
                    obj.obj.into()
                }
            }
            impl JsCast for CanvasRenderingContext2d {
                fn instanceof(val: &JsValue) -> bool {
                    #[link(wasm_import_module = "__wbindgen_placeholder__")]
                    #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                    extern "C" {
                        fn __wbg_instanceof_CanvasRenderingContext2d_5b86ec94bce38d5b(
                            val: u32,
                        ) -> u32;
                    }
                    unsafe {
                        let idx = val.into_abi();
                        __wbg_instanceof_CanvasRenderingContext2d_5b86ec94bce38d5b(idx) != 0
                    }
                }
                #[inline]
                fn unchecked_from_js(val: JsValue) -> Self {
                    CanvasRenderingContext2d { obj: val.into() }
                }
                #[inline]
                fn unchecked_from_js_ref(val: &JsValue) -> &Self {
                    unsafe { &*(val as *const JsValue as *const CanvasRenderingContext2d) }
                }
            }
            ()
        };
        #[allow(clippy::all)]
        impl From<CanvasRenderingContext2d> for ::js_sys::Object {
            #[inline]
            fn from(obj: CanvasRenderingContext2d) -> ::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<::js_sys::Object> for CanvasRenderingContext2d {
            #[inline]
            fn as_ref(&self) -> &::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[cfg(feature = "HtmlCanvasElement")]
        ///Getter for the `canvas` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_canvas_fe845d846ad3fa3a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <Option<HtmlCanvasElement> as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            #[cfg(feature = "HtmlCanvasElement")]
            ///Getter for the `canvas` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn canvas(&self) -> Option<HtmlCanvasElement> {
                #[cfg(feature = "HtmlCanvasElement")]
                ///Getter for the `canvas` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_canvas_fe845d846ad3fa3a(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <Option<HtmlCanvasElement> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_canvas_fe845d846ad3fa3a(this)
                    };
                    <Option<HtmlCanvasElement> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Getter for the `globalAlpha` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_globalAlpha_6ee8849bd389ac8c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `globalAlpha` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn global_alpha(&self) -> f64 {
                ///Getter for the `globalAlpha` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_globalAlpha_6ee8849bd389ac8c(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_globalAlpha_6ee8849bd389ac8c(this)
                    };
                    <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `globalAlpha` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setglobalAlpha_b88eed33e546d000() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `globalAlpha` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_global_alpha(&self, value: f64) {
                ///Setter for the `globalAlpha` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setglobalAlpha_b88eed33e546d000(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setglobalAlpha_b88eed33e546d000(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `globalCompositeOperation` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_globalCompositeOperation_76aebb86302c97d4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `globalCompositeOperation` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn global_composite_operation(&self) -> Result<String, JsValue> {
                ///Getter for the `globalCompositeOperation` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_globalCompositeOperation_76aebb86302c97d4(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_globalCompositeOperation_76aebb86302c97d4(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        ///Setter for the `globalCompositeOperation` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setglobalCompositeOperation_fabb673593c3527d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `globalCompositeOperation` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_global_composite_operation(&self, value: &str) -> Result<(), JsValue> {
                ///Setter for the `globalCompositeOperation` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setglobalCompositeOperation_fabb673593c3527d(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setglobalCompositeOperation_fabb673593c3527d(this, value)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///Getter for the `strokeStyle` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_strokeStyle_2bad48a04e19ec36() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <::wasm_bindgen::JsValue as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `strokeStyle` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn stroke_style(&self) -> ::wasm_bindgen::JsValue {
                ///Getter for the `strokeStyle` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_strokeStyle_2bad48a04e19ec36(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_strokeStyle_2bad48a04e19ec36(this)
                    };
                    <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `strokeStyle` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setstrokeStyle_ab391a0f9102e10c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `strokeStyle` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_stroke_style(&self, value: &::wasm_bindgen::JsValue) {
                ///Setter for the `strokeStyle` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setstrokeStyle_ab391a0f9102e10c(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setstrokeStyle_ab391a0f9102e10c(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `fillStyle` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_fillStyle_111db7683d694e72() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <::wasm_bindgen::JsValue as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `fillStyle` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn fill_style(&self) -> ::wasm_bindgen::JsValue {
                ///Getter for the `fillStyle` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_fillStyle_111db7683d694e72(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_fillStyle_111db7683d694e72(this)
                    };
                    <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `fillStyle` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setfillStyle_2da87acf76dcbbcb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `fillStyle` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_fill_style(&self, value: &::wasm_bindgen::JsValue) {
                ///Setter for the `fillStyle` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setfillStyle_2da87acf76dcbbcb(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setfillStyle_2da87acf76dcbbcb(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `filter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_filter_d66448934176a68d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `filter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn filter(&self) -> String {
                ///Getter for the `filter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_filter_d66448934176a68d(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_filter_d66448934176a68d(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `filter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setfilter_27f986e04414e9dd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `filter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_filter(&self, value: &str) {
                ///Setter for the `filter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setfilter_27f986e04414e9dd(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setfilter_27f986e04414e9dd(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `imageSmoothingEnabled` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_imageSmoothingEnabled_877679f134ace49c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `imageSmoothingEnabled` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn image_smoothing_enabled(&self) -> bool {
                ///Getter for the `imageSmoothingEnabled` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_imageSmoothingEnabled_877679f134ace49c(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_imageSmoothingEnabled_877679f134ace49c(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `imageSmoothingEnabled` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setimageSmoothingEnabled_84431bd0fa8f411b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `imageSmoothingEnabled` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_image_smoothing_enabled(&self, value: bool) {
                ///Setter for the `imageSmoothingEnabled` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setimageSmoothingEnabled_84431bd0fa8f411b(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setimageSmoothingEnabled_84431bd0fa8f411b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `lineWidth` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lineWidth_c1d9ef1a70213590() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `lineWidth` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn line_width(&self) -> f64 {
                ///Getter for the `lineWidth` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lineWidth_c1d9ef1a70213590(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_lineWidth_c1d9ef1a70213590(this)
                    };
                    <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `lineWidth` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setlineWidth_85798545cf8a1f9d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `lineWidth` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_line_width(&self, value: f64) {
                ///Setter for the `lineWidth` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setlineWidth_85798545cf8a1f9d(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setlineWidth_85798545cf8a1f9d(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `lineCap` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lineCap_314f1f6f526fb1a6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `lineCap` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn line_cap(&self) -> String {
                ///Getter for the `lineCap` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lineCap_314f1f6f526fb1a6(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_lineCap_314f1f6f526fb1a6(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `lineCap` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setlineCap_1caf8af038fa84ce() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `lineCap` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_line_cap(&self, value: &str) {
                ///Setter for the `lineCap` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setlineCap_1caf8af038fa84ce(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setlineCap_1caf8af038fa84ce(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `lineJoin` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lineJoin_0478d6129a15bc3a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `lineJoin` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn line_join(&self) -> String {
                ///Getter for the `lineJoin` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lineJoin_0478d6129a15bc3a(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_lineJoin_0478d6129a15bc3a(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `lineJoin` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setlineJoin_4f5df004db140cd2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `lineJoin` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_line_join(&self, value: &str) {
                ///Setter for the `lineJoin` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setlineJoin_4f5df004db140cd2(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setlineJoin_4f5df004db140cd2(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `miterLimit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_miterLimit_8f37d58d91054733() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `miterLimit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn miter_limit(&self) -> f64 {
                ///Getter for the `miterLimit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_miterLimit_8f37d58d91054733(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_miterLimit_8f37d58d91054733(this)
                    };
                    <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `miterLimit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setmiterLimit_4e49c930735a741e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `miterLimit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_miter_limit(&self, value: f64) {
                ///Setter for the `miterLimit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setmiterLimit_4e49c930735a741e(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setmiterLimit_4e49c930735a741e(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `lineDashOffset` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lineDashOffset_6b80004231365d62() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `lineDashOffset` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn line_dash_offset(&self) -> f64 {
                ///Getter for the `lineDashOffset` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lineDashOffset_6b80004231365d62(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_lineDashOffset_6b80004231365d62(this)
                    };
                    <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `lineDashOffset` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setlineDashOffset_cc3f33b3eb3c5779() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `lineDashOffset` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_line_dash_offset(&self, value: f64) {
                ///Setter for the `lineDashOffset` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setlineDashOffset_cc3f33b3eb3c5779(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setlineDashOffset_cc3f33b3eb3c5779(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `shadowOffsetX` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_shadowOffsetX_22d1637ba4c2091a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `shadowOffsetX` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn shadow_offset_x(&self) -> f64 {
                ///Getter for the `shadowOffsetX` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_shadowOffsetX_22d1637ba4c2091a(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_shadowOffsetX_22d1637ba4c2091a(this)
                    };
                    <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `shadowOffsetX` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setshadowOffsetX_d48d23253f0d522f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `shadowOffsetX` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_shadow_offset_x(&self, value: f64) {
                ///Setter for the `shadowOffsetX` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setshadowOffsetX_d48d23253f0d522f(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setshadowOffsetX_d48d23253f0d522f(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `shadowOffsetY` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_shadowOffsetY_360681704ebd24cf() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `shadowOffsetY` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn shadow_offset_y(&self) -> f64 {
                ///Getter for the `shadowOffsetY` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_shadowOffsetY_360681704ebd24cf(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_shadowOffsetY_360681704ebd24cf(this)
                    };
                    <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `shadowOffsetY` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setshadowOffsetY_14246e3117097f31() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `shadowOffsetY` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_shadow_offset_y(&self, value: f64) {
                ///Setter for the `shadowOffsetY` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setshadowOffsetY_14246e3117097f31(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setshadowOffsetY_14246e3117097f31(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `shadowBlur` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_shadowBlur_d15890c289eddd98() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `shadowBlur` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn shadow_blur(&self) -> f64 {
                ///Getter for the `shadowBlur` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_shadowBlur_d15890c289eddd98(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_shadowBlur_d15890c289eddd98(this)
                    };
                    <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `shadowBlur` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setshadowBlur_062c242aa5d209ea() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `shadowBlur` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_shadow_blur(&self, value: f64) {
                ///Setter for the `shadowBlur` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setshadowBlur_062c242aa5d209ea(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setshadowBlur_062c242aa5d209ea(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `shadowColor` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_shadowColor_51cf3099bb468ccd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `shadowColor` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn shadow_color(&self) -> String {
                ///Getter for the `shadowColor` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_shadowColor_51cf3099bb468ccd(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_shadowColor_51cf3099bb468ccd(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `shadowColor` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setshadowColor_a35744091b345327() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `shadowColor` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_shadow_color(&self, value: &str) {
                ///Setter for the `shadowColor` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setshadowColor_a35744091b345327(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setshadowColor_a35744091b345327(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `font` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_font_c6c4f7934648747e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `font` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn font(&self) -> String {
                ///Getter for the `font` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_font_c6c4f7934648747e(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_font_c6c4f7934648747e(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `font` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setfont_7fb9fae174edc509() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `font` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_font(&self, value: &str) {
                ///Setter for the `font` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setfont_7fb9fae174edc509(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setfont_7fb9fae174edc509(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `textAlign` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_textAlign_0bc78f5e541189ec() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `textAlign` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn text_align(&self) -> String {
                ///Getter for the `textAlign` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_textAlign_0bc78f5e541189ec(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_textAlign_0bc78f5e541189ec(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `textAlign` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_settextAlign_ef9d091f8d27eff3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `textAlign` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_text_align(&self, value: &str) {
                ///Setter for the `textAlign` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_settextAlign_ef9d091f8d27eff3(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_settextAlign_ef9d091f8d27eff3(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `textBaseline` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_textBaseline_c8bd2f1e23e7afd6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Getter for the `textBaseline` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn text_baseline(&self) -> String {
                ///Getter for the `textBaseline` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_textBaseline_c8bd2f1e23e7afd6(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_textBaseline_c8bd2f1e23e7afd6(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `textBaseline` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_settextBaseline_c2a0520f9cd40851() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///Setter for the `textBaseline` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_text_baseline(&self, value: &str) {
                ///Setter for the `textBaseline` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_settextBaseline_c2a0520f9cd40851(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_settextBaseline_c2a0520f9cd40851(this, value)
                    };
                    ()
                }
            }
        }
        #[cfg(feature = "Window")]
        ///The `drawWindow()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_drawWindow_b261a2dc7c735ee1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&Window as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            #[cfg(feature = "Window")]
            ///The `drawWindow()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn draw_window(
                &self,
                window: &Window,
                x: f64,
                y: f64,
                w: f64,
                h: f64,
                bg_color: &str,
            ) -> Result<(), JsValue> {
                #[cfg(feature = "Window")]
                ///The `drawWindow()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_drawWindow_b261a2dc7c735ee1(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        window: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        w: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        h: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        bg_color: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let window =
                            <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(window);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        let w = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(w);
                        let h = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(h);
                        let bg_color =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bg_color);
                        __wbg_drawWindow_b261a2dc7c735ee1(this, window, x, y, w, h, bg_color)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        #[cfg(feature = "Window")]
        ///The `drawWindow()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_drawWindow_63158abc0547fff2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&Window as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <u32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            #[cfg(feature = "Window")]
            ///The `drawWindow()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn draw_window_with_flags(
                &self,
                window: &Window,
                x: f64,
                y: f64,
                w: f64,
                h: f64,
                bg_color: &str,
                flags: u32,
            ) -> Result<(), JsValue> {
                #[cfg(feature = "Window")]
                ///The `drawWindow()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_drawWindow_63158abc0547fff2(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        window: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        w: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        h: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        bg_color: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        flags: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let window =
                            <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(window);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        let w = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(w);
                        let h = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(h);
                        let bg_color =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bg_color);
                        let flags = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(flags);
                        __wbg_drawWindow_63158abc0547fff2(this, window, x, y, w, h, bg_color, flags)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        #[cfg(feature = "HtmlCanvasElement")]
        ///The `drawImage()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_drawImage_819228aeb2f0b119() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            #[cfg(feature = "HtmlCanvasElement")]
            ///The `drawImage()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn draw_image_with_html_canvas_element(
                &self,
                image: &HtmlCanvasElement,
                dx: f64,
                dy: f64,
            ) -> Result<(), JsValue> {
                #[cfg(feature = "HtmlCanvasElement")]
                ///The `drawImage()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_drawImage_819228aeb2f0b119(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        image: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        dx: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        dy: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let image =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                image,
                            );
                        let dx = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dx);
                        let dy = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dy);
                        __wbg_drawImage_819228aeb2f0b119(this, image, dx, dy)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        #[cfg(feature = "HtmlCanvasElement")]
        ///The `drawImage()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_drawImage_2797feea7bfcf865() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            #[cfg(feature = "HtmlCanvasElement")]
            ///The `drawImage()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn draw_image_with_html_canvas_element_and_dw_and_dh(
                &self,
                image: &HtmlCanvasElement,
                dx: f64,
                dy: f64,
                dw: f64,
                dh: f64,
            ) -> Result<(), JsValue> {
                #[cfg(feature = "HtmlCanvasElement")]
                ///The `drawImage()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_drawImage_2797feea7bfcf865(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        image: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        dx: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        dy: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        dw: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        dh: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let image =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                image,
                            );
                        let dx = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dx);
                        let dy = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dy);
                        let dw = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dw);
                        let dh = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dh);
                        __wbg_drawImage_2797feea7bfcf865(this, image, dx, dy, dw, dh)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        #[cfg(feature = "HtmlCanvasElement")]
        ///The `drawImage()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_drawImage_1ed23ae3d5cef9bb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(10u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            #[cfg(feature = "HtmlCanvasElement")]
            ///The `drawImage()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn draw_image_with_html_canvas_element_and_sw_and_sh_and_dx_and_dy_and_dw_and_dh(
                &self,
                image: &HtmlCanvasElement,
                sx: f64,
                sy: f64,
                sw: f64,
                sh: f64,
                dx: f64,
                dy: f64,
                dw: f64,
                dh: f64,
            ) -> Result<(), JsValue> {
                #[cfg(feature = "HtmlCanvasElement")]
                ///The `drawImage()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_drawImage_1ed23ae3d5cef9bb(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        image: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        sx: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        sy: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        sw: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        sh: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        dx: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        dy: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        dw: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        dh: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let image =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                image,
                            );
                        let sx = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(sx);
                        let sy = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(sy);
                        let sw = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(sw);
                        let sh = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(sh);
                        let dx = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dx);
                        let dy = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dy);
                        let dw = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dw);
                        let dh = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(dh);
                        __wbg_drawImage_1ed23ae3d5cef9bb(
                            this, image, sx, sy, sw, sh, dx, dy, dw, dh,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        ///The `beginPath()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_beginPath_dcfb4577d60a6d17() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `beginPath()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn begin_path(&self) {
                ///The `beginPath()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_beginPath_dcfb4577d60a6d17(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_beginPath_dcfb4577d60a6d17(this)
                    };
                    ()
                }
            }
        }
        ///The `clip()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_clip_93514277cfa4d0fa() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `clip()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn clip(&self) {
                ///The `clip()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_clip_93514277cfa4d0fa(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_clip_93514277cfa4d0fa(this)
                    };
                    ()
                }
            }
        }
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        ///The `fill()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_fill_f7685c1e23b55d83() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `fill()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn fill(&self) {
                ///The `fill()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_fill_f7685c1e23b55d83(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_fill_f7685c1e23b55d83(this)
                    };
                    ()
                }
            }
        }
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        ///The `isPointInPath()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_isPointInPath_c291aae9a37007cb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `isPointInPath()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn is_point_in_path_with_f64(&self, x: f64, y: f64) -> bool {
                ///The `isPointInPath()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_isPointInPath_c291aae9a37007cb(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_isPointInPath_c291aae9a37007cb(this, x, y)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        ///The `isPointInStroke()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_isPointInStroke_da85b367c7db907c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `isPointInStroke()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn is_point_in_stroke_with_x_and_y(&self, x: f64, y: f64) -> bool {
                ///The `isPointInStroke()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_isPointInStroke_da85b367c7db907c(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_isPointInStroke_da85b367c7db907c(this, x, y)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl CanvasRenderingContext2d {}
        ///The `stroke()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_stroke_e549268dd54abc00() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `stroke()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn stroke(&self) {
                ///The `stroke()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_stroke_e549268dd54abc00(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_stroke_e549268dd54abc00(this)
                    };
                    ()
                }
            }
        }
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        ///The `addHitRegion()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/addHitRegion)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_addHitRegion_281dedb6a34e5959() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `addHitRegion()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/addHitRegion)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn add_hit_region(&self) -> Result<(), JsValue> {
                ///The `addHitRegion()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/addHitRegion)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_addHitRegion_281dedb6a34e5959(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_addHitRegion_281dedb6a34e5959(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl CanvasRenderingContext2d {}
        ///The `clearHitRegions()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearHitRegions)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_clearHitRegions_aa570cbc1354bfd2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `clearHitRegions()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearHitRegions)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn clear_hit_regions(&self) {
                ///The `clearHitRegions()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearHitRegions)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_clearHitRegions_aa570cbc1354bfd2(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_clearHitRegions_aa570cbc1354bfd2(this)
                    };
                    ()
                }
            }
        }
        ///The `removeHitRegion()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/removeHitRegion)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_removeHitRegion_c0bdfd70d9e0a538() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `removeHitRegion()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/removeHitRegion)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn remove_hit_region(&self, id: &str) {
                ///The `removeHitRegion()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/removeHitRegion)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_removeHitRegion_c0bdfd70d9e0a538(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let id = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(id);
                        __wbg_removeHitRegion_c0bdfd70d9e0a538(this, id)
                    };
                    ()
                }
            }
        }
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        impl CanvasRenderingContext2d {}
        ///The `getLineDash()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getLineDash)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_getLineDash_6afe9c47c3122553() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <::js_sys::Array as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `getLineDash()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getLineDash)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn get_line_dash(&self) -> ::js_sys::Array {
                ///The `getLineDash()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getLineDash)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_getLineDash_6afe9c47c3122553(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_getLineDash_6afe9c47c3122553(this)
                    };
                    <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `setLineDash()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setLineDash_766cf35a21e87364() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `setLineDash()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_line_dash(&self, segments: &::wasm_bindgen::JsValue) -> Result<(), JsValue> {
                ///The `setLineDash()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setLineDash_766cf35a21e87364(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        segments : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let segments = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (segments) ;
                        __wbg_setLineDash_766cf35a21e87364(this, segments)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `arc()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_arc_fad3e56c8fabaeef() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `arc()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn arc(
                &self,
                x: f64,
                y: f64,
                radius: f64,
                start_angle: f64,
                end_angle: f64,
            ) -> Result<(), JsValue> {
                ///The `arc()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_arc_fad3e56c8fabaeef(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        radius: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        start_angle: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        end_angle: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        let radius = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(radius);
                        let start_angle =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(start_angle);
                        let end_angle =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(end_angle);
                        __wbg_arc_fad3e56c8fabaeef(this, x, y, radius, start_angle, end_angle)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `arc()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_arc_240c4b7e8050f6eb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `arc()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn arc_with_anticlockwise(
                &self,
                x: f64,
                y: f64,
                radius: f64,
                start_angle: f64,
                end_angle: f64,
                anticlockwise: bool,
            ) -> Result<(), JsValue> {
                ///The `arc()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_arc_240c4b7e8050f6eb(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        radius: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        start_angle: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        end_angle: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        anticlockwise: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        let radius = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(radius);
                        let start_angle =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(start_angle);
                        let end_angle =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(end_angle);
                        let anticlockwise =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(anticlockwise);
                        __wbg_arc_240c4b7e8050f6eb(
                            this,
                            x,
                            y,
                            radius,
                            start_angle,
                            end_angle,
                            anticlockwise,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `arcTo()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_arcTo_eff2752e12b9217d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `arcTo()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn arc_to(
                &self,
                x1: f64,
                y1: f64,
                x2: f64,
                y2: f64,
                radius: f64,
            ) -> Result<(), JsValue> {
                ///The `arcTo()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_arcTo_eff2752e12b9217d(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x1: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y1: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x2: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y2: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        radius: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x1 = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x1);
                        let y1 = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y1);
                        let x2 = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x2);
                        let y2 = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y2);
                        let radius = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(radius);
                        __wbg_arcTo_eff2752e12b9217d(this, x1, y1, x2, y2, radius)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `bezierCurveTo()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_bezierCurveTo_134dac9b768ed24d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `bezierCurveTo()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn bezier_curve_to(
                &self,
                cp1x: f64,
                cp1y: f64,
                cp2x: f64,
                cp2y: f64,
                x: f64,
                y: f64,
            ) {
                ///The `bezierCurveTo()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_bezierCurveTo_134dac9b768ed24d(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        cp1x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        cp1y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        cp2x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        cp2y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let cp1x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cp1x);
                        let cp1y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cp1y);
                        let cp2x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cp2x);
                        let cp2y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cp2y);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_bezierCurveTo_134dac9b768ed24d(this, cp1x, cp1y, cp2x, cp2y, x, y)
                    };
                    ()
                }
            }
        }
        ///The `closePath()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_closePath_4d017a1ccfd4e1df() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `closePath()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn close_path(&self) {
                ///The `closePath()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_closePath_4d017a1ccfd4e1df(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_closePath_4d017a1ccfd4e1df(this)
                    };
                    ()
                }
            }
        }
        ///The `ellipse()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ellipse_a5de4b5453a9ebd9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `ellipse()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ellipse(
                &self,
                x: f64,
                y: f64,
                radius_x: f64,
                radius_y: f64,
                rotation: f64,
                start_angle: f64,
                end_angle: f64,
            ) -> Result<(), JsValue> {
                ///The `ellipse()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ellipse_a5de4b5453a9ebd9(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        radius_x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        radius_y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        rotation: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        start_angle: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        end_angle: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        let radius_x =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(radius_x);
                        let radius_y =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(radius_y);
                        let rotation =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(rotation);
                        let start_angle =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(start_angle);
                        let end_angle =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(end_angle);
                        __wbg_ellipse_a5de4b5453a9ebd9(
                            this,
                            x,
                            y,
                            radius_x,
                            radius_y,
                            rotation,
                            start_angle,
                            end_angle,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `ellipse()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ellipse_2674cf5231c4a9df() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(9u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `ellipse()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ellipse_with_anticlockwise(
                &self,
                x: f64,
                y: f64,
                radius_x: f64,
                radius_y: f64,
                rotation: f64,
                start_angle: f64,
                end_angle: f64,
                anticlockwise: bool,
            ) -> Result<(), JsValue> {
                ///The `ellipse()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ellipse_2674cf5231c4a9df(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        radius_x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        radius_y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        rotation: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        start_angle: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        end_angle: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        anticlockwise: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        let radius_x =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(radius_x);
                        let radius_y =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(radius_y);
                        let rotation =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(rotation);
                        let start_angle =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(start_angle);
                        let end_angle =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(end_angle);
                        let anticlockwise =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(anticlockwise);
                        __wbg_ellipse_2674cf5231c4a9df(
                            this,
                            x,
                            y,
                            radius_x,
                            radius_y,
                            rotation,
                            start_angle,
                            end_angle,
                            anticlockwise,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `lineTo()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lineTo_14985b67e58f8d9f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `lineTo()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn line_to(&self, x: f64, y: f64) {
                ///The `lineTo()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lineTo_14985b67e58f8d9f(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_lineTo_14985b67e58f8d9f(this, x, y)
                    };
                    ()
                }
            }
        }
        ///The `moveTo()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_moveTo_3a9ff9e00fc48535() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `moveTo()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn move_to(&self, x: f64, y: f64) {
                ///The `moveTo()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_moveTo_3a9ff9e00fc48535(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_moveTo_3a9ff9e00fc48535(this, x, y)
                    };
                    ()
                }
            }
        }
        ///The `quadraticCurveTo()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_quadraticCurveTo_1cbdaba718d4531b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `quadraticCurveTo()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn quadratic_curve_to(&self, cpx: f64, cpy: f64, x: f64, y: f64) {
                ///The `quadraticCurveTo()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_quadraticCurveTo_1cbdaba718d4531b(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        cpx: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        cpy: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let cpx = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cpx);
                        let cpy = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cpy);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_quadraticCurveTo_1cbdaba718d4531b(this, cpx, cpy, x, y)
                    };
                    ()
                }
            }
        }
        ///The `rect()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_rect_26c4e290a5e0ecda() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `rect()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn rect(&self, x: f64, y: f64, w: f64, h: f64) {
                ///The `rect()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_rect_26c4e290a5e0ecda(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        w: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        h: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        let w = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(w);
                        let h = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(h);
                        __wbg_rect_26c4e290a5e0ecda(this, x, y, w, h)
                    };
                    ()
                }
            }
        }
        ///The `clearRect()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_clearRect_d61bc1791ebc06b1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `clearRect()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn clear_rect(&self, x: f64, y: f64, w: f64, h: f64) {
                ///The `clearRect()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_clearRect_d61bc1791ebc06b1(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        w: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        h: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        let w = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(w);
                        let h = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(h);
                        __wbg_clearRect_d61bc1791ebc06b1(this, x, y, w, h)
                    };
                    ()
                }
            }
        }
        ///The `fillRect()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_fillRect_e9ad0b5dde70ab3b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `fillRect()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn fill_rect(&self, x: f64, y: f64, w: f64, h: f64) {
                ///The `fillRect()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_fillRect_e9ad0b5dde70ab3b(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        w: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        h: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        let w = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(w);
                        let h = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(h);
                        __wbg_fillRect_e9ad0b5dde70ab3b(this, x, y, w, h)
                    };
                    ()
                }
            }
        }
        ///The `strokeRect()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_strokeRect_6f15f1e147787672() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `strokeRect()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn stroke_rect(&self, x: f64, y: f64, w: f64, h: f64) {
                ///The `strokeRect()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_strokeRect_6f15f1e147787672(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        w: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        h: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        let w = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(w);
                        let h = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(h);
                        __wbg_strokeRect_6f15f1e147787672(this, x, y, w, h)
                    };
                    ()
                }
            }
        }
        ///The `restore()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_restore_be383cadf1440d72() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `restore()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn restore(&self) {
                ///The `restore()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_restore_be383cadf1440d72(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_restore_be383cadf1440d72(this)
                    };
                    ()
                }
            }
        }
        ///The `save()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_save_6d43ca6041c1ddb6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `save()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn save(&self) {
                ///The `save()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_save_6d43ca6041c1ddb6(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_save_6d43ca6041c1ddb6(this)
                    };
                    ()
                }
            }
        }
        ///The `fillText()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_fillText_bd212fc8e99ff788() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `fillText()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn fill_text(&self, text: &str, x: f64, y: f64) -> Result<(), JsValue> {
                ///The `fillText()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_fillText_bd212fc8e99ff788(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        text: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let text = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(text);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_fillText_bd212fc8e99ff788(this, text, x, y)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `fillText()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_fillText_0df13d8d3d07f630() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `fillText()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn fill_text_with_max_width(
                &self,
                text: &str,
                x: f64,
                y: f64,
                max_width: f64,
            ) -> Result<(), JsValue> {
                ///The `fillText()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_fillText_0df13d8d3d07f630(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        text: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        max_width: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let text = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(text);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        let max_width =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(max_width);
                        __wbg_fillText_0df13d8d3d07f630(this, text, x, y, max_width)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl CanvasRenderingContext2d {}
        ///The `strokeText()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_strokeText_7afb9b1dfaf1ccdc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `strokeText()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn stroke_text(&self, text: &str, x: f64, y: f64) -> Result<(), JsValue> {
                ///The `strokeText()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_strokeText_7afb9b1dfaf1ccdc(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        text: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let text = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(text);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_strokeText_7afb9b1dfaf1ccdc(this, text, x, y)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `strokeText()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_strokeText_67f88ee39a10d02c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `strokeText()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn stroke_text_with_max_width(
                &self,
                text: &str,
                x: f64,
                y: f64,
                max_width: f64,
            ) -> Result<(), JsValue> {
                ///The `strokeText()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_strokeText_67f88ee39a10d02c(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        text: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        max_width: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let text = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(text);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        let max_width =
                            <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(max_width);
                        __wbg_strokeText_67f88ee39a10d02c(this, text, x, y, max_width)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl CanvasRenderingContext2d {}
        ///The `resetTransform()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_resetTransform_3593808a72be4d22() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `resetTransform()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn reset_transform(&self) -> Result<(), JsValue> {
                ///The `resetTransform()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_resetTransform_3593808a72be4d22(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        __wbg_resetTransform_3593808a72be4d22(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `rotate()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_rotate_1fae86d712dcdfd3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `rotate()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn rotate(&self, angle: f64) -> Result<(), JsValue> {
                ///The `rotate()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_rotate_1fae86d712dcdfd3(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        angle: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let angle = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(angle);
                        __wbg_rotate_1fae86d712dcdfd3(this, angle)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `scale()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scale_5e58e1e664bed0f2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `scale()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scale(&self, x: f64, y: f64) -> Result<(), JsValue> {
                ///The `scale()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scale_5e58e1e664bed0f2(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_scale_5e58e1e664bed0f2(this, x, y)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `setTransform()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTransform_6277770e3d1afe42() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `setTransform()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_transform(
                &self,
                a: f64,
                b: f64,
                c: f64,
                d: f64,
                e: f64,
                f: f64,
            ) -> Result<(), JsValue> {
                ///The `setTransform()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTransform_6277770e3d1afe42(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        a: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        b: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        c: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        d: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        e: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        f: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let a = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a);
                        let b = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(b);
                        let c = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(c);
                        let d = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(d);
                        let e = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(e);
                        let f = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(f);
                        __wbg_setTransform_6277770e3d1afe42(this, a, b, c, d, e, f)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `transform()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_transform_d69a37396a7d9026() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `transform()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn transform(
                &self,
                a: f64,
                b: f64,
                c: f64,
                d: f64,
                e: f64,
                f: f64,
            ) -> Result<(), JsValue> {
                ///The `transform()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_transform_d69a37396a7d9026(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        a: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        b: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        c: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        d: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        e: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        f: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let a = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a);
                        let b = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(b);
                        let c = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(c);
                        let d = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(d);
                        let e = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(e);
                        let f = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(f);
                        __wbg_transform_d69a37396a7d9026(this, a, b, c, d, e, f)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `translate()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_translate_458add1387a34577() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            ///The `translate()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn translate(&self, x: f64, y: f64) -> Result<(), JsValue> {
                ///The `translate()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_translate_458add1387a34577(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_translate_458add1387a34577(this, x, y)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        #[cfg(feature = "Element")]
        ///The `drawCustomFocusRing()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawCustomFocusRing)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_drawCustomFocusRing_59c2c828eda0d230() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&Element as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            #[cfg(feature = "Element")]
            ///The `drawCustomFocusRing()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawCustomFocusRing)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn draw_custom_focus_ring(&self, element: &Element) -> bool {
                #[cfg(feature = "Element")]
                ///The `drawCustomFocusRing()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawCustomFocusRing)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_drawCustomFocusRing_59c2c828eda0d230(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        element: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let element =
                            <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(element);
                        __wbg_drawCustomFocusRing_59c2c828eda0d230(this, element)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        #[cfg(feature = "Element")]
        ///The `drawFocusIfNeeded()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_drawFocusIfNeeded_08e331dfec6170b8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl CanvasRenderingContext2d {
            #[cfg(feature = "Element")]
            ///The `drawFocusIfNeeded()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn draw_focus_if_needed(&self, element: &Element) -> Result<(), JsValue> {
                #[cfg(feature = "Element")]
                ///The `drawFocusIfNeeded()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_drawFocusIfNeeded_08e331dfec6170b8(
                        this : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        element: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (self) ;
                        let element =
                            <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(element);
                        __wbg_drawFocusIfNeeded_08e331dfec6170b8(this, element)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        #[allow(non_upper_case_globals)]
        #[cfg(target_arch = "wasm32")]
        #[link_section = "__wasm_bindgen_unstable"]
        #[doc(hidden)]
        #[allow(clippy::all)]
        pub static __WASM_BINDGEN_GENERATED_d866070c11c5b457: [u8; 12488usize] = {
            static _INCLUDED_FILES: &[&str] = &[];
            * b".\x00\x00\x00{\"schema_version\":\"0.2.68\",\"version\":\"0.2.68\"}\x920\x00\x00\x00\x00x\x00\x00\x02\x18CanvasRenderingContext2D:__wbg_instanceof_CanvasRenderingContext2d_5b86ec94bce38d5b\x00\x00\x00\x00\x1d__wbg_canvas_fe845d846ad3fa3a\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\x06canvas\x01\x01\x04this\x06canvas\x01\x00\x00\x00\"__wbg_globalAlpha_6ee8849bd389ac8c\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\x0bglobalAlpha\x01\x01\x04this\x0bglobalAlpha\x01\x00\x00\x00%__wbg_setglobalAlpha_b88eed33e546d000\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\x0bglobalAlpha\x01\x02\x04this\x05value\x0fset_globalAlpha\x01\x00\x00\x00/__wbg_globalCompositeOperation_76aebb86302c97d4\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\x18globalCompositeOperation\x01\x01\x04this\x18globalCompositeOperation\x01\x00\x00\x002__wbg_setglobalCompositeOperation_fabb673593c3527d\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\x18globalCompositeOperation\x01\x02\x04this\x05value\x1cset_globalCompositeOperation\x01\x00\x00\x00\"__wbg_strokeStyle_2bad48a04e19ec36\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\x0bstrokeStyle\x01\x01\x04this\x0bstrokeStyle\x01\x00\x00\x00%__wbg_setstrokeStyle_ab391a0f9102e10c\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\x0bstrokeStyle\x01\x02\x04this\x05value\x0fset_strokeStyle\x01\x00\x00\x00 __wbg_fillStyle_111db7683d694e72\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\tfillStyle\x01\x01\x04this\tfillStyle\x01\x00\x00\x00#__wbg_setfillStyle_2da87acf76dcbbcb\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\tfillStyle\x01\x02\x04this\x05value\rset_fillStyle\x01\x00\x00\x00\x1d__wbg_filter_d66448934176a68d\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\x06filter\x01\x01\x04this\x06filter\x01\x00\x00\x00 __wbg_setfilter_27f986e04414e9dd\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\x06filter\x01\x02\x04this\x05value\nset_filter\x01\x00\x00\x00,__wbg_imageSmoothingEnabled_877679f134ace49c\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\x15imageSmoothingEnabled\x01\x01\x04this\x15imageSmoothingEnabled\x01\x00\x00\x00/__wbg_setimageSmoothingEnabled_84431bd0fa8f411b\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\x15imageSmoothingEnabled\x01\x02\x04this\x05value\x19set_imageSmoothingEnabled\x01\x00\x00\x00 __wbg_lineWidth_c1d9ef1a70213590\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\tlineWidth\x01\x01\x04this\tlineWidth\x01\x00\x00\x00#__wbg_setlineWidth_85798545cf8a1f9d\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\tlineWidth\x01\x02\x04this\x05value\rset_lineWidth\x01\x00\x00\x00\x1e__wbg_lineCap_314f1f6f526fb1a6\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\x07lineCap\x01\x01\x04this\x07lineCap\x01\x00\x00\x00!__wbg_setlineCap_1caf8af038fa84ce\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\x07lineCap\x01\x02\x04this\x05value\x0bset_lineCap\x01\x00\x00\x00\x1f__wbg_lineJoin_0478d6129a15bc3a\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\x08lineJoin\x01\x01\x04this\x08lineJoin\x01\x00\x00\x00\"__wbg_setlineJoin_4f5df004db140cd2\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\x08lineJoin\x01\x02\x04this\x05value\x0cset_lineJoin\x01\x00\x00\x00!__wbg_miterLimit_8f37d58d91054733\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\nmiterLimit\x01\x01\x04this\nmiterLimit\x01\x00\x00\x00$__wbg_setmiterLimit_4e49c930735a741e\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\nmiterLimit\x01\x02\x04this\x05value\x0eset_miterLimit\x01\x00\x00\x00%__wbg_lineDashOffset_6b80004231365d62\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\x0elineDashOffset\x01\x01\x04this\x0elineDashOffset\x01\x00\x00\x00(__wbg_setlineDashOffset_cc3f33b3eb3c5779\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\x0elineDashOffset\x01\x02\x04this\x05value\x12set_lineDashOffset\x01\x00\x00\x00$__wbg_shadowOffsetX_22d1637ba4c2091a\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\rshadowOffsetX\x01\x01\x04this\rshadowOffsetX\x01\x00\x00\x00\'__wbg_setshadowOffsetX_d48d23253f0d522f\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\rshadowOffsetX\x01\x02\x04this\x05value\x11set_shadowOffsetX\x01\x00\x00\x00$__wbg_shadowOffsetY_360681704ebd24cf\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\rshadowOffsetY\x01\x01\x04this\rshadowOffsetY\x01\x00\x00\x00\'__wbg_setshadowOffsetY_14246e3117097f31\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\rshadowOffsetY\x01\x02\x04this\x05value\x11set_shadowOffsetY\x01\x00\x00\x00!__wbg_shadowBlur_d15890c289eddd98\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\nshadowBlur\x01\x01\x04this\nshadowBlur\x01\x00\x00\x00$__wbg_setshadowBlur_062c242aa5d209ea\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\nshadowBlur\x01\x02\x04this\x05value\x0eset_shadowBlur\x01\x00\x00\x00\"__wbg_shadowColor_51cf3099bb468ccd\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\x0bshadowColor\x01\x01\x04this\x0bshadowColor\x01\x00\x00\x00%__wbg_setshadowColor_a35744091b345327\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\x0bshadowColor\x01\x02\x04this\x05value\x0fset_shadowColor\x01\x00\x00\x00\x1b__wbg_font_c6c4f7934648747e\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\x04font\x01\x01\x04this\x04font\x01\x00\x00\x00\x1e__wbg_setfont_7fb9fae174edc509\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\x04font\x01\x02\x04this\x05value\x08set_font\x01\x00\x00\x00 __wbg_textAlign_0bc78f5e541189ec\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\ttextAlign\x01\x01\x04this\ttextAlign\x01\x00\x00\x00#__wbg_settextAlign_ef9d091f8d27eff3\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\ttextAlign\x01\x02\x04this\x05value\rset_textAlign\x01\x00\x00\x00#__wbg_textBaseline_c8bd2f1e23e7afd6\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x01\x0ctextBaseline\x01\x01\x04this\x0ctextBaseline\x01\x00\x00\x00&__wbg_settextBaseline_c2a0520f9cd40851\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x02\x0ctextBaseline\x01\x02\x04this\x05value\x10set_textBaseline\x01\x00\x00\x00!__wbg_drawWindow_b261a2dc7c735ee1\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x07\x04this\x06window\x01x\x01y\x01w\x01h\x08bg_color\ndrawWindow\x01\x00\x00\x00!__wbg_drawWindow_63158abc0547fff2\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x08\x04this\x06window\x01x\x01y\x01w\x01h\x08bg_color\x05flags\ndrawWindow\x01\x00\x00\x00 __wbg_drawImage_75bbd0b57d5e32dd\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x04\x04this\x05image\x02dx\x02dy\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_108af14aa772aaa1\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x04\x04this\x05image\x02dx\x02dy\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_819228aeb2f0b119\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x04\x04this\x05image\x02dx\x02dy\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_07d67c729e2a950e\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x04\x04this\x05image\x02dx\x02dy\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_9d026fb177bddaf0\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x04\x04this\x05image\x02dx\x02dy\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_36205270d639c4ec\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x06\x04this\x05image\x02dx\x02dy\x02dw\x02dh\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_f14662389c68b23b\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x06\x04this\x05image\x02dx\x02dy\x02dw\x02dh\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_2797feea7bfcf865\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x06\x04this\x05image\x02dx\x02dy\x02dw\x02dh\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_d2eca4e011cb2935\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x06\x04this\x05image\x02dx\x02dy\x02dw\x02dh\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_b07fc9335250e153\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x06\x04this\x05image\x02dx\x02dy\x02dw\x02dh\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_ed0ab75dd31bf26b\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\n\x04this\x05image\x02sx\x02sy\x02sw\x02sh\x02dx\x02dy\x02dw\x02dh\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_5827f7f2cd9d3243\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\n\x04this\x05image\x02sx\x02sy\x02sw\x02sh\x02dx\x02dy\x02dw\x02dh\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_1ed23ae3d5cef9bb\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\n\x04this\x05image\x02sx\x02sy\x02sw\x02sh\x02dx\x02dy\x02dw\x02dh\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_3e239f6f700f5e1c\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\n\x04this\x05image\x02sx\x02sy\x02sw\x02sh\x02dx\x02dy\x02dw\x02dh\tdrawImage\x01\x00\x00\x00 __wbg_drawImage_1459e66a0e52fbef\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\n\x04this\x05image\x02sx\x02sy\x02sw\x02sh\x02dx\x02dy\x02dw\x02dh\tdrawImage\x01\x00\x00\x00 __wbg_beginPath_dcfb4577d60a6d17\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x01\x04this\tbeginPath\x01\x00\x00\x00\x1b__wbg_clip_93514277cfa4d0fa\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x01\x04this\x04clip\x01\x00\x00\x00\x1b__wbg_clip_18bfe1a7017bcd2b\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x02\x04this\x07winding\x04clip\x01\x00\x00\x00\x1b__wbg_clip_c7013d6c9f327fc2\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x02\x04this\x04path\x04clip\x01\x00\x00\x00\x1b__wbg_clip_74c8de6134cb3635\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x04path\x07winding\x04clip\x01\x00\x00\x00\x1b__wbg_fill_f7685c1e23b55d83\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x01\x04this\x04fill\x01\x00\x00\x00\x1b__wbg_fill_5553d30a7eeda703\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x02\x04this\x07winding\x04fill\x01\x00\x00\x00\x1b__wbg_fill_d2f103e0577b7b5b\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x02\x04this\x04path\x04fill\x01\x00\x00\x00\x1b__wbg_fill_0a7ab302a43706b5\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x04path\x07winding\x04fill\x01\x00\x00\x00$__wbg_isPointInPath_c291aae9a37007cb\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x01x\x01y\risPointInPath\x01\x00\x00\x00$__wbg_isPointInPath_1c163ea0e5e7395d\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x04\x04this\x01x\x01y\x07winding\risPointInPath\x01\x00\x00\x00$__wbg_isPointInPath_3583f253dfefc503\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x04\x04this\x04path\x01x\x01y\risPointInPath\x01\x00\x00\x00$__wbg_isPointInPath_78cb84cfb6998342\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x05\x04this\x04path\x01x\x01y\x07winding\risPointInPath\x01\x00\x00\x00&__wbg_isPointInStroke_da85b367c7db907c\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x01x\x01y\x0fisPointInStroke\x01\x00\x00\x00&__wbg_isPointInStroke_07f96b0720c9dd09\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x04\x04this\x04path\x01x\x01y\x0fisPointInStroke\x01\x00\x00\x00\x1d__wbg_stroke_e549268dd54abc00\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x01\x04this\x06stroke\x01\x00\x00\x00\x1d__wbg_stroke_9b2913e927c48765\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x02\x04this\x04path\x06stroke\x01\x00\x00\x00+__wbg_createLinearGradient_1a10d1a74c784b4a\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x05\x04this\x02x0\x02y0\x02x1\x02y1\x14createLinearGradient\x01\x00\x00\x00$__wbg_createPattern_724bbee1dc7fbc06\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x05image\nrepetition\rcreatePattern\x01\x00\x00\x00$__wbg_createPattern_07bed7d155bc36ec\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x05image\nrepetition\rcreatePattern\x01\x00\x00\x00$__wbg_createPattern_1227533c6d2308ec\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x05image\nrepetition\rcreatePattern\x01\x00\x00\x00$__wbg_createPattern_5f64e62233867aab\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x05image\nrepetition\rcreatePattern\x01\x00\x00\x00$__wbg_createPattern_ea1130ddb13702cc\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x05image\nrepetition\rcreatePattern\x01\x00\x00\x00+__wbg_createRadialGradient_b3b2de83330b65e8\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x07\x04this\x02x0\x02y0\x02r0\x02x1\x02y1\x02r1\x14createRadialGradient\x01\x00\x00\x00#__wbg_addHitRegion_281dedb6a34e5959\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x01\x04this\x0caddHitRegion\x01\x00\x00\x00#__wbg_addHitRegion_c2bc233bbc43b7c8\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x02\x04this\x07options\x0caddHitRegion\x01\x00\x00\x00&__wbg_clearHitRegions_aa570cbc1354bfd2\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x01\x04this\x0fclearHitRegions\x01\x00\x00\x00&__wbg_removeHitRegion_c0bdfd70d9e0a538\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x02\x04this\x02id\x0fremoveHitRegion\x01\x00\x00\x00&__wbg_createImageData_6331d1a67a52d9d4\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x02sw\x02sh\x0fcreateImageData\x01\x00\x00\x00&__wbg_createImageData_81eb200280044248\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x02\x04this\timagedata\x0fcreateImageData\x01\x00\x00\x00#__wbg_getImageData_888c08c04395524a\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x05\x04this\x02sx\x02sy\x02sw\x02sh\x0cgetImageData\x01\x00\x00\x00#__wbg_putImageData_dcb576c1e3408468\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x04\x04this\timagedata\x02dx\x02dy\x0cputImageData\x01\x00\x00\x00#__wbg_putImageData_3573248520fdd884\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x08\x04this\timagedata\x02dx\x02dy\x07dirty_x\x07dirty_y\x0bdirty_width\x0cdirty_height\x0cputImageData\x01\x00\x00\x00\"__wbg_getLineDash_6afe9c47c3122553\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x01\x04this\x0bgetLineDash\x01\x00\x00\x00\"__wbg_setLineDash_766cf35a21e87364\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x02\x04this\x08segments\x0bsetLineDash\x01\x00\x00\x00\x1a__wbg_arc_fad3e56c8fabaeef\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x06\x04this\x01x\x01y\x06radius\x0bstart_angle\tend_angle\x03arc\x01\x00\x00\x00\x1a__wbg_arc_240c4b7e8050f6eb\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x07\x04this\x01x\x01y\x06radius\x0bstart_angle\tend_angle\ranticlockwise\x03arc\x01\x00\x00\x00\x1c__wbg_arcTo_eff2752e12b9217d\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x06\x04this\x02x1\x02y1\x02x2\x02y2\x06radius\x05arcTo\x01\x00\x00\x00$__wbg_bezierCurveTo_134dac9b768ed24d\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x07\x04this\x04cp1x\x04cp1y\x04cp2x\x04cp2y\x01x\x01y\rbezierCurveTo\x01\x00\x00\x00 __wbg_closePath_4d017a1ccfd4e1df\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x01\x04this\tclosePath\x01\x00\x00\x00\x1e__wbg_ellipse_a5de4b5453a9ebd9\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x08\x04this\x01x\x01y\x08radius_x\x08radius_y\x08rotation\x0bstart_angle\tend_angle\x07ellipse\x01\x00\x00\x00\x1e__wbg_ellipse_2674cf5231c4a9df\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\t\x04this\x01x\x01y\x08radius_x\x08radius_y\x08rotation\x0bstart_angle\tend_angle\ranticlockwise\x07ellipse\x01\x00\x00\x00\x1d__wbg_lineTo_14985b67e58f8d9f\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x01x\x01y\x06lineTo\x01\x00\x00\x00\x1d__wbg_moveTo_3a9ff9e00fc48535\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x01x\x01y\x06moveTo\x01\x00\x00\x00\'__wbg_quadraticCurveTo_1cbdaba718d4531b\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x05\x04this\x03cpx\x03cpy\x01x\x01y\x10quadraticCurveTo\x01\x00\x00\x00\x1b__wbg_rect_26c4e290a5e0ecda\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x05\x04this\x01x\x01y\x01w\x01h\x04rect\x01\x00\x00\x00 __wbg_clearRect_d61bc1791ebc06b1\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x05\x04this\x01x\x01y\x01w\x01h\tclearRect\x01\x00\x00\x00\x1f__wbg_fillRect_e9ad0b5dde70ab3b\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x05\x04this\x01x\x01y\x01w\x01h\x08fillRect\x01\x00\x00\x00!__wbg_strokeRect_6f15f1e147787672\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x05\x04this\x01x\x01y\x01w\x01h\nstrokeRect\x01\x00\x00\x00\x1e__wbg_restore_be383cadf1440d72\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x01\x04this\x07restore\x01\x00\x00\x00\x1b__wbg_save_6d43ca6041c1ddb6\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x01\x04this\x04save\x01\x00\x00\x00\x1f__wbg_fillText_bd212fc8e99ff788\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x04\x04this\x04text\x01x\x01y\x08fillText\x01\x00\x00\x00\x1f__wbg_fillText_0df13d8d3d07f630\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x05\x04this\x04text\x01x\x01y\tmax_width\x08fillText\x01\x00\x00\x00\"__wbg_measureText_103eb7f7c233d6c2\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x02\x04this\x04text\x0bmeasureText\x01\x00\x00\x00!__wbg_strokeText_7afb9b1dfaf1ccdc\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x04\x04this\x04text\x01x\x01y\nstrokeText\x01\x00\x00\x00!__wbg_strokeText_67f88ee39a10d02c\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x05\x04this\x04text\x01x\x01y\tmax_width\nstrokeText\x01\x00\x00\x00#__wbg_getTransform_b259d8cbc25a701b\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x01\x04this\x0cgetTransform\x01\x00\x00\x00%__wbg_resetTransform_3593808a72be4d22\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x01\x04this\x0eresetTransform\x01\x00\x00\x00\x1d__wbg_rotate_1fae86d712dcdfd3\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x02\x04this\x05angle\x06rotate\x01\x00\x00\x00\x1c__wbg_scale_5e58e1e664bed0f2\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x01x\x01y\x05scale\x01\x00\x00\x00#__wbg_setTransform_6277770e3d1afe42\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x07\x04this\x01a\x01b\x01c\x01d\x01e\x01f\x0csetTransform\x01\x00\x00\x00 __wbg_transform_d69a37396a7d9026\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x07\x04this\x01a\x01b\x01c\x01d\x01e\x01f\ttransform\x01\x00\x00\x00 __wbg_translate_458add1387a34577\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x03\x04this\x01x\x01y\ttranslate\x01\x00\x00\x00*__wbg_drawCustomFocusRing_59c2c828eda0d230\x00\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x02\x04this\x07element\x13drawCustomFocusRing\x01\x00\x00\x00(__wbg_drawFocusIfNeeded_08e331dfec6170b8\x01\x00\x00\x01\x18CanvasRenderingContext2D\x01\x00\x00\x01\x02\x04this\x07element\x11drawFocusIfNeeded\x01\x00\x00\x00\x00\x18web-sys-2ffcad8c6dc62865\x00"
        };
        impl CanvasRenderingContext2d {
            ///The `CanvasRenderingContext2D.DRAWWINDOW_DRAW_CARET` const.
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            pub const DRAWWINDOW_DRAW_CARET: u32 = 1u64 as u32;
            ///The `CanvasRenderingContext2D.DRAWWINDOW_DO_NOT_FLUSH` const.
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            pub const DRAWWINDOW_DO_NOT_FLUSH: u32 = 2u64 as u32;
            ///The `CanvasRenderingContext2D.DRAWWINDOW_DRAW_VIEW` const.
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            pub const DRAWWINDOW_DRAW_VIEW: u32 = 4u64 as u32;
            ///The `CanvasRenderingContext2D.DRAWWINDOW_USE_WIDGET_LAYERS` const.
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            pub const DRAWWINDOW_USE_WIDGET_LAYERS: u32 = 8u64 as u32;
            ///The `CanvasRenderingContext2D.DRAWWINDOW_ASYNC_DECODE_IMAGES` const.
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`*
            pub const DRAWWINDOW_ASYNC_DECODE_IMAGES: u32 = 16u64 as u32;
        }
    }
    #[cfg(feature = "CanvasRenderingContext2d")]
    pub use gen_CanvasRenderingContext2d::*;
    #[cfg(feature = "Document")]
    #[allow(non_snake_case)]
    mod gen_Document {
        #![allow(unused_imports)]
        use super::*;
        use wasm_bindgen::prelude::*;
        #[allow(bad_style)]
        ///The `Document` class.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        ///
        #[repr(transparent)]
        #[allow(clippy::all)]
        pub struct Document {
            obj: Node,
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::fmt::Debug for Document {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    Document {
                        obj: ref __self_0_0,
                    } => {
                        let mut debug_trait_builder = f.debug_struct("Document");
                        let _ = debug_trait_builder.field("obj", &&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::clone::Clone for Document {
            #[inline]
            fn clone(&self) -> Document {
                match *self {
                    Document {
                        obj: ref __self_0_0,
                    } => Document {
                        obj: ::core::clone::Clone::clone(&(*__self_0_0)),
                    },
                }
            }
        }

        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::PartialEq for Document {
            #[inline]
            fn eq(&self, other: &Document) -> bool {
                match *other {
                    Document {
                        obj: ref __self_1_0,
                    } => match *self {
                        Document {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) == (*__self_1_0),
                    },
                }
            }
            #[inline]
            fn ne(&self, other: &Document) -> bool {
                match *other {
                    Document {
                        obj: ref __self_1_0,
                    } => match *self {
                        Document {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) != (*__self_1_0),
                    },
                }
            }
        }

        #[allow(bad_style)]
        #[allow(clippy::all)]
        const __wbg_generated_const_Document: () = {
            use wasm_bindgen::__rt::core;
            use wasm_bindgen::convert::RefFromWasmAbi;
            use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
            use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
            use wasm_bindgen::describe::WasmDescribe;
            use wasm_bindgen::{JsCast, JsValue};
            impl WasmDescribe for Document {
                fn describe() {
                    use wasm_bindgen::describe::*;
                    inform(NAMED_EXTERNREF);
                    inform(8u32);
                    inform(68u32);
                    inform(111u32);
                    inform(99u32);
                    inform(117u32);
                    inform(109u32);
                    inform(101u32);
                    inform(110u32);
                    inform(116u32);
                }
            }
            impl core::ops::Deref for Document {
                type Target = Node;
                #[inline]
                fn deref(&self) -> &Node {
                    &self.obj
                }
            }
            impl IntoWasmAbi for Document {
                type Abi = <JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    self.obj.into_abi()
                }
            }
            impl OptionIntoWasmAbi for Document {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl<'a> OptionIntoWasmAbi for &'a Document {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl FromWasmAbi for Document {
                type Abi = <JsValue as FromWasmAbi>::Abi;
                #[inline]
                unsafe fn from_abi(js: Self::Abi) -> Self {
                    Document {
                        obj: JsValue::from_abi(js).into(),
                    }
                }
            }
            impl OptionFromWasmAbi for Document {
                #[inline]
                fn is_none(abi: &Self::Abi) -> bool {
                    *abi == 0
                }
            }
            impl<'a> IntoWasmAbi for &'a Document {
                type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    (&self.obj).into_abi()
                }
            }
            impl RefFromWasmAbi for Document {
                type Abi = <JsValue as RefFromWasmAbi>::Abi;
                type Anchor = core::mem::ManuallyDrop<Document>;
                #[inline]
                unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
                    let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
                    core::mem::ManuallyDrop::new(Document {
                        obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
                    })
                }
            }
            impl From<JsValue> for Document {
                #[inline]
                fn from(obj: JsValue) -> Document {
                    Document { obj: obj.into() }
                }
            }
            impl AsRef<JsValue> for Document {
                #[inline]
                fn as_ref(&self) -> &JsValue {
                    self.obj.as_ref()
                }
            }
            impl AsRef<Document> for Document {
                #[inline]
                fn as_ref(&self) -> &Document {
                    self
                }
            }
            impl From<Document> for JsValue {
                #[inline]
                fn from(obj: Document) -> JsValue {
                    obj.obj.into()
                }
            }
            impl JsCast for Document {
                fn instanceof(val: &JsValue) -> bool {
                    #[link(wasm_import_module = "__wbindgen_placeholder__")]
                    #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                    extern "C" {
                        fn __wbg_instanceof_Document_70bfe57d5f07e1a3(val: u32) -> u32;
                    }
                    unsafe {
                        let idx = val.into_abi();
                        __wbg_instanceof_Document_70bfe57d5f07e1a3(idx) != 0
                    }
                }
                #[inline]
                fn unchecked_from_js(val: JsValue) -> Self {
                    Document { obj: val.into() }
                }
                #[inline]
                fn unchecked_from_js_ref(val: &JsValue) -> &Self {
                    unsafe { &*(val as *const JsValue as *const Document) }
                }
            }
            ()
        };
        #[allow(clippy::all)]
        impl From<Document> for Node {
            #[inline]
            fn from(obj: Document) -> Node {
                use wasm_bindgen::JsCast;
                Node::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<Node> for Document {
            #[inline]
            fn as_ref(&self) -> &Node {
                use wasm_bindgen::JsCast;
                Node::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<Document> for EventTarget {
            #[inline]
            fn from(obj: Document) -> EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<EventTarget> for Document {
            #[inline]
            fn as_ref(&self) -> &EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<Document> for ::js_sys::Object {
            #[inline]
            fn from(obj: Document) -> ::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<::js_sys::Object> for Document {
            #[inline]
            fn as_ref(&self) -> &::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js_ref(self.as_ref())
            }
        }
        impl Document {}
        ///Getter for the `URL` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/URL)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_URL_edefb5b24bc914c3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `URL` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/URL)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn url(&self) -> Result<String, JsValue> {
                ///Getter for the `URL` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/URL)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_URL_edefb5b24bc914c3(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_URL_edefb5b24bc914c3(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        ///Getter for the `documentURI` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_documentURI_bc8b95666a1788d6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `documentURI` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn document_uri(&self) -> Result<String, JsValue> {
                ///Getter for the `documentURI` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURI)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_documentURI_bc8b95666a1788d6(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_documentURI_bc8b95666a1788d6(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        ///Getter for the `compatMode` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_compatMode_461ae0fb58697197() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `compatMode` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn compat_mode(&self) -> String {
                ///Getter for the `compatMode` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_compatMode_461ae0fb58697197(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_compatMode_461ae0fb58697197(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `characterSet` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_characterSet_e833ddcad20b0bc4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `characterSet` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn character_set(&self) -> String {
                ///Getter for the `characterSet` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/characterSet)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_characterSet_e833ddcad20b0bc4(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_characterSet_e833ddcad20b0bc4(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `charset` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/charset)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_charset_4a63d7fff2d66b68() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `charset` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/charset)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn charset(&self) -> String {
                ///Getter for the `charset` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/charset)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_charset_4a63d7fff2d66b68(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_charset_4a63d7fff2d66b68(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `inputEncoding` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/inputEncoding)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_inputEncoding_3a249f5a5e0b52f4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `inputEncoding` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/inputEncoding)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn input_encoding(&self) -> String {
                ///Getter for the `inputEncoding` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/inputEncoding)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_inputEncoding_3a249f5a5e0b52f4(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_inputEncoding_3a249f5a5e0b52f4(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `contentType` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_contentType_b167899a5c603a9b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `contentType` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn content_type(&self) -> String {
                ///Getter for the `contentType` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/contentType)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_contentType_b167899a5c603a9b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_contentType_b167899a5c603a9b(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Document {}
        #[cfg(feature = "Element")]
        ///Getter for the `documentElement` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_documentElement_e60ffc27c86221a5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///Getter for the `documentElement` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn document_element(&self) -> Option<Element> {
                #[cfg(feature = "Element")]
                ///Getter for the `documentElement` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_documentElement_e60ffc27c86221a5(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_documentElement_e60ffc27c86221a5(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Document {}
        ///Getter for the `referrer` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_referrer_20d47afc66c8358d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `referrer` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn referrer(&self) -> String {
                ///Getter for the `referrer` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/referrer)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_referrer_20d47afc66c8358d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_referrer_20d47afc66c8358d(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `lastModified` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastModified)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lastModified_3d0d4e27ce564ae7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `lastModified` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastModified)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn last_modified(&self) -> String {
                ///Getter for the `lastModified` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastModified)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lastModified_3d0d4e27ce564ae7(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_lastModified_3d0d4e27ce564ae7(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `readyState` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_readyState_35f8b45f176e1940() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `readyState` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ready_state(&self) -> String {
                ///Getter for the `readyState` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/readyState)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_readyState_35f8b45f176e1940(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_readyState_35f8b45f176e1940(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `title` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/title)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_title_8d3dc4eae49011e3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `title` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/title)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn title(&self) -> String {
                ///Getter for the `title` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/title)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_title_8d3dc4eae49011e3(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_title_8d3dc4eae49011e3(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `title` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/title)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_settitle_165e2beb3fd737a8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `title` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/title)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_title(&self, value: &str) {
                ///Setter for the `title` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/title)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_settitle_165e2beb3fd737a8(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_settitle_165e2beb3fd737a8(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `dir` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/dir)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_dir_fb2772f2912365eb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `dir` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/dir)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dir(&self) -> String {
                ///Getter for the `dir` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/dir)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dir_fb2772f2912365eb(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_dir_fb2772f2912365eb(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `dir` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/dir)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setdir_10ef90a054cfa4da() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `dir` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/dir)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_dir(&self, value: &str) {
                ///Setter for the `dir` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/dir)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setdir_10ef90a054cfa4da(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setdir_10ef90a054cfa4da(this, value)
                    };
                    ()
                }
            }
        }
        #[cfg(feature = "HtmlElement")]
        ///Getter for the `body` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/body)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_body_8c888fe47d81765f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<HtmlElement> as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "HtmlElement")]
            ///Getter for the `body` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/body)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn body(&self) -> Option<HtmlElement> {
                #[cfg(feature = "HtmlElement")]
                ///Getter for the `body` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/body)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_body_8c888fe47d81765f(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<HtmlElement> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_body_8c888fe47d81765f(this)
                    };
                    <Option<HtmlElement> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        #[cfg(feature = "HtmlElement")]
        ///Setter for the `body` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/body)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setbody_9d362b72315ea46a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&HtmlElement> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "HtmlElement")]
            ///Setter for the `body` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/body)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_body(&self, value: Option<&HtmlElement>) {
                #[cfg(feature = "HtmlElement")]
                ///Setter for the `body` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/body)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setbody_9d362b72315ea46a(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <Option<&HtmlElement> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value =
                            <Option<&HtmlElement> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                value,
                            );
                        __wbg_setbody_9d362b72315ea46a(this, value)
                    };
                    ()
                }
            }
        }
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        #[cfg(feature = "Window")]
        ///Getter for the `defaultView` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_defaultView_59d9614ab7f0965e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<Window> as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Window")]
            ///Getter for the `defaultView` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn default_view(&self) -> Option<Window> {
                #[cfg(feature = "Window")]
                ///Getter for the `defaultView` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/defaultView)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_defaultView_59d9614ab7f0965e(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_defaultView_59d9614ab7f0965e(this)
                    };
                    <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `onreadystatechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onreadystatechange_cfbf5c3f81ad2283() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onreadystatechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onreadystatechange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onreadystatechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onreadystatechange_cfbf5c3f81ad2283(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onreadystatechange_cfbf5c3f81ad2283(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onreadystatechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonreadystatechange_2669199bf2095eee() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onreadystatechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onreadystatechange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onreadystatechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreadystatechange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonreadystatechange_2669199bf2095eee(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonreadystatechange_2669199bf2095eee(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onbeforescriptexecute` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onbeforescriptexecute_6f295c1d1a5be528() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onbeforescriptexecute` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onbeforescriptexecute(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onbeforescriptexecute` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onbeforescriptexecute_6f295c1d1a5be528(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onbeforescriptexecute_6f295c1d1a5be528(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onbeforescriptexecute` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonbeforescriptexecute_b447e1aa4dc5705a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onbeforescriptexecute` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onbeforescriptexecute(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onbeforescriptexecute` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonbeforescriptexecute_b447e1aa4dc5705a(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonbeforescriptexecute_b447e1aa4dc5705a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onafterscriptexecute` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onafterscriptexecute_1c968ea1cc6fa910() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onafterscriptexecute` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onafterscriptexecute(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onafterscriptexecute` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onafterscriptexecute_1c968ea1cc6fa910(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onafterscriptexecute_1c968ea1cc6fa910(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onafterscriptexecute` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonafterscriptexecute_7dba8089e754b00d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onafterscriptexecute` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onafterscriptexecute(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onafterscriptexecute` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonafterscriptexecute_7dba8089e754b00d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonafterscriptexecute_7dba8089e754b00d(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onselectionchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onselectionchange_8bf60643db65a160() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onselectionchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onselectionchange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onselectionchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onselectionchange_8bf60643db65a160(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onselectionchange_8bf60643db65a160(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onselectionchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonselectionchange_812dd4eca8c95f25() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onselectionchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onselectionchange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onselectionchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectionchange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonselectionchange_812dd4eca8c95f25(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonselectionchange_812dd4eca8c95f25(this, value)
                    };
                    ()
                }
            }
        }
        #[cfg(feature = "Element")]
        ///Getter for the `currentScript` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_currentScript_d68cd77f63e80e9b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///Getter for the `currentScript` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn current_script(&self) -> Option<Element> {
                #[cfg(feature = "Element")]
                ///Getter for the `currentScript` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_currentScript_d68cd77f63e80e9b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_currentScript_d68cd77f63e80e9b(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Document {}
        impl Document {}
        ///Getter for the `fullscreen` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreen)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_fullscreen_7ec00285787d014a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `fullscreen` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreen)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn fullscreen(&self) -> bool {
                ///Getter for the `fullscreen` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreen)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_fullscreen_7ec00285787d014a(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_fullscreen_7ec00285787d014a(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `fullscreenEnabled` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_fullscreenEnabled_ef9ead8573750bde() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `fullscreenEnabled` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn fullscreen_enabled(&self) -> bool {
                ///Getter for the `fullscreenEnabled` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenEnabled)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_fullscreenEnabled_ef9ead8573750bde(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_fullscreenEnabled_ef9ead8573750bde(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `onfullscreenchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onfullscreenchange_1250dd2fcf0e77c8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onfullscreenchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onfullscreenchange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onfullscreenchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onfullscreenchange_1250dd2fcf0e77c8(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onfullscreenchange_1250dd2fcf0e77c8(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onfullscreenchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonfullscreenchange_fcdb5e8c7a256fb3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onfullscreenchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onfullscreenchange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onfullscreenchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonfullscreenchange_fcdb5e8c7a256fb3(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonfullscreenchange_fcdb5e8c7a256fb3(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onfullscreenerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onfullscreenerror_d47c8d1c75f25fc9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onfullscreenerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onfullscreenerror(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onfullscreenerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onfullscreenerror_d47c8d1c75f25fc9(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onfullscreenerror_d47c8d1c75f25fc9(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onfullscreenerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonfullscreenerror_d19d776caf7f2d66() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onfullscreenerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onfullscreenerror(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onfullscreenerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonfullscreenerror_d19d776caf7f2d66(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonfullscreenerror_d19d776caf7f2d66(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerlockchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockchange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerlockchange_38be2e16b4a57041() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onpointerlockchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockchange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerlockchange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerlockchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockchange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerlockchange_38be2e16b4a57041(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerlockchange_38be2e16b4a57041(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerlockchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockchange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerlockchange_7647eefe646711d7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onpointerlockchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockchange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerlockchange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerlockchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockchange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerlockchange_7647eefe646711d7(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerlockchange_7647eefe646711d7(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerlockerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockerror)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerlockerror_444eea770ff3a345() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onpointerlockerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockerror)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerlockerror(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerlockerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockerror)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerlockerror_444eea770ff3a345(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerlockerror_444eea770ff3a345(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerlockerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockerror)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerlockerror_0054f3e4b6a6acae() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onpointerlockerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockerror)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerlockerror(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerlockerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerlockerror)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerlockerror_0054f3e4b6a6acae(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerlockerror_0054f3e4b6a6acae(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `hidden` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/hidden)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_hidden_674e2eee45ee273a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `hidden` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/hidden)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn hidden(&self) -> bool {
                ///Getter for the `hidden` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/hidden)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_hidden_674e2eee45ee273a(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_hidden_674e2eee45ee273a(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Document {}
        ///Getter for the `onvisibilitychange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onvisibilitychange_6a76a02b98ee1d19() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onvisibilitychange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onvisibilitychange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onvisibilitychange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onvisibilitychange_6a76a02b98ee1d19(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onvisibilitychange_6a76a02b98ee1d19(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onvisibilitychange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonvisibilitychange_237f3742fa658f8f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onvisibilitychange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onvisibilitychange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onvisibilitychange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvisibilitychange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonvisibilitychange_237f3742fa658f8f(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonvisibilitychange_237f3742fa658f8f(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `selectedStyleSheetSet` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_selectedStyleSheetSet_fbd750ee35736e9e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `selectedStyleSheetSet` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn selected_style_sheet_set(&self) -> Option<String> {
                ///Getter for the `selectedStyleSheetSet` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_selectedStyleSheetSet_fbd750ee35736e9e(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_selectedStyleSheetSet_fbd750ee35736e9e(this)
                    };
                    <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `selectedStyleSheetSet` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setselectedStyleSheetSet_ea48e0d5d543267b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&str> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `selectedStyleSheetSet` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_selected_style_sheet_set(&self, value: Option<&str>) {
                ///Setter for the `selectedStyleSheetSet` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setselectedStyleSheetSet_ea48e0d5d543267b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value =
                            <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setselectedStyleSheetSet_ea48e0d5d543267b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `lastStyleSheetSet` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastStyleSheetSet)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lastStyleSheetSet_f655bf8117fd368b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `lastStyleSheetSet` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastStyleSheetSet)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn last_style_sheet_set(&self) -> Option<String> {
                ///Getter for the `lastStyleSheetSet` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastStyleSheetSet)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lastStyleSheetSet_f655bf8117fd368b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_lastStyleSheetSet_f655bf8117fd368b(this)
                    };
                    <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `preferredStyleSheetSet` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/preferredStyleSheetSet)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_preferredStyleSheetSet_428f9df4a18545d6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `preferredStyleSheetSet` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/preferredStyleSheetSet)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn preferred_style_sheet_set(&self) -> Option<String> {
                ///Getter for the `preferredStyleSheetSet` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/preferredStyleSheetSet)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_preferredStyleSheetSet_428f9df4a18545d6(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_preferredStyleSheetSet_428f9df4a18545d6(this)
                    };
                    <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Document {}
        #[cfg(feature = "Element")]
        ///Getter for the `scrollingElement` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollingElement_d5f7561ef3770104() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///Getter for the `scrollingElement` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scrolling_element(&self) -> Option<Element> {
                #[cfg(feature = "Element")]
                ///Getter for the `scrollingElement` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollingElement_d5f7561ef3770104(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scrollingElement_d5f7561ef3770104(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Document {}
        impl Document {}
        ///Getter for the `oncopy` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oncopy_37d15161bcff9892() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `oncopy` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oncopy(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oncopy` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oncopy_37d15161bcff9892(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oncopy_37d15161bcff9892(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oncopy` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoncopy_e5c8f8c56b1b4f1a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `oncopy` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oncopy(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oncopy` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncopy)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoncopy_e5c8f8c56b1b4f1a(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoncopy_e5c8f8c56b1b4f1a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oncut` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oncut_5d551c9aed518a8c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `oncut` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oncut(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oncut` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oncut_5d551c9aed518a8c(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oncut_5d551c9aed518a8c(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oncut` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoncut_ab7917714d0db9a9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `oncut` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oncut(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oncut` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncut)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoncut_ab7917714d0db9a9(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoncut_ab7917714d0db9a9(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpaste` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpaste_3a2cb8da7bc5fb1d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onpaste` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpaste(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpaste` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpaste_3a2cb8da7bc5fb1d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpaste_3a2cb8da7bc5fb1d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpaste` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpaste_4f157b4bc8b45799() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onpaste` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpaste(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpaste` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpaste)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpaste_4f157b4bc8b45799(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpaste_4f157b4bc8b45799(this, value)
                    };
                    ()
                }
            }
        }
        #[cfg(feature = "Element")]
        ///Getter for the `activeElement` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_activeElement_be2f4f67d6a3c80b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///Getter for the `activeElement` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn active_element(&self) -> Option<Element> {
                #[cfg(feature = "Element")]
                ///Getter for the `activeElement` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/activeElement)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_activeElement_be2f4f67d6a3c80b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_activeElement_be2f4f67d6a3c80b(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Document {}
        #[cfg(feature = "Element")]
        ///Getter for the `pointerLockElement` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerLockElement)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_pointerLockElement_a475aa10af255459() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///Getter for the `pointerLockElement` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerLockElement)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn pointer_lock_element(&self) -> Option<Element> {
                #[cfg(feature = "Element")]
                ///Getter for the `pointerLockElement` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/pointerLockElement)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_pointerLockElement_a475aa10af255459(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_pointerLockElement_a475aa10af255459(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        #[cfg(feature = "Element")]
        ///Getter for the `fullscreenElement` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_fullscreenElement_449980d04fa17948() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///Getter for the `fullscreenElement` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn fullscreen_element(&self) -> Option<Element> {
                #[cfg(feature = "Element")]
                ///Getter for the `fullscreenElement` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/fullscreenElement)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_fullscreenElement_449980d04fa17948(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_fullscreenElement_449980d04fa17948(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Document {}
        ///Getter for the `onabort` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onabort_4509f16fba7f3c10() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onabort` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onabort(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onabort` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onabort_4509f16fba7f3c10(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onabort_4509f16fba7f3c10(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onabort` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonabort_4d3a50651c7bbc31() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onabort` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onabort(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onabort` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onabort)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonabort_4d3a50651c7bbc31(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonabort_4d3a50651c7bbc31(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onblur` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onblur_3aa1ddbd8b6938a6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onblur` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onblur(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onblur` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onblur_3aa1ddbd8b6938a6(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onblur_3aa1ddbd8b6938a6(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onblur` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonblur_ab8f030dfc56d5c8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onblur` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onblur(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onblur` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onblur)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonblur_ab8f030dfc56d5c8(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonblur_ab8f030dfc56d5c8(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onfocus` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onfocus_ece2cbea3ce61a9d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onfocus` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onfocus(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onfocus` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onfocus_ece2cbea3ce61a9d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onfocus_ece2cbea3ce61a9d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onfocus` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonfocus_c810ce2923fece8d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onfocus` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onfocus(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onfocus` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onfocus)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonfocus_c810ce2923fece8d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonfocus_c810ce2923fece8d(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onauxclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onauxclick)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onauxclick_8b30ed97f248b657() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onauxclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onauxclick)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onauxclick(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onauxclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onauxclick)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onauxclick_8b30ed97f248b657(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onauxclick_8b30ed97f248b657(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onauxclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onauxclick)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonauxclick_7b9aff9ec85ea913() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onauxclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onauxclick)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onauxclick(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onauxclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onauxclick)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonauxclick_7b9aff9ec85ea913(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonauxclick_7b9aff9ec85ea913(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oncanplay` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oncanplay_c1efc248ccffcff2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `oncanplay` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oncanplay(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oncanplay` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oncanplay_c1efc248ccffcff2(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oncanplay_c1efc248ccffcff2(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oncanplay` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoncanplay_93c34696b017cd61() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `oncanplay` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oncanplay(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oncanplay` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplay)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoncanplay_93c34696b017cd61(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoncanplay_93c34696b017cd61(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oncanplaythrough` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oncanplaythrough_1694e0771a0efc97() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `oncanplaythrough` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oncanplaythrough(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oncanplaythrough` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oncanplaythrough_1694e0771a0efc97(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oncanplaythrough_1694e0771a0efc97(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oncanplaythrough` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoncanplaythrough_d14d8eccaffc3c65() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `oncanplaythrough` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oncanplaythrough(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oncanplaythrough` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncanplaythrough)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoncanplaythrough_d14d8eccaffc3c65(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoncanplaythrough_d14d8eccaffc3c65(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onchange_b8ddddc446ff2ed3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onchange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onchange_b8ddddc446ff2ed3(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onchange_b8ddddc446ff2ed3(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonchange_289a0b294c182d89() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onchange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onchange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonchange_289a0b294c182d89(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonchange_289a0b294c182d89(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onclick_2c783ad813394270() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onclick(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onclick_2c783ad813394270(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onclick_2c783ad813394270(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonclick_35361480f55e7c5d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onclick(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclick)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonclick_35361480f55e7c5d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonclick_35361480f55e7c5d(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onclose` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onclose_d9f928e74d573f83() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onclose` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onclose(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onclose` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onclose_d9f928e74d573f83(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onclose_d9f928e74d573f83(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onclose` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonclose_5a006e57d8b7ddd5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onclose` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onclose(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onclose` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onclose)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonclose_5a006e57d8b7ddd5(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonclose_5a006e57d8b7ddd5(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oncontextmenu` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oncontextmenu_d9ba75b68c37f35b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `oncontextmenu` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oncontextmenu(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oncontextmenu` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oncontextmenu_d9ba75b68c37f35b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oncontextmenu_d9ba75b68c37f35b(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oncontextmenu` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoncontextmenu_ebc55f3df7a3144a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `oncontextmenu` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oncontextmenu(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oncontextmenu` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oncontextmenu)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoncontextmenu_ebc55f3df7a3144a(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoncontextmenu_ebc55f3df7a3144a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondblclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondblclick_10ea2d217ae95438() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ondblclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondblclick(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondblclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondblclick_10ea2d217ae95438(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondblclick_10ea2d217ae95438(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondblclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondblclick_d2c610f34d02e7aa() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ondblclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondblclick(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondblclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondblclick)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondblclick_d2c610f34d02e7aa(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondblclick_d2c610f34d02e7aa(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondrag` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondrag_b05112b4950b1012() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ondrag` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondrag(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondrag` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondrag_b05112b4950b1012(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondrag_b05112b4950b1012(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondrag` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondrag_4a0181bfcb5e693b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ondrag` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondrag(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondrag` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrag)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondrag_4a0181bfcb5e693b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondrag_4a0181bfcb5e693b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragend_aadd96f36f651e62() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ondragend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragend_aadd96f36f651e62(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragend_aadd96f36f651e62(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragend_dd3cba2a1aa53922() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ondragend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragend_dd3cba2a1aa53922(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragend_dd3cba2a1aa53922(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragenter_f36e11a63752ac97() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ondragenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragenter(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragenter_f36e11a63752ac97(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragenter_f36e11a63752ac97(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragenter_458d2a09c5a5f797() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ondragenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragenter(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragenter)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragenter_458d2a09c5a5f797(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragenter_458d2a09c5a5f797(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragexit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragexit_a5699aa9f9478217() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ondragexit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragexit(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragexit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragexit_a5699aa9f9478217(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragexit_a5699aa9f9478217(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragexit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragexit_459fc646aff70a8d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ondragexit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragexit(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragexit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragexit)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragexit_459fc646aff70a8d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragexit_459fc646aff70a8d(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragleave_34976a79e508bf38() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ondragleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragleave(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragleave_34976a79e508bf38(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragleave_34976a79e508bf38(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragleave_fc8c6243400f90a8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ondragleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragleave(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragleave)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragleave_fc8c6243400f90a8(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragleave_fc8c6243400f90a8(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragover_d41110d861f31e0b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ondragover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragover(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragover_d41110d861f31e0b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragover_d41110d861f31e0b(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragover_3effe16f202b5e96() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ondragover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragover(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragover)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragover_3effe16f202b5e96(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragover_3effe16f202b5e96(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragstart_32e2d78848246631() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ondragstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragstart_32e2d78848246631(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragstart_32e2d78848246631(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragstart_def5946b6f6a0dc2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ondragstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondragstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragstart_def5946b6f6a0dc2(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragstart_def5946b6f6a0dc2(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondrop` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondrop_a985d5317b7f3289() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ondrop` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondrop(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondrop` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondrop_a985d5317b7f3289(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondrop_a985d5317b7f3289(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondrop` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondrop_7e3bc4f1e09ce3ed() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ondrop` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondrop(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondrop` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondrop)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondrop_7e3bc4f1e09ce3ed(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondrop_7e3bc4f1e09ce3ed(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondurationchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondurationchange_83e37abd85ef4a05() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ondurationchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondurationchange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondurationchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondurationchange_83e37abd85ef4a05(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondurationchange_83e37abd85ef4a05(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondurationchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondurationchange_446b34b1d2a2baf2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ondurationchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondurationchange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondurationchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ondurationchange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondurationchange_446b34b1d2a2baf2(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondurationchange_446b34b1d2a2baf2(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onemptied` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onemptied_f6eee5d579c026e3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onemptied` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onemptied(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onemptied` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onemptied_f6eee5d579c026e3(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onemptied_f6eee5d579c026e3(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onemptied` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonemptied_92af1af82617d5d7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onemptied` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onemptied(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onemptied` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onemptied)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonemptied_92af1af82617d5d7(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonemptied_92af1af82617d5d7(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onended` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onended)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onended_1c5a3f92294f3344() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onended` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onended)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onended(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onended` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onended)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onended_1c5a3f92294f3344(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onended_1c5a3f92294f3344(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onended` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onended)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonended_059d0ea7d61a0941() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onended` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onended)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onended(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onended` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onended)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonended_059d0ea7d61a0941(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonended_059d0ea7d61a0941(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oninput` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oninput_ec46d844e4bc87c4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `oninput` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oninput(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oninput` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oninput_ec46d844e4bc87c4(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oninput_ec46d844e4bc87c4(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oninput` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoninput_8bfa18dd20f2b55b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `oninput` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oninput(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oninput` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninput)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoninput_8bfa18dd20f2b55b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoninput_8bfa18dd20f2b55b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oninvalid` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oninvalid_671772ffad76a6d6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `oninvalid` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oninvalid(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oninvalid` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oninvalid_671772ffad76a6d6(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oninvalid_671772ffad76a6d6(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oninvalid` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoninvalid_ebcd2651f1ad3037() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `oninvalid` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oninvalid(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oninvalid` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/oninvalid)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoninvalid_ebcd2651f1ad3037(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoninvalid_ebcd2651f1ad3037(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onkeydown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onkeydown_a5438bf76ea3f5e1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onkeydown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onkeydown(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onkeydown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onkeydown_a5438bf76ea3f5e1(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onkeydown_a5438bf76ea3f5e1(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onkeydown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonkeydown_769adee85fb8210b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onkeydown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onkeydown(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onkeydown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeydown)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonkeydown_769adee85fb8210b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonkeydown_769adee85fb8210b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onkeypress` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onkeypress_b8a81a7aad86e605() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onkeypress` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onkeypress(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onkeypress` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onkeypress_b8a81a7aad86e605(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onkeypress_b8a81a7aad86e605(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onkeypress` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonkeypress_83ea3dcac1c8a693() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onkeypress` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onkeypress(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onkeypress` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeypress)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonkeypress_83ea3dcac1c8a693(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonkeypress_83ea3dcac1c8a693(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onkeyup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onkeyup_243e51b36dd35963() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onkeyup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onkeyup(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onkeyup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onkeyup_243e51b36dd35963(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onkeyup_243e51b36dd35963(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onkeyup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonkeyup_329fd70241654fa0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onkeyup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onkeyup(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onkeyup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onkeyup)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonkeyup_329fd70241654fa0(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonkeyup_329fd70241654fa0(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onload` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onload)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onload_076b97514055e1d6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onload` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onload)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onload(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onload` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onload)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onload_076b97514055e1d6(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onload_076b97514055e1d6(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onload` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onload)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonload_cb80174f65fa00ef() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onload` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onload)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onload(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onload` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onload)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonload_cb80174f65fa00ef(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonload_cb80174f65fa00ef(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onloadeddata` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onloadeddata_ccd10a37e7d78806() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onloadeddata` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onloadeddata(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onloadeddata` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onloadeddata_ccd10a37e7d78806(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onloadeddata_ccd10a37e7d78806(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onloadeddata` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonloadeddata_ecce3c0376eca4cc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onloadeddata` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onloadeddata(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onloadeddata` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadeddata)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonloadeddata_ecce3c0376eca4cc(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonloadeddata_ecce3c0376eca4cc(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onloadedmetadata` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onloadedmetadata_dcd24b46318295e6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onloadedmetadata` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onloadedmetadata(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onloadedmetadata` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onloadedmetadata_dcd24b46318295e6(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onloadedmetadata_dcd24b46318295e6(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onloadedmetadata` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonloadedmetadata_2c4dca9a8a462407() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onloadedmetadata` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onloadedmetadata(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onloadedmetadata` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadedmetadata)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonloadedmetadata_2c4dca9a8a462407(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonloadedmetadata_2c4dca9a8a462407(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onloadend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onloadend_15b92acbd8773491() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onloadend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onloadend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onloadend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onloadend_15b92acbd8773491(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onloadend_15b92acbd8773491(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onloadend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonloadend_7cb3d4b5b1d482a0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onloadend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onloadend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onloadend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonloadend_7cb3d4b5b1d482a0(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonloadend_7cb3d4b5b1d482a0(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onloadstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onloadstart_0c14addbcb9a8fe5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onloadstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onloadstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onloadstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onloadstart_0c14addbcb9a8fe5(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onloadstart_0c14addbcb9a8fe5(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onloadstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonloadstart_895cd51b0d78b0f7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onloadstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onloadstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onloadstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onloadstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonloadstart_895cd51b0d78b0f7(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonloadstart_895cd51b0d78b0f7(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmousedown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmousedown_0b9723c5c173914b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onmousedown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmousedown(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmousedown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmousedown_0b9723c5c173914b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmousedown_0b9723c5c173914b(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmousedown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmousedown_fb34177a9f98f066() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onmousedown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmousedown(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmousedown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousedown)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmousedown_fb34177a9f98f066(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmousedown_fb34177a9f98f066(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseenter_22ea801b28a5885f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onmouseenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseenter(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseenter_22ea801b28a5885f(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseenter_22ea801b28a5885f(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseenter_ba684da4b11639dd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onmouseenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseenter(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseenter)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseenter_ba684da4b11639dd(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseenter_ba684da4b11639dd(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseleave_a11bc28a5bd2c53e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onmouseleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseleave(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseleave_a11bc28a5bd2c53e(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseleave_a11bc28a5bd2c53e(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseleave_10eb830711d0f6fe() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onmouseleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseleave(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseleave)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseleave_10eb830711d0f6fe(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseleave_10eb830711d0f6fe(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmousemove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmousemove_5cd887c3907035a1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onmousemove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmousemove(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmousemove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmousemove_5cd887c3907035a1(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmousemove_5cd887c3907035a1(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmousemove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmousemove_9e9532b4c42d06f9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onmousemove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmousemove(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmousemove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmousemove)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmousemove_9e9532b4c42d06f9(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmousemove_9e9532b4c42d06f9(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseout` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseout_ecf4dc9a6334a853() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onmouseout` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseout(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseout` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseout_ecf4dc9a6334a853(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseout_ecf4dc9a6334a853(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseout` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseout_69fe06000f49c345() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onmouseout` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseout(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseout` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseout)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseout_69fe06000f49c345(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseout_69fe06000f49c345(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseover_51cfbfd2210aa73e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onmouseover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseover(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseover_51cfbfd2210aa73e(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseover_51cfbfd2210aa73e(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseover_53f21a6e4dd18edb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onmouseover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseover(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseover)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseover_53f21a6e4dd18edb(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseover_53f21a6e4dd18edb(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseup_5208f13e4d7e0ec7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onmouseup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseup(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseup_5208f13e4d7e0ec7(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseup_5208f13e4d7e0ec7(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseup_dc9a2e9ecd2be4b7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onmouseup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseup(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onmouseup)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseup_dc9a2e9ecd2be4b7(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseup_dc9a2e9ecd2be4b7(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwheel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwheel_d691db8b6d34faf2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onwheel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwheel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwheel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwheel_d691db8b6d34faf2(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwheel_d691db8b6d34faf2(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwheel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwheel_f124b92091014563() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onwheel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwheel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwheel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwheel)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwheel_f124b92091014563(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwheel_f124b92091014563(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpause` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpause_ac06e8283b78061c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onpause` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpause(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpause` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpause_ac06e8283b78061c(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpause_ac06e8283b78061c(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpause` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpause_78af57a7f27c7def() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onpause` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpause(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpause` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpause)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpause_78af57a7f27c7def(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpause_78af57a7f27c7def(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onplay` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onplay_724e539c6fb2341e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onplay` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onplay(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onplay` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onplay_724e539c6fb2341e(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onplay_724e539c6fb2341e(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onplay` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonplay_02334ea4164a350b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onplay` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onplay(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onplay` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplay)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonplay_02334ea4164a350b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonplay_02334ea4164a350b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onplaying` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onplaying_ef726250124d3815() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onplaying` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onplaying(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onplaying` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onplaying_ef726250124d3815(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onplaying_ef726250124d3815(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onplaying` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonplaying_2b4ecb726470db23() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onplaying` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onplaying(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onplaying` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onplaying)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonplaying_2b4ecb726470db23(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonplaying_2b4ecb726470db23(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onprogress` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onprogress_324a6bece5351da5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onprogress` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onprogress(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onprogress` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onprogress_324a6bece5351da5(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onprogress_324a6bece5351da5(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onprogress` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonprogress_bacb81601b4593b8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onprogress` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onprogress(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onprogress` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onprogress)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonprogress_bacb81601b4593b8(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonprogress_bacb81601b4593b8(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onratechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onratechange_285257642274323e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onratechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onratechange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onratechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onratechange_285257642274323e(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onratechange_285257642274323e(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onratechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonratechange_8fd7a7292caa3996() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onratechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onratechange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onratechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onratechange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonratechange_8fd7a7292caa3996(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonratechange_8fd7a7292caa3996(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onreset` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onreset_ddd147a52c276635() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onreset` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onreset(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onreset` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onreset_ddd147a52c276635(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onreset_ddd147a52c276635(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onreset` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonreset_b502cb4edba46705() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onreset` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onreset(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onreset` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onreset)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonreset_b502cb4edba46705(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonreset_b502cb4edba46705(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onresize` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onresize_8aba3e9aa5d1c6fa() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onresize` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onresize(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onresize` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onresize_8aba3e9aa5d1c6fa(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onresize_8aba3e9aa5d1c6fa(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onresize` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonresize_898c77a11b10561d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onresize` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onresize(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onresize` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onresize)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonresize_898c77a11b10561d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonresize_898c77a11b10561d(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onscroll` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onscroll_185309cc5c63e248() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onscroll` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onscroll(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onscroll` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onscroll_185309cc5c63e248(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onscroll_185309cc5c63e248(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onscroll` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonscroll_6c7953b2a5998599() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onscroll` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onscroll(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onscroll` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onscroll)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonscroll_6c7953b2a5998599(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonscroll_6c7953b2a5998599(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onseeked` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onseeked_e311913b103c214d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onseeked` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onseeked(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onseeked` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onseeked_e311913b103c214d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onseeked_e311913b103c214d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onseeked` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonseeked_ddad48657c137d44() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onseeked` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onseeked(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onseeked` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeked)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonseeked_ddad48657c137d44(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonseeked_ddad48657c137d44(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onseeking` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onseeking_315a543d7a96ef33() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onseeking` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onseeking(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onseeking` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onseeking_315a543d7a96ef33(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onseeking_315a543d7a96ef33(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onseeking` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonseeking_0a1b6e8137f257d9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onseeking` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onseeking(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onseeking` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onseeking)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonseeking_0a1b6e8137f257d9(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonseeking_0a1b6e8137f257d9(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onselect` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onselect_bcb615e8a805d05a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onselect` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onselect(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onselect` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onselect_bcb615e8a805d05a(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onselect_bcb615e8a805d05a(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onselect` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonselect_b49d131ab1e612e6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onselect` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onselect(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onselect` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselect)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonselect_b49d131ab1e612e6(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonselect_b49d131ab1e612e6(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onshow` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onshow_be99ac7c1a5c7f32() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onshow` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onshow(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onshow` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onshow_be99ac7c1a5c7f32(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onshow_be99ac7c1a5c7f32(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onshow` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonshow_7212aaf86cb158a2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onshow` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onshow(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onshow` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onshow)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonshow_7212aaf86cb158a2(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonshow_7212aaf86cb158a2(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onstalled` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onstalled_f3107756526e6571() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onstalled` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onstalled(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onstalled` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onstalled_f3107756526e6571(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onstalled_f3107756526e6571(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onstalled` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonstalled_3240eae6e3db70d4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onstalled` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onstalled(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onstalled` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onstalled)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonstalled_3240eae6e3db70d4(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonstalled_3240eae6e3db70d4(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onsubmit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onsubmit_91bdff267aa3439c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onsubmit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onsubmit(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onsubmit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onsubmit_91bdff267aa3439c(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onsubmit_91bdff267aa3439c(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onsubmit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonsubmit_e7d8157b2c53567b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onsubmit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onsubmit(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onsubmit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsubmit)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonsubmit_e7d8157b2c53567b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonsubmit_e7d8157b2c53567b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onsuspend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onsuspend_6d2865020703afee() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onsuspend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onsuspend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onsuspend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onsuspend_6d2865020703afee(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onsuspend_6d2865020703afee(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onsuspend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonsuspend_c8f6b8d98aee9599() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onsuspend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onsuspend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onsuspend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onsuspend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonsuspend_c8f6b8d98aee9599(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonsuspend_c8f6b8d98aee9599(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontimeupdate` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontimeupdate_f457744a78d0800e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ontimeupdate` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontimeupdate(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontimeupdate` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontimeupdate_f457744a78d0800e(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontimeupdate_f457744a78d0800e(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontimeupdate` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontimeupdate_f55a5198050af8a4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ontimeupdate` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontimeupdate(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontimeupdate` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontimeupdate)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontimeupdate_f55a5198050af8a4(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontimeupdate_f55a5198050af8a4(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onvolumechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onvolumechange_0a1f718cd3a6d1f2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onvolumechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onvolumechange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onvolumechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onvolumechange_0a1f718cd3a6d1f2(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onvolumechange_0a1f718cd3a6d1f2(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onvolumechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonvolumechange_1f45b8701e5d02a9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onvolumechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onvolumechange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onvolumechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onvolumechange)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonvolumechange_1f45b8701e5d02a9(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonvolumechange_1f45b8701e5d02a9(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwaiting` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwaiting_e10015ef1d72d5fc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onwaiting` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwaiting(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwaiting` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwaiting_e10015ef1d72d5fc(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwaiting_e10015ef1d72d5fc(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwaiting` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwaiting_f443087f5e109a70() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onwaiting` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwaiting(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwaiting` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwaiting)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwaiting_f443087f5e109a70(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwaiting_f443087f5e109a70(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onselectstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onselectstart_2ece4d23a7e517d2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onselectstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onselectstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onselectstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onselectstart_2ece4d23a7e517d2(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onselectstart_2ece4d23a7e517d2(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onselectstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonselectstart_50939b2b2cab261e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onselectstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onselectstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onselectstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onselectstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonselectstart_50939b2b2cab261e(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonselectstart_50939b2b2cab261e(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontoggle` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontoggle_8e9a84aaab5338d4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ontoggle` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontoggle(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontoggle` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontoggle_8e9a84aaab5338d4(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontoggle_8e9a84aaab5338d4(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontoggle` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontoggle_6bb6206c33bada1e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ontoggle` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontoggle(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontoggle` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontoggle)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontoggle_6bb6206c33bada1e(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontoggle_6bb6206c33bada1e(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointercancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointercancel)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointercancel_f202076a7e7e3f80() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onpointercancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointercancel)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointercancel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointercancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointercancel)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointercancel_f202076a7e7e3f80(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointercancel_f202076a7e7e3f80(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointercancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointercancel)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointercancel_d6abac3b861833e6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onpointercancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointercancel)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointercancel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointercancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointercancel)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointercancel_d6abac3b861833e6(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointercancel_d6abac3b861833e6(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerdown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerdown)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerdown_a9169c6985002542() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onpointerdown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerdown)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerdown(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerdown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerdown)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerdown_a9169c6985002542(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerdown_a9169c6985002542(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerdown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerdown)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerdown_075dc16e666448aa() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onpointerdown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerdown)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerdown(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerdown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerdown)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerdown_075dc16e666448aa(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerdown_075dc16e666448aa(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerup)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerup_9b9a45fbc29533a2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onpointerup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerup)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerup(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerup)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerup_9b9a45fbc29533a2(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerup_9b9a45fbc29533a2(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerup)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerup_d1fcd03bc6d4d3f7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onpointerup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerup)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerup(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerup)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerup_d1fcd03bc6d4d3f7(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerup_d1fcd03bc6d4d3f7(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointermove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointermove)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointermove_37dd9b8eb4c40a4b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onpointermove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointermove)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointermove(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointermove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointermove)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointermove_37dd9b8eb4c40a4b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointermove_37dd9b8eb4c40a4b(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointermove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointermove)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointermove_28c557c6507ae2c0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onpointermove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointermove)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointermove(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointermove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointermove)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointermove_28c557c6507ae2c0(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointermove_28c557c6507ae2c0(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerout` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerout)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerout_5011d140498cf7c3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onpointerout` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerout)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerout(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerout` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerout)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerout_5011d140498cf7c3(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerout_5011d140498cf7c3(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerout` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerout)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerout_8998b563d6878930() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onpointerout` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerout)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerout(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerout` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerout)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerout_8998b563d6878930(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerout_8998b563d6878930(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerover)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerover_318361c853b75874() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onpointerover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerover)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerover(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerover)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerover_318361c853b75874(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerover_318361c853b75874(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerover)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerover_8daebc96ac025233() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onpointerover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerover)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerover(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerover)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerover_8daebc96ac025233(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerover_8daebc96ac025233(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerenter)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerenter_8e0e7a98732b0a5e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onpointerenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerenter)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerenter(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerenter)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerenter_8e0e7a98732b0a5e(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerenter_8e0e7a98732b0a5e(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerenter)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerenter_5d5156cbc1e92719() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onpointerenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerenter)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerenter(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerenter)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerenter_5d5156cbc1e92719(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerenter_5d5156cbc1e92719(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerleave)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerleave_17515905f58ab154() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onpointerleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerleave)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerleave(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerleave)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerleave_17515905f58ab154(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerleave_17515905f58ab154(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerleave)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerleave_ab04a8584d3a53d8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onpointerleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerleave)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerleave(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onpointerleave)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerleave_ab04a8584d3a53d8(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerleave_ab04a8584d3a53d8(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ongotpointercapture` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ongotpointercapture)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ongotpointercapture_6aac3a951b2fc263() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ongotpointercapture` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ongotpointercapture)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ongotpointercapture(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ongotpointercapture` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ongotpointercapture)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ongotpointercapture_6aac3a951b2fc263(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ongotpointercapture_6aac3a951b2fc263(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ongotpointercapture` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ongotpointercapture)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setongotpointercapture_33a4b980293e4662() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ongotpointercapture` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ongotpointercapture)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ongotpointercapture(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ongotpointercapture` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ongotpointercapture)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setongotpointercapture_33a4b980293e4662(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setongotpointercapture_33a4b980293e4662(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onlostpointercapture` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onlostpointercapture)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onlostpointercapture_ab91669d7afb46de() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onlostpointercapture` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onlostpointercapture)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onlostpointercapture(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onlostpointercapture` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onlostpointercapture)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onlostpointercapture_ab91669d7afb46de(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onlostpointercapture_ab91669d7afb46de(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onlostpointercapture` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onlostpointercapture)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonlostpointercapture_8775f1530d12cd5d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onlostpointercapture` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onlostpointercapture)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onlostpointercapture(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onlostpointercapture` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onlostpointercapture)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonlostpointercapture_8775f1530d12cd5d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonlostpointercapture_8775f1530d12cd5d(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onanimationcancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationcancel)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onanimationcancel_b8924538890bc2d5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onanimationcancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationcancel)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onanimationcancel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onanimationcancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationcancel)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onanimationcancel_b8924538890bc2d5(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onanimationcancel_b8924538890bc2d5(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onanimationcancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationcancel)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonanimationcancel_3124cdc343877640() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onanimationcancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationcancel)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onanimationcancel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onanimationcancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationcancel)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonanimationcancel_3124cdc343877640(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonanimationcancel_3124cdc343877640(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onanimationend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onanimationend_591df18b3171985b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onanimationend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onanimationend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onanimationend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onanimationend_591df18b3171985b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onanimationend_591df18b3171985b(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onanimationend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonanimationend_a1bc83c528167656() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onanimationend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onanimationend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onanimationend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonanimationend_a1bc83c528167656(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonanimationend_a1bc83c528167656(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onanimationiteration` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationiteration)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onanimationiteration_442d52fc39fbf38f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onanimationiteration` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationiteration)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onanimationiteration(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onanimationiteration` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationiteration)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onanimationiteration_442d52fc39fbf38f(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onanimationiteration_442d52fc39fbf38f(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onanimationiteration` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationiteration)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonanimationiteration_211552237dbf9123() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onanimationiteration` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationiteration)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onanimationiteration(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onanimationiteration` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationiteration)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonanimationiteration_211552237dbf9123(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonanimationiteration_211552237dbf9123(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onanimationstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onanimationstart_e1d648acc6bff76d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onanimationstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onanimationstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onanimationstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onanimationstart_e1d648acc6bff76d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onanimationstart_e1d648acc6bff76d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onanimationstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonanimationstart_b183c56c278245d6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onanimationstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onanimationstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onanimationstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onanimationstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonanimationstart_b183c56c278245d6(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonanimationstart_b183c56c278245d6(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontransitioncancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitioncancel)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontransitioncancel_6178a3d56b52a2ff() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ontransitioncancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitioncancel)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontransitioncancel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontransitioncancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitioncancel)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontransitioncancel_6178a3d56b52a2ff(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontransitioncancel_6178a3d56b52a2ff(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontransitioncancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitioncancel)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontransitioncancel_f028dcf20dfa7b18() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ontransitioncancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitioncancel)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontransitioncancel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontransitioncancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitioncancel)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontransitioncancel_f028dcf20dfa7b18(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontransitioncancel_f028dcf20dfa7b18(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontransitionend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontransitionend_99207494d3de603d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ontransitionend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontransitionend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontransitionend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontransitionend_99207494d3de603d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontransitionend_99207494d3de603d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontransitionend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontransitionend_d711cd58ed693650() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ontransitionend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontransitionend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontransitionend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontransitionend_d711cd58ed693650(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontransitionend_d711cd58ed693650(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontransitionrun` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionrun)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontransitionrun_61cf6fbb8d592780() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ontransitionrun` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionrun)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontransitionrun(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontransitionrun` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionrun)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontransitionrun_61cf6fbb8d592780(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontransitionrun_61cf6fbb8d592780(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontransitionrun` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionrun)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontransitionrun_bbf51e449014198d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ontransitionrun` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionrun)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontransitionrun(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontransitionrun` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionrun)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontransitionrun_bbf51e449014198d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontransitionrun_bbf51e449014198d(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontransitionstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontransitionstart_7f3fe9a62e74418c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ontransitionstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontransitionstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontransitionstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontransitionstart_7f3fe9a62e74418c(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontransitionstart_7f3fe9a62e74418c(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontransitionstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontransitionstart_651c51cb5e253705() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ontransitionstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontransitionstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontransitionstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontransitionstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontransitionstart_651c51cb5e253705(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontransitionstart_651c51cb5e253705(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwebkitanimationend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwebkitanimationend_0baf9ab9e1bcbd4a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onwebkitanimationend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwebkitanimationend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwebkitanimationend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwebkitanimationend_0baf9ab9e1bcbd4a(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwebkitanimationend_0baf9ab9e1bcbd4a(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwebkitanimationend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwebkitanimationend_28282caa64375408() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onwebkitanimationend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwebkitanimationend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwebkitanimationend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwebkitanimationend_28282caa64375408(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwebkitanimationend_28282caa64375408(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwebkitanimationiteration` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationiteration)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwebkitanimationiteration_7c16c47b585fa23d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onwebkitanimationiteration` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationiteration)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwebkitanimationiteration(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwebkitanimationiteration` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationiteration)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwebkitanimationiteration_7c16c47b585fa23d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwebkitanimationiteration_7c16c47b585fa23d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwebkitanimationiteration` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationiteration)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwebkitanimationiteration_350865667347807b()
        {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onwebkitanimationiteration` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationiteration)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwebkitanimationiteration(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwebkitanimationiteration` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationiteration)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwebkitanimationiteration_350865667347807b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwebkitanimationiteration_350865667347807b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwebkitanimationstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwebkitanimationstart_32572395d9eb592c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onwebkitanimationstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwebkitanimationstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwebkitanimationstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwebkitanimationstart_32572395d9eb592c(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwebkitanimationstart_32572395d9eb592c(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwebkitanimationstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwebkitanimationstart_f3f3164f18ffa8b8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onwebkitanimationstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwebkitanimationstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwebkitanimationstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkitanimationstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwebkitanimationstart_f3f3164f18ffa8b8(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwebkitanimationstart_f3f3164f18ffa8b8(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwebkittransitionend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkittransitionend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwebkittransitionend_bbc664c459af1eea() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onwebkittransitionend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkittransitionend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwebkittransitionend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwebkittransitionend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkittransitionend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwebkittransitionend_bbc664c459af1eea(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwebkittransitionend_bbc664c459af1eea(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwebkittransitionend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkittransitionend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwebkittransitionend_4d549efe24438237() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onwebkittransitionend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkittransitionend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwebkittransitionend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwebkittransitionend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onwebkittransitionend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwebkittransitionend_4d549efe24438237(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwebkittransitionend_4d549efe24438237(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onerror_7f2569374364bbea() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `onerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onerror(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onerror_7f2569374364bbea(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onerror_7f2569374364bbea(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonerror_f3771c2a52c8e41f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `onerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onerror(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/onerror)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonerror_f3771c2a52c8e41f(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonerror_f3771c2a52c8e41f(this, value)
                    };
                    ()
                }
            }
        }
        impl Document {}
        #[cfg(feature = "Element")]
        ///Getter for the `firstElementChild` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/firstElementChild)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_firstElementChild_208c0d013b82c08e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///Getter for the `firstElementChild` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/firstElementChild)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn first_element_child(&self) -> Option<Element> {
                #[cfg(feature = "Element")]
                ///Getter for the `firstElementChild` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/firstElementChild)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_firstElementChild_208c0d013b82c08e(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_firstElementChild_208c0d013b82c08e(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        #[cfg(feature = "Element")]
        ///Getter for the `lastElementChild` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastElementChild)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lastElementChild_ff22ebe26cfc2645() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///Getter for the `lastElementChild` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastElementChild)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn last_element_child(&self) -> Option<Element> {
                #[cfg(feature = "Element")]
                ///Getter for the `lastElementChild` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/lastElementChild)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lastElementChild_ff22ebe26cfc2645(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_lastElementChild_ff22ebe26cfc2645(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `childElementCount` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/childElementCount)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_childElementCount_65f366449924d919() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <u32 as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `childElementCount` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/childElementCount)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn child_element_count(&self) -> u32 {
                ///Getter for the `childElementCount` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/childElementCount)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_childElementCount_65f366449924d919(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_childElementCount_65f366449924d919(this)
                    };
                    <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `ontouchstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontouchstart_78684de9453ebf1d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ontouchstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontouchstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontouchstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontouchstart_78684de9453ebf1d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontouchstart_78684de9453ebf1d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontouchstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchstart)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontouchstart_938bfe93c807af71() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ontouchstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchstart)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontouchstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontouchstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchstart)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontouchstart_938bfe93c807af71(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontouchstart_938bfe93c807af71(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontouchend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontouchend_601e8a9c08402e96() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ontouchend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontouchend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontouchend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontouchend_601e8a9c08402e96(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontouchend_601e8a9c08402e96(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontouchend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontouchend_64bcab24b7901211() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ontouchend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontouchend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontouchend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontouchend_64bcab24b7901211(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontouchend_64bcab24b7901211(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontouchmove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchmove)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontouchmove_cb98ea28199d6c98() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ontouchmove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchmove)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontouchmove(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontouchmove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchmove)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontouchmove_cb98ea28199d6c98(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontouchmove_cb98ea28199d6c98(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontouchmove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchmove)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontouchmove_ebbf141dbd293aea() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ontouchmove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchmove)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontouchmove(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontouchmove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchmove)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontouchmove_ebbf141dbd293aea(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontouchmove_ebbf141dbd293aea(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontouchcancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchcancel)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontouchcancel_00df5c98fb5302e5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Document {
            ///Getter for the `ontouchcancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchcancel)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontouchcancel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontouchcancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchcancel)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontouchcancel_00df5c98fb5302e5(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontouchcancel_00df5c98fb5302e5(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontouchcancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchcancel)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontouchcancel_011e6025a6e4c061() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///Setter for the `ontouchcancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchcancel)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontouchcancel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontouchcancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/ontouchcancel)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontouchcancel_011e6025a6e4c061(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontouchcancel_011e6025a6e4c061(this, value)
                    };
                    ()
                }
            }
        }
        ///The `new Document(..)` constructor, creating a new instance of `Document`.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/Document)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_new_fede784bbaaa0efc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(0u32);
            <Document as WasmDescribe>::describe();
        }
        impl Document {
            ///The `new Document(..)` constructor, creating a new instance of `Document`.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/Document)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn new() -> Result<Document, JsValue> {
                ///The `new Document(..)` constructor, creating a new instance of `Document`.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/Document)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_new_fede784bbaaa0efc(
                    ) -> <Document as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = { __wbg_new_fede784bbaaa0efc() };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Document as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        ///The `adoptNode()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_adoptNode_675a5805da9506c1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <Node as WasmDescribe>::describe();
        }
        impl Document {
            ///The `adoptNode()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn adopt_node(&self, node: &Node) -> Result<Node, JsValue> {
                ///The `adoptNode()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/adoptNode)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_adoptNode_675a5805da9506c1(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let node = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                        __wbg_adoptNode_675a5805da9506c1(this, node)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        #[cfg(feature = "Element")]
        ///The `createElement()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createElement_5bdf88a5af9f17c5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Element as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///The `createElement()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_element(&self, local_name: &str) -> Result<Element, JsValue> {
                #[cfg(feature = "Element")]
                ///The `createElement()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createElement_5bdf88a5af9f17c5(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Element as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let local_name =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(local_name);
                        __wbg_createElement_5bdf88a5af9f17c5(this, local_name)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Element as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        impl Document {}
        #[cfg(feature = "Element")]
        ///The `createElement()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createElement_c537958a4e0d7c9d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Element as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///The `createElement()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_element_with_str(
                &self,
                local_name: &str,
                options: &str,
            ) -> Result<Element, JsValue> {
                #[cfg(feature = "Element")]
                ///The `createElement()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createElement_c537958a4e0d7c9d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        options: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Element as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let local_name =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(local_name);
                        let options =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(options);
                        __wbg_createElement_c537958a4e0d7c9d(this, local_name, options)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Element as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        #[cfg(feature = "Element")]
        ///The `createElementNS()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createElementNS_ea14cb45a87a0719() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Document as WasmDescribe>::describe();
            <Option<&str> as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Element as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///The `createElementNS()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_element_ns(
                &self,
                namespace: Option<&str>,
                qualified_name: &str,
            ) -> Result<Element, JsValue> {
                #[cfg(feature = "Element")]
                ///The `createElementNS()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createElementNS_ea14cb45a87a0719(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        qualified_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Element as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let namespace =
                            <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                namespace,
                            );
                        let qualified_name =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(qualified_name);
                        __wbg_createElementNS_ea14cb45a87a0719(this, namespace, qualified_name)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Element as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        impl Document {}
        #[cfg(feature = "Element")]
        ///The `createElementNS()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createElementNS_13a080f1b1e0a9b5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Document as WasmDescribe>::describe();
            <Option<&str> as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Element as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///The `createElementNS()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_element_ns_with_str(
                &self,
                namespace: Option<&str>,
                qualified_name: &str,
                options: &str,
            ) -> Result<Element, JsValue> {
                #[cfg(feature = "Element")]
                ///The `createElementNS()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createElementNS)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createElementNS_13a080f1b1e0a9b5(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        qualified_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        options: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Element as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let namespace =
                            <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                namespace,
                            );
                        let qualified_name =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(qualified_name);
                        let options =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(options);
                        __wbg_createElementNS_13a080f1b1e0a9b5(
                            this,
                            namespace,
                            qualified_name,
                            options,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Element as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        #[cfg(feature = "Event")]
        ///The `createEvent()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createEvent_c250edff0a0a6ef3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Event as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Event")]
            ///The `createEvent()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_event(&self, interface: &str) -> Result<Event, JsValue> {
                #[cfg(feature = "Event")]
                ///The `createEvent()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createEvent)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createEvent_c250edff0a0a6ef3(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        interface: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Event as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let interface =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(interface);
                        __wbg_createEvent_c250edff0a0a6ef3(this, interface)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Event as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        ///The `enableStyleSheetsForSet()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/enableStyleSheetsForSet)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_enableStyleSheetsForSet_04b0708dfefea0ab() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <Option<&str> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `enableStyleSheetsForSet()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/enableStyleSheetsForSet)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn enable_style_sheets_for_set(&self, name: Option<&str>) {
                ///The `enableStyleSheetsForSet()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/enableStyleSheetsForSet)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_enableStyleSheetsForSet_04b0708dfefea0ab(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        name: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let name =
                            <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                        __wbg_enableStyleSheetsForSet_04b0708dfefea0ab(this, name)
                    };
                    ()
                }
            }
        }
        ///The `exitFullscreen()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_exitFullscreen_cbab2d88768d31dc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `exitFullscreen()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn exit_fullscreen(&self) {
                ///The `exitFullscreen()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/exitFullscreen)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_exitFullscreen_cbab2d88768d31dc(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_exitFullscreen_cbab2d88768d31dc(this)
                    };
                    ()
                }
            }
        }
        ///The `exitPointerLock()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_exitPointerLock_8208c9bc6180e105() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `exitPointerLock()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn exit_pointer_lock(&self) {
                ///The `exitPointerLock()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_exitPointerLock_8208c9bc6180e105(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_exitPointerLock_8208c9bc6180e105(this)
                    };
                    ()
                }
            }
        }
        ///The `getAnimations()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getAnimations)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_getAnimations_754c00f923510420() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <::js_sys::Array as WasmDescribe>::describe();
        }
        impl Document {
            ///The `getAnimations()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getAnimations)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn get_animations(&self) -> ::js_sys::Array {
                ///The `getAnimations()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getAnimations)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_getAnimations_754c00f923510420(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_getAnimations_754c00f923510420(this)
                    };
                    <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        #[cfg(feature = "Element")]
        ///The `getElementById()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_getElementById_0cb6ad9511b1efc0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///The `getElementById()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn get_element_by_id(&self, element_id: &str) -> Option<Element> {
                #[cfg(feature = "Element")]
                ///The `getElementById()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_getElementById_0cb6ad9511b1efc0(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        element_id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let element_id =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(element_id);
                        __wbg_getElementById_0cb6ad9511b1efc0(this, element_id)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        ///The `hasFocus()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_hasFocus_1fcb663f9c532947() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Document {
            ///The `hasFocus()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn has_focus(&self) -> Result<bool, JsValue> {
                ///The `hasFocus()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/hasFocus)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_hasFocus_1fcb663f9c532947(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_hasFocus_1fcb663f9c532947(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `importNode()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_importNode_eb760a52e9ec588c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <Node as WasmDescribe>::describe();
        }
        impl Document {
            ///The `importNode()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn import_node(&self, node: &Node) -> Result<Node, JsValue> {
                ///The `importNode()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_importNode_eb760a52e9ec588c(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let node = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                        __wbg_importNode_eb760a52e9ec588c(this, node)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `importNode()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_importNode_b564776b3f672fa7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <Node as WasmDescribe>::describe();
        }
        impl Document {
            ///The `importNode()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn import_node_with_deep(&self, node: &Node, deep: bool) -> Result<Node, JsValue> {
                ///The `importNode()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/importNode)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_importNode_b564776b3f672fa7(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        deep: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let node = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                        let deep = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(deep);
                        __wbg_importNode_b564776b3f672fa7(this, node, deep)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        #[cfg(feature = "Element")]
        ///The `querySelector()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_querySelector_69fd5cd784bcc892() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///The `querySelector()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn query_selector(&self, selectors: &str) -> Result<Option<Element>, JsValue> {
                #[cfg(feature = "Element")]
                ///The `querySelector()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_querySelector_69fd5cd784bcc892(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        selectors: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let selectors =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(selectors);
                        __wbg_querySelector_69fd5cd784bcc892(this, selectors)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl Document {}
        ///The `releaseCapture()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/releaseCapture)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_releaseCapture_e431bc6e6b0e0b63() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `releaseCapture()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/releaseCapture)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn release_capture(&self) {
                ///The `releaseCapture()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/releaseCapture)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_releaseCapture_e431bc6e6b0e0b63(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_releaseCapture_e431bc6e6b0e0b63(this)
                    };
                    ()
                }
            }
        }
        #[cfg(feature = "Element")]
        ///The `elementFromPoint()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_elementFromPoint_6a578f7e3be13bde() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Document as WasmDescribe>::describe();
            <f32 as WasmDescribe>::describe();
            <f32 as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Document {
            #[cfg(feature = "Element")]
            ///The `elementFromPoint()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn element_from_point(&self, x: f32, y: f32) -> Option<Element> {
                #[cfg(feature = "Element")]
                ///The `elementFromPoint()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/elementFromPoint)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_elementFromPoint_6a578f7e3be13bde(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let x = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_elementFromPoint_6a578f7e3be13bde(this, x, y)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `elementsFromPoint()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_elementsFromPoint_db385c1429ebd133() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Document as WasmDescribe>::describe();
            <f32 as WasmDescribe>::describe();
            <f32 as WasmDescribe>::describe();
            <::js_sys::Array as WasmDescribe>::describe();
        }
        impl Document {
            ///The `elementsFromPoint()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn elements_from_point(&self, x: f32, y: f32) -> ::js_sys::Array {
                ///The `elementsFromPoint()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_elementsFromPoint_db385c1429ebd133(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let x = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_elementsFromPoint_db385c1429ebd133(this, x, y)
                    };
                    <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        ///The `getBoxQuads()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getBoxQuads)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_getBoxQuads_65e97864ca9ee5f8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <::js_sys::Array as WasmDescribe>::describe();
        }
        impl Document {
            ///The `getBoxQuads()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getBoxQuads)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn get_box_quads(&self) -> Result<::js_sys::Array, JsValue> {
                ///The `getBoxQuads()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/getBoxQuads)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_getBoxQuads_65e97864ca9ee5f8(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_getBoxQuads_65e97864ca9ee5f8(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl Document {}
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_a8476a7a0ecf2b6b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_a8476a7a0ecf2b6b(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_append_a8476a7a0ecf2b6b(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_6bd584a12a83da64() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_0(&self) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_6bd584a12a83da64(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_append_6bd584a12a83da64(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_ec4fa7a02af10b55() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_1(&self, nodes_1: &Node) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_ec4fa7a02af10b55(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_append_ec4fa7a02af10b55(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_b4fdce37cd7e71ee() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_2(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_b4fdce37cd7e71ee(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_append_b4fdce37cd7e71ee(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_c6bad1d44e023af6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_3(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_c6bad1d44e023af6(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_append_c6bad1d44e023af6(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_d2d0c503b75082a5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_4(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_d2d0c503b75082a5(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_append_d2d0c503b75082a5(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_ce93481701fbe9f9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_5(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_ce93481701fbe9f9(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_append_ce93481701fbe9f9(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_159c409c1c47f939() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_6(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_159c409c1c47f939(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_append_159c409c1c47f939(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_9597fb08cf59d3fe() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_7(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
                nodes_7: &Node,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_9597fb08cf59d3fe(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_append_9597fb08cf59d3fe(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_f4995e1ae3947543() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_f4995e1ae3947543(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_append_f4995e1ae3947543(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_18eeec154ca17955() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_0(&self) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_18eeec154ca17955(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_append_18eeec154ca17955(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_5b7dc2005b0c31e5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_1(&self, nodes_1: &str) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_5b7dc2005b0c31e5(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_append_5b7dc2005b0c31e5(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_5d6bfbad09749937() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_2(&self, nodes_1: &str, nodes_2: &str) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_5d6bfbad09749937(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_append_5d6bfbad09749937(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_459c67446ddf9c68() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_3(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_459c67446ddf9c68(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_append_459c67446ddf9c68(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_7ea9e18856099ff6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_4(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_7ea9e18856099ff6(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_append_7ea9e18856099ff6(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_e758744239f945f8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_5(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_e758744239f945f8(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_append_e758744239f945f8(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_57f3df30bc615b4d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_6(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_57f3df30bc615b4d(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_append_57f3df30bc615b4d(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_3bcb727a48039a06() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_7(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
                nodes_7: &str,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/append)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_3bcb727a48039a06(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_append_3bcb727a48039a06(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_adab93beae2f1050() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_adab93beae2f1050(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_prepend_adab93beae2f1050(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_41d9252366a021d3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_0(&self) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_41d9252366a021d3(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_prepend_41d9252366a021d3(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_7dacf6e8e6fbf4a5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_1(&self, nodes_1: &Node) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_7dacf6e8e6fbf4a5(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_prepend_7dacf6e8e6fbf4a5(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_dd777ae8c9305c47() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_2(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_dd777ae8c9305c47(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_prepend_dd777ae8c9305c47(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_c1fdbd147f8dc9a9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_3(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_c1fdbd147f8dc9a9(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_prepend_c1fdbd147f8dc9a9(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_f612acc535915ec9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_4(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_f612acc535915ec9(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_prepend_f612acc535915ec9(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_737f4697b03debf1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_5(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_737f4697b03debf1(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_prepend_737f4697b03debf1(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_9a21d4755a56f874() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_6(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_9a21d4755a56f874(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_prepend_9a21d4755a56f874(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_a89b5842f4981655() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_7(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
                nodes_7: &Node,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_a89b5842f4981655(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_prepend_a89b5842f4981655(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_ac2aff74ddfb31e0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_ac2aff74ddfb31e0(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_prepend_ac2aff74ddfb31e0(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_5b739bf7f45a9340() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Document as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_0(&self) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_5b739bf7f45a9340(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_prepend_5b739bf7f45a9340(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_c1ec20c79f845577() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_1(&self, nodes_1: &str) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_c1ec20c79f845577(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_prepend_c1ec20c79f845577(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_d23cb0aa9e93f77c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_2(&self, nodes_1: &str, nodes_2: &str) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_d23cb0aa9e93f77c(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_prepend_d23cb0aa9e93f77c(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_537426ddf11c32c6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_3(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_537426ddf11c32c6(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_prepend_537426ddf11c32c6(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_9d505a8e84cf3323() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_4(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_9d505a8e84cf3323(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_prepend_9d505a8e84cf3323(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_94b185959f3fde3f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_5(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_94b185959f3fde3f(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_prepend_94b185959f3fde3f(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_40c8d371615fc1b5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_6(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_40c8d371615fc1b5(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_prepend_40c8d371615fc1b5(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_3aaee26df36bd9c1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Document as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Document {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_7(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
                nodes_7: &str,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_3aaee26df36bd9c1(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_prepend_3aaee26df36bd9c1(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl Document {}
        impl Document {}
        impl Document {}
        ///The `createNSResolver()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createNSResolver)
        ///
        ///*This API requires the following crate features to be activated: `Document`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createNSResolver_711e56f2fd7b9c9e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Document as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <Node as WasmDescribe>::describe();
        }
        impl Document {
            ///The `createNSResolver()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createNSResolver)
            ///
            ///*This API requires the following crate features to be activated: `Document`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_ns_resolver(&self, node_resolver: &Node) -> Node {
                ///The `createNSResolver()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Document/createNSResolver)
                ///
                ///*This API requires the following crate features to be activated: `Document`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createNSResolver_711e56f2fd7b9c9e(
                        this: <&Document as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        node_resolver: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&Document as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let node_resolver =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node_resolver);
                        __wbg_createNSResolver_711e56f2fd7b9c9e(this, node_resolver)
                    };
                    <Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        impl Document {}
        #[allow(non_upper_case_globals)]
        #[cfg(target_arch = "wasm32")]
        #[link_section = "__wasm_bindgen_unstable"]
        #[doc(hidden)]
        #[allow(clippy::all)]
        pub static __WASM_BINDGEN_GENERATED_3717b3ba1c3b3958: [u8; 33690usize] = {
            static _INCLUDED_FILES: &[&str] = &[];
            * b".\x00\x00\x00{\"schema_version\":\"0.2.68\",\"version\":\"0.2.68\"}d\x83\x00\x00\x00\x00\xe8\x02\x00\x00\x02\x08Document*__wbg_instanceof_Document_70bfe57d5f07e1a3\x00\x00\x00\x00%__wbg_implementation_99a4c94c17e62b86\x01\x00\x00\x01\x08Document\x01\x00\x01\x0eimplementation\x01\x01\x04this\x0eimplementation\x01\x00\x00\x00\x1a__wbg_URL_edefb5b24bc914c3\x01\x00\x00\x01\x08Document\x01\x00\x01\x03URL\x01\x01\x04this\x03URL\x01\x00\x00\x00\"__wbg_documentURI_bc8b95666a1788d6\x01\x00\x00\x01\x08Document\x01\x00\x01\x0bdocumentURI\x01\x01\x04this\x0bdocumentURI\x01\x00\x00\x00!__wbg_compatMode_461ae0fb58697197\x00\x00\x00\x01\x08Document\x01\x00\x01\ncompatMode\x01\x01\x04this\ncompatMode\x01\x00\x00\x00#__wbg_characterSet_e833ddcad20b0bc4\x00\x00\x00\x01\x08Document\x01\x00\x01\x0ccharacterSet\x01\x01\x04this\x0ccharacterSet\x01\x00\x00\x00\x1e__wbg_charset_4a63d7fff2d66b68\x00\x00\x00\x01\x08Document\x01\x00\x01\x07charset\x01\x01\x04this\x07charset\x01\x00\x00\x00$__wbg_inputEncoding_3a249f5a5e0b52f4\x00\x00\x00\x01\x08Document\x01\x00\x01\rinputEncoding\x01\x01\x04this\rinputEncoding\x01\x00\x00\x00\"__wbg_contentType_b167899a5c603a9b\x00\x00\x00\x01\x08Document\x01\x00\x01\x0bcontentType\x01\x01\x04this\x0bcontentType\x01\x00\x00\x00\x1e__wbg_doctype_f71b2a6a4159e6e2\x00\x00\x00\x01\x08Document\x01\x00\x01\x07doctype\x01\x01\x04this\x07doctype\x01\x00\x00\x00&__wbg_documentElement_e60ffc27c86221a5\x00\x00\x00\x01\x08Document\x01\x00\x01\x0fdocumentElement\x01\x01\x04this\x0fdocumentElement\x01\x00\x00\x00\x1f__wbg_location_9835be61b5ee5ab0\x00\x00\x00\x01\x08Document\x01\x00\x01\x08location\x01\x01\x04this\x08location\x01\x00\x00\x00\x1f__wbg_referrer_20d47afc66c8358d\x00\x00\x00\x01\x08Document\x01\x00\x01\x08referrer\x01\x01\x04this\x08referrer\x01\x00\x00\x00#__wbg_lastModified_3d0d4e27ce564ae7\x00\x00\x00\x01\x08Document\x01\x00\x01\x0clastModified\x01\x01\x04this\x0clastModified\x01\x00\x00\x00!__wbg_readyState_35f8b45f176e1940\x00\x00\x00\x01\x08Document\x01\x00\x01\nreadyState\x01\x01\x04this\nreadyState\x01\x00\x00\x00\x1c__wbg_title_8d3dc4eae49011e3\x00\x00\x00\x01\x08Document\x01\x00\x01\x05title\x01\x01\x04this\x05title\x01\x00\x00\x00\x1f__wbg_settitle_165e2beb3fd737a8\x00\x00\x00\x01\x08Document\x01\x00\x02\x05title\x01\x02\x04this\x05value\tset_title\x01\x00\x00\x00\x1a__wbg_dir_fb2772f2912365eb\x00\x00\x00\x01\x08Document\x01\x00\x01\x03dir\x01\x01\x04this\x03dir\x01\x00\x00\x00\x1d__wbg_setdir_10ef90a054cfa4da\x00\x00\x00\x01\x08Document\x01\x00\x02\x03dir\x01\x02\x04this\x05value\x07set_dir\x01\x00\x00\x00\x1b__wbg_body_8c888fe47d81765f\x00\x00\x00\x01\x08Document\x01\x00\x01\x04body\x01\x01\x04this\x04body\x01\x00\x00\x00\x1e__wbg_setbody_9d362b72315ea46a\x00\x00\x00\x01\x08Document\x01\x00\x02\x04body\x01\x02\x04this\x05value\x08set_body\x01\x00\x00\x00\x1b__wbg_head_5b8d72423fc1599b\x00\x00\x00\x01\x08Document\x01\x00\x01\x04head\x01\x01\x04this\x04head\x01\x00\x00\x00\x1d__wbg_images_bc6a9c3781694e96\x00\x00\x00\x01\x08Document\x01\x00\x01\x06images\x01\x01\x04this\x06images\x01\x00\x00\x00\x1d__wbg_embeds_f44d4943bcafff14\x00\x00\x00\x01\x08Document\x01\x00\x01\x06embeds\x01\x01\x04this\x06embeds\x01\x00\x00\x00\x1e__wbg_plugins_5bf501e46fe33e81\x00\x00\x00\x01\x08Document\x01\x00\x01\x07plugins\x01\x01\x04this\x07plugins\x01\x00\x00\x00\x1c__wbg_links_68ee2735bb0a9c60\x00\x00\x00\x01\x08Document\x01\x00\x01\x05links\x01\x01\x04this\x05links\x01\x00\x00\x00\x1c__wbg_forms_c2d5b398b0972b09\x00\x00\x00\x01\x08Document\x01\x00\x01\x05forms\x01\x01\x04this\x05forms\x01\x00\x00\x00\x1e__wbg_scripts_11bfdb36abdbbf58\x00\x00\x00\x01\x08Document\x01\x00\x01\x07scripts\x01\x01\x04this\x07scripts\x01\x00\x00\x00\"__wbg_defaultView_59d9614ab7f0965e\x00\x00\x00\x01\x08Document\x01\x00\x01\x0bdefaultView\x01\x01\x04this\x0bdefaultView\x01\x00\x00\x00)__wbg_onreadystatechange_cfbf5c3f81ad2283\x00\x00\x00\x01\x08Document\x01\x00\x01\x12onreadystatechange\x01\x01\x04this\x12onreadystatechange\x01\x00\x00\x00,__wbg_setonreadystatechange_2669199bf2095eee\x00\x00\x00\x01\x08Document\x01\x00\x02\x12onreadystatechange\x01\x02\x04this\x05value\x16set_onreadystatechange\x01\x00\x00\x00,__wbg_onbeforescriptexecute_6f295c1d1a5be528\x00\x00\x00\x01\x08Document\x01\x00\x01\x15onbeforescriptexecute\x01\x01\x04this\x15onbeforescriptexecute\x01\x00\x00\x00/__wbg_setonbeforescriptexecute_b447e1aa4dc5705a\x00\x00\x00\x01\x08Document\x01\x00\x02\x15onbeforescriptexecute\x01\x02\x04this\x05value\x19set_onbeforescriptexecute\x01\x00\x00\x00+__wbg_onafterscriptexecute_1c968ea1cc6fa910\x00\x00\x00\x01\x08Document\x01\x00\x01\x14onafterscriptexecute\x01\x01\x04this\x14onafterscriptexecute\x01\x00\x00\x00.__wbg_setonafterscriptexecute_7dba8089e754b00d\x00\x00\x00\x01\x08Document\x01\x00\x02\x14onafterscriptexecute\x01\x02\x04this\x05value\x18set_onafterscriptexecute\x01\x00\x00\x00(__wbg_onselectionchange_8bf60643db65a160\x00\x00\x00\x01\x08Document\x01\x00\x01\x11onselectionchange\x01\x01\x04this\x11onselectionchange\x01\x00\x00\x00+__wbg_setonselectionchange_812dd4eca8c95f25\x00\x00\x00\x01\x08Document\x01\x00\x02\x11onselectionchange\x01\x02\x04this\x05value\x15set_onselectionchange\x01\x00\x00\x00$__wbg_currentScript_d68cd77f63e80e9b\x00\x00\x00\x01\x08Document\x01\x00\x01\rcurrentScript\x01\x01\x04this\rcurrentScript\x01\x00\x00\x00\x1e__wbg_anchors_78fa24373aa3e58e\x00\x00\x00\x01\x08Document\x01\x00\x01\x07anchors\x01\x01\x04this\x07anchors\x01\x00\x00\x00\x1e__wbg_applets_e343c174deb6c809\x00\x00\x00\x01\x08Document\x01\x00\x01\x07applets\x01\x01\x04this\x07applets\x01\x00\x00\x00!__wbg_fullscreen_7ec00285787d014a\x00\x00\x00\x01\x08Document\x01\x00\x01\nfullscreen\x01\x01\x04this\nfullscreen\x01\x00\x00\x00(__wbg_fullscreenEnabled_ef9ead8573750bde\x00\x00\x00\x01\x08Document\x01\x00\x01\x11fullscreenEnabled\x01\x01\x04this\x11fullscreenEnabled\x01\x00\x00\x00)__wbg_onfullscreenchange_1250dd2fcf0e77c8\x00\x00\x00\x01\x08Document\x01\x00\x01\x12onfullscreenchange\x01\x01\x04this\x12onfullscreenchange\x01\x00\x00\x00,__wbg_setonfullscreenchange_fcdb5e8c7a256fb3\x00\x00\x00\x01\x08Document\x01\x00\x02\x12onfullscreenchange\x01\x02\x04this\x05value\x16set_onfullscreenchange\x01\x00\x00\x00(__wbg_onfullscreenerror_d47c8d1c75f25fc9\x00\x00\x00\x01\x08Document\x01\x00\x01\x11onfullscreenerror\x01\x01\x04this\x11onfullscreenerror\x01\x00\x00\x00+__wbg_setonfullscreenerror_d19d776caf7f2d66\x00\x00\x00\x01\x08Document\x01\x00\x02\x11onfullscreenerror\x01\x02\x04this\x05value\x15set_onfullscreenerror\x01\x00\x00\x00*__wbg_onpointerlockchange_38be2e16b4a57041\x00\x00\x00\x01\x08Document\x01\x00\x01\x13onpointerlockchange\x01\x01\x04this\x13onpointerlockchange\x01\x00\x00\x00-__wbg_setonpointerlockchange_7647eefe646711d7\x00\x00\x00\x01\x08Document\x01\x00\x02\x13onpointerlockchange\x01\x02\x04this\x05value\x17set_onpointerlockchange\x01\x00\x00\x00)__wbg_onpointerlockerror_444eea770ff3a345\x00\x00\x00\x01\x08Document\x01\x00\x01\x12onpointerlockerror\x01\x01\x04this\x12onpointerlockerror\x01\x00\x00\x00,__wbg_setonpointerlockerror_0054f3e4b6a6acae\x00\x00\x00\x01\x08Document\x01\x00\x02\x12onpointerlockerror\x01\x02\x04this\x05value\x16set_onpointerlockerror\x01\x00\x00\x00\x1d__wbg_hidden_674e2eee45ee273a\x00\x00\x00\x01\x08Document\x01\x00\x01\x06hidden\x01\x01\x04this\x06hidden\x01\x00\x00\x00&__wbg_visibilityState_d3acfeb0c8a390e0\x00\x00\x00\x01\x08Document\x01\x00\x01\x0fvisibilityState\x01\x01\x04this\x0fvisibilityState\x01\x00\x00\x00)__wbg_onvisibilitychange_6a76a02b98ee1d19\x00\x00\x00\x01\x08Document\x01\x00\x01\x12onvisibilitychange\x01\x01\x04this\x12onvisibilitychange\x01\x00\x00\x00,__wbg_setonvisibilitychange_237f3742fa658f8f\x00\x00\x00\x01\x08Document\x01\x00\x02\x12onvisibilitychange\x01\x02\x04this\x05value\x16set_onvisibilitychange\x01\x00\x00\x00,__wbg_selectedStyleSheetSet_fbd750ee35736e9e\x00\x00\x00\x01\x08Document\x01\x00\x01\x15selectedStyleSheetSet\x01\x01\x04this\x15selectedStyleSheetSet\x01\x00\x00\x00/__wbg_setselectedStyleSheetSet_ea48e0d5d543267b\x00\x00\x00\x01\x08Document\x01\x00\x02\x15selectedStyleSheetSet\x01\x02\x04this\x05value\x19set_selectedStyleSheetSet\x01\x00\x00\x00(__wbg_lastStyleSheetSet_f655bf8117fd368b\x00\x00\x00\x01\x08Document\x01\x00\x01\x11lastStyleSheetSet\x01\x01\x04this\x11lastStyleSheetSet\x01\x00\x00\x00-__wbg_preferredStyleSheetSet_428f9df4a18545d6\x00\x00\x00\x01\x08Document\x01\x00\x01\x16preferredStyleSheetSet\x01\x01\x04this\x16preferredStyleSheetSet\x01\x00\x00\x00%__wbg_styleSheetSets_4306d33e683a2985\x00\x00\x00\x01\x08Document\x01\x00\x01\x0estyleSheetSets\x01\x01\x04this\x0estyleSheetSets\x01\x00\x00\x00\'__wbg_scrollingElement_d5f7561ef3770104\x00\x00\x00\x01\x08Document\x01\x00\x01\x10scrollingElement\x01\x01\x04this\x10scrollingElement\x01\x00\x00\x00\x1f__wbg_timeline_a078d5d6b166e91c\x00\x00\x00\x01\x08Document\x01\x00\x01\x08timeline\x01\x01\x04this\x08timeline\x01\x00\x00\x00\"__wbg_rootElement_1242dc299b6ec69c\x00\x00\x00\x01\x08Document\x01\x00\x01\x0brootElement\x01\x01\x04this\x0brootElement\x01\x00\x00\x00\x1d__wbg_oncopy_37d15161bcff9892\x00\x00\x00\x01\x08Document\x01\x00\x01\x06oncopy\x01\x01\x04this\x06oncopy\x01\x00\x00\x00 __wbg_setoncopy_e5c8f8c56b1b4f1a\x00\x00\x00\x01\x08Document\x01\x00\x02\x06oncopy\x01\x02\x04this\x05value\nset_oncopy\x01\x00\x00\x00\x1c__wbg_oncut_5d551c9aed518a8c\x00\x00\x00\x01\x08Document\x01\x00\x01\x05oncut\x01\x01\x04this\x05oncut\x01\x00\x00\x00\x1f__wbg_setoncut_ab7917714d0db9a9\x00\x00\x00\x01\x08Document\x01\x00\x02\x05oncut\x01\x02\x04this\x05value\tset_oncut\x01\x00\x00\x00\x1e__wbg_onpaste_3a2cb8da7bc5fb1d\x00\x00\x00\x01\x08Document\x01\x00\x01\x07onpaste\x01\x01\x04this\x07onpaste\x01\x00\x00\x00!__wbg_setonpaste_4f157b4bc8b45799\x00\x00\x00\x01\x08Document\x01\x00\x02\x07onpaste\x01\x02\x04this\x05value\x0bset_onpaste\x01\x00\x00\x00$__wbg_activeElement_be2f4f67d6a3c80b\x00\x00\x00\x01\x08Document\x01\x00\x01\ractiveElement\x01\x01\x04this\ractiveElement\x01\x00\x00\x00\"__wbg_styleSheets_e8dad2e8f36db1bb\x00\x00\x00\x01\x08Document\x01\x00\x01\x0bstyleSheets\x01\x01\x04this\x0bstyleSheets\x01\x00\x00\x00)__wbg_pointerLockElement_a475aa10af255459\x00\x00\x00\x01\x08Document\x01\x00\x01\x12pointerLockElement\x01\x01\x04this\x12pointerLockElement\x01\x00\x00\x00(__wbg_fullscreenElement_449980d04fa17948\x00\x00\x00\x01\x08Document\x01\x00\x01\x11fullscreenElement\x01\x01\x04this\x11fullscreenElement\x01\x00\x00\x00\x1c__wbg_fonts_d367efc4f328afe6\x00\x00\x00\x01\x08Document\x01\x00\x01\x05fonts\x01\x01\x04this\x05fonts\x01\x00\x00\x00\x1e__wbg_onabort_4509f16fba7f3c10\x00\x00\x00\x01\x08Document\x01\x00\x01\x07onabort\x01\x01\x04this\x07onabort\x01\x00\x00\x00!__wbg_setonabort_4d3a50651c7bbc31\x00\x00\x00\x01\x08Document\x01\x00\x02\x07onabort\x01\x02\x04this\x05value\x0bset_onabort\x01\x00\x00\x00\x1d__wbg_onblur_3aa1ddbd8b6938a6\x00\x00\x00\x01\x08Document\x01\x00\x01\x06onblur\x01\x01\x04this\x06onblur\x01\x00\x00\x00 __wbg_setonblur_ab8f030dfc56d5c8\x00\x00\x00\x01\x08Document\x01\x00\x02\x06onblur\x01\x02\x04this\x05value\nset_onblur\x01\x00\x00\x00\x1e__wbg_onfocus_ece2cbea3ce61a9d\x00\x00\x00\x01\x08Document\x01\x00\x01\x07onfocus\x01\x01\x04this\x07onfocus\x01\x00\x00\x00!__wbg_setonfocus_c810ce2923fece8d\x00\x00\x00\x01\x08Document\x01\x00\x02\x07onfocus\x01\x02\x04this\x05value\x0bset_onfocus\x01\x00\x00\x00!__wbg_onauxclick_8b30ed97f248b657\x00\x00\x00\x01\x08Document\x01\x00\x01\nonauxclick\x01\x01\x04this\nonauxclick\x01\x00\x00\x00$__wbg_setonauxclick_7b9aff9ec85ea913\x00\x00\x00\x01\x08Document\x01\x00\x02\nonauxclick\x01\x02\x04this\x05value\x0eset_onauxclick\x01\x00\x00\x00 __wbg_oncanplay_c1efc248ccffcff2\x00\x00\x00\x01\x08Document\x01\x00\x01\toncanplay\x01\x01\x04this\toncanplay\x01\x00\x00\x00#__wbg_setoncanplay_93c34696b017cd61\x00\x00\x00\x01\x08Document\x01\x00\x02\toncanplay\x01\x02\x04this\x05value\rset_oncanplay\x01\x00\x00\x00\'__wbg_oncanplaythrough_1694e0771a0efc97\x00\x00\x00\x01\x08Document\x01\x00\x01\x10oncanplaythrough\x01\x01\x04this\x10oncanplaythrough\x01\x00\x00\x00*__wbg_setoncanplaythrough_d14d8eccaffc3c65\x00\x00\x00\x01\x08Document\x01\x00\x02\x10oncanplaythrough\x01\x02\x04this\x05value\x14set_oncanplaythrough\x01\x00\x00\x00\x1f__wbg_onchange_b8ddddc446ff2ed3\x00\x00\x00\x01\x08Document\x01\x00\x01\x08onchange\x01\x01\x04this\x08onchange\x01\x00\x00\x00\"__wbg_setonchange_289a0b294c182d89\x00\x00\x00\x01\x08Document\x01\x00\x02\x08onchange\x01\x02\x04this\x05value\x0cset_onchange\x01\x00\x00\x00\x1e__wbg_onclick_2c783ad813394270\x00\x00\x00\x01\x08Document\x01\x00\x01\x07onclick\x01\x01\x04this\x07onclick\x01\x00\x00\x00!__wbg_setonclick_35361480f55e7c5d\x00\x00\x00\x01\x08Document\x01\x00\x02\x07onclick\x01\x02\x04this\x05value\x0bset_onclick\x01\x00\x00\x00\x1e__wbg_onclose_d9f928e74d573f83\x00\x00\x00\x01\x08Document\x01\x00\x01\x07onclose\x01\x01\x04this\x07onclose\x01\x00\x00\x00!__wbg_setonclose_5a006e57d8b7ddd5\x00\x00\x00\x01\x08Document\x01\x00\x02\x07onclose\x01\x02\x04this\x05value\x0bset_onclose\x01\x00\x00\x00$__wbg_oncontextmenu_d9ba75b68c37f35b\x00\x00\x00\x01\x08Document\x01\x00\x01\roncontextmenu\x01\x01\x04this\roncontextmenu\x01\x00\x00\x00\'__wbg_setoncontextmenu_ebc55f3df7a3144a\x00\x00\x00\x01\x08Document\x01\x00\x02\roncontextmenu\x01\x02\x04this\x05value\x11set_oncontextmenu\x01\x00\x00\x00!__wbg_ondblclick_10ea2d217ae95438\x00\x00\x00\x01\x08Document\x01\x00\x01\nondblclick\x01\x01\x04this\nondblclick\x01\x00\x00\x00$__wbg_setondblclick_d2c610f34d02e7aa\x00\x00\x00\x01\x08Document\x01\x00\x02\nondblclick\x01\x02\x04this\x05value\x0eset_ondblclick\x01\x00\x00\x00\x1d__wbg_ondrag_b05112b4950b1012\x00\x00\x00\x01\x08Document\x01\x00\x01\x06ondrag\x01\x01\x04this\x06ondrag\x01\x00\x00\x00 __wbg_setondrag_4a0181bfcb5e693b\x00\x00\x00\x01\x08Document\x01\x00\x02\x06ondrag\x01\x02\x04this\x05value\nset_ondrag\x01\x00\x00\x00 __wbg_ondragend_aadd96f36f651e62\x00\x00\x00\x01\x08Document\x01\x00\x01\tondragend\x01\x01\x04this\tondragend\x01\x00\x00\x00#__wbg_setondragend_dd3cba2a1aa53922\x00\x00\x00\x01\x08Document\x01\x00\x02\tondragend\x01\x02\x04this\x05value\rset_ondragend\x01\x00\x00\x00\"__wbg_ondragenter_f36e11a63752ac97\x00\x00\x00\x01\x08Document\x01\x00\x01\x0bondragenter\x01\x01\x04this\x0bondragenter\x01\x00\x00\x00%__wbg_setondragenter_458d2a09c5a5f797\x00\x00\x00\x01\x08Document\x01\x00\x02\x0bondragenter\x01\x02\x04this\x05value\x0fset_ondragenter\x01\x00\x00\x00!__wbg_ondragexit_a5699aa9f9478217\x00\x00\x00\x01\x08Document\x01\x00\x01\nondragexit\x01\x01\x04this\nondragexit\x01\x00\x00\x00$__wbg_setondragexit_459fc646aff70a8d\x00\x00\x00\x01\x08Document\x01\x00\x02\nondragexit\x01\x02\x04this\x05value\x0eset_ondragexit\x01\x00\x00\x00\"__wbg_ondragleave_34976a79e508bf38\x00\x00\x00\x01\x08Document\x01\x00\x01\x0bondragleave\x01\x01\x04this\x0bondragleave\x01\x00\x00\x00%__wbg_setondragleave_fc8c6243400f90a8\x00\x00\x00\x01\x08Document\x01\x00\x02\x0bondragleave\x01\x02\x04this\x05value\x0fset_ondragleave\x01\x00\x00\x00!__wbg_ondragover_d41110d861f31e0b\x00\x00\x00\x01\x08Document\x01\x00\x01\nondragover\x01\x01\x04this\nondragover\x01\x00\x00\x00$__wbg_setondragover_3effe16f202b5e96\x00\x00\x00\x01\x08Document\x01\x00\x02\nondragover\x01\x02\x04this\x05value\x0eset_ondragover\x01\x00\x00\x00\"__wbg_ondragstart_32e2d78848246631\x00\x00\x00\x01\x08Document\x01\x00\x01\x0bondragstart\x01\x01\x04this\x0bondragstart\x01\x00\x00\x00%__wbg_setondragstart_def5946b6f6a0dc2\x00\x00\x00\x01\x08Document\x01\x00\x02\x0bondragstart\x01\x02\x04this\x05value\x0fset_ondragstart\x01\x00\x00\x00\x1d__wbg_ondrop_a985d5317b7f3289\x00\x00\x00\x01\x08Document\x01\x00\x01\x06ondrop\x01\x01\x04this\x06ondrop\x01\x00\x00\x00 __wbg_setondrop_7e3bc4f1e09ce3ed\x00\x00\x00\x01\x08Document\x01\x00\x02\x06ondrop\x01\x02\x04this\x05value\nset_ondrop\x01\x00\x00\x00\'__wbg_ondurationchange_83e37abd85ef4a05\x00\x00\x00\x01\x08Document\x01\x00\x01\x10ondurationchange\x01\x01\x04this\x10ondurationchange\x01\x00\x00\x00*__wbg_setondurationchange_446b34b1d2a2baf2\x00\x00\x00\x01\x08Document\x01\x00\x02\x10ondurationchange\x01\x02\x04this\x05value\x14set_ondurationchange\x01\x00\x00\x00 __wbg_onemptied_f6eee5d579c026e3\x00\x00\x00\x01\x08Document\x01\x00\x01\tonemptied\x01\x01\x04this\tonemptied\x01\x00\x00\x00#__wbg_setonemptied_92af1af82617d5d7\x00\x00\x00\x01\x08Document\x01\x00\x02\tonemptied\x01\x02\x04this\x05value\rset_onemptied\x01\x00\x00\x00\x1e__wbg_onended_1c5a3f92294f3344\x00\x00\x00\x01\x08Document\x01\x00\x01\x07onended\x01\x01\x04this\x07onended\x01\x00\x00\x00!__wbg_setonended_059d0ea7d61a0941\x00\x00\x00\x01\x08Document\x01\x00\x02\x07onended\x01\x02\x04this\x05value\x0bset_onended\x01\x00\x00\x00\x1e__wbg_oninput_ec46d844e4bc87c4\x00\x00\x00\x01\x08Document\x01\x00\x01\x07oninput\x01\x01\x04this\x07oninput\x01\x00\x00\x00!__wbg_setoninput_8bfa18dd20f2b55b\x00\x00\x00\x01\x08Document\x01\x00\x02\x07oninput\x01\x02\x04this\x05value\x0bset_oninput\x01\x00\x00\x00 __wbg_oninvalid_671772ffad76a6d6\x00\x00\x00\x01\x08Document\x01\x00\x01\toninvalid\x01\x01\x04this\toninvalid\x01\x00\x00\x00#__wbg_setoninvalid_ebcd2651f1ad3037\x00\x00\x00\x01\x08Document\x01\x00\x02\toninvalid\x01\x02\x04this\x05value\rset_oninvalid\x01\x00\x00\x00 __wbg_onkeydown_a5438bf76ea3f5e1\x00\x00\x00\x01\x08Document\x01\x00\x01\tonkeydown\x01\x01\x04this\tonkeydown\x01\x00\x00\x00#__wbg_setonkeydown_769adee85fb8210b\x00\x00\x00\x01\x08Document\x01\x00\x02\tonkeydown\x01\x02\x04this\x05value\rset_onkeydown\x01\x00\x00\x00!__wbg_onkeypress_b8a81a7aad86e605\x00\x00\x00\x01\x08Document\x01\x00\x01\nonkeypress\x01\x01\x04this\nonkeypress\x01\x00\x00\x00$__wbg_setonkeypress_83ea3dcac1c8a693\x00\x00\x00\x01\x08Document\x01\x00\x02\nonkeypress\x01\x02\x04this\x05value\x0eset_onkeypress\x01\x00\x00\x00\x1e__wbg_onkeyup_243e51b36dd35963\x00\x00\x00\x01\x08Document\x01\x00\x01\x07onkeyup\x01\x01\x04this\x07onkeyup\x01\x00\x00\x00!__wbg_setonkeyup_329fd70241654fa0\x00\x00\x00\x01\x08Document\x01\x00\x02\x07onkeyup\x01\x02\x04this\x05value\x0bset_onkeyup\x01\x00\x00\x00\x1d__wbg_onload_076b97514055e1d6\x00\x00\x00\x01\x08Document\x01\x00\x01\x06onload\x01\x01\x04this\x06onload\x01\x00\x00\x00 __wbg_setonload_cb80174f65fa00ef\x00\x00\x00\x01\x08Document\x01\x00\x02\x06onload\x01\x02\x04this\x05value\nset_onload\x01\x00\x00\x00#__wbg_onloadeddata_ccd10a37e7d78806\x00\x00\x00\x01\x08Document\x01\x00\x01\x0conloadeddata\x01\x01\x04this\x0conloadeddata\x01\x00\x00\x00&__wbg_setonloadeddata_ecce3c0376eca4cc\x00\x00\x00\x01\x08Document\x01\x00\x02\x0conloadeddata\x01\x02\x04this\x05value\x10set_onloadeddata\x01\x00\x00\x00\'__wbg_onloadedmetadata_dcd24b46318295e6\x00\x00\x00\x01\x08Document\x01\x00\x01\x10onloadedmetadata\x01\x01\x04this\x10onloadedmetadata\x01\x00\x00\x00*__wbg_setonloadedmetadata_2c4dca9a8a462407\x00\x00\x00\x01\x08Document\x01\x00\x02\x10onloadedmetadata\x01\x02\x04this\x05value\x14set_onloadedmetadata\x01\x00\x00\x00 __wbg_onloadend_15b92acbd8773491\x00\x00\x00\x01\x08Document\x01\x00\x01\tonloadend\x01\x01\x04this\tonloadend\x01\x00\x00\x00#__wbg_setonloadend_7cb3d4b5b1d482a0\x00\x00\x00\x01\x08Document\x01\x00\x02\tonloadend\x01\x02\x04this\x05value\rset_onloadend\x01\x00\x00\x00\"__wbg_onloadstart_0c14addbcb9a8fe5\x00\x00\x00\x01\x08Document\x01\x00\x01\x0bonloadstart\x01\x01\x04this\x0bonloadstart\x01\x00\x00\x00%__wbg_setonloadstart_895cd51b0d78b0f7\x00\x00\x00\x01\x08Document\x01\x00\x02\x0bonloadstart\x01\x02\x04this\x05value\x0fset_onloadstart\x01\x00\x00\x00\"__wbg_onmousedown_0b9723c5c173914b\x00\x00\x00\x01\x08Document\x01\x00\x01\x0bonmousedown\x01\x01\x04this\x0bonmousedown\x01\x00\x00\x00%__wbg_setonmousedown_fb34177a9f98f066\x00\x00\x00\x01\x08Document\x01\x00\x02\x0bonmousedown\x01\x02\x04this\x05value\x0fset_onmousedown\x01\x00\x00\x00#__wbg_onmouseenter_22ea801b28a5885f\x00\x00\x00\x01\x08Document\x01\x00\x01\x0conmouseenter\x01\x01\x04this\x0conmouseenter\x01\x00\x00\x00&__wbg_setonmouseenter_ba684da4b11639dd\x00\x00\x00\x01\x08Document\x01\x00\x02\x0conmouseenter\x01\x02\x04this\x05value\x10set_onmouseenter\x01\x00\x00\x00#__wbg_onmouseleave_a11bc28a5bd2c53e\x00\x00\x00\x01\x08Document\x01\x00\x01\x0conmouseleave\x01\x01\x04this\x0conmouseleave\x01\x00\x00\x00&__wbg_setonmouseleave_10eb830711d0f6fe\x00\x00\x00\x01\x08Document\x01\x00\x02\x0conmouseleave\x01\x02\x04this\x05value\x10set_onmouseleave\x01\x00\x00\x00\"__wbg_onmousemove_5cd887c3907035a1\x00\x00\x00\x01\x08Document\x01\x00\x01\x0bonmousemove\x01\x01\x04this\x0bonmousemove\x01\x00\x00\x00%__wbg_setonmousemove_9e9532b4c42d06f9\x00\x00\x00\x01\x08Document\x01\x00\x02\x0bonmousemove\x01\x02\x04this\x05value\x0fset_onmousemove\x01\x00\x00\x00!__wbg_onmouseout_ecf4dc9a6334a853\x00\x00\x00\x01\x08Document\x01\x00\x01\nonmouseout\x01\x01\x04this\nonmouseout\x01\x00\x00\x00$__wbg_setonmouseout_69fe06000f49c345\x00\x00\x00\x01\x08Document\x01\x00\x02\nonmouseout\x01\x02\x04this\x05value\x0eset_onmouseout\x01\x00\x00\x00\"__wbg_onmouseover_51cfbfd2210aa73e\x00\x00\x00\x01\x08Document\x01\x00\x01\x0bonmouseover\x01\x01\x04this\x0bonmouseover\x01\x00\x00\x00%__wbg_setonmouseover_53f21a6e4dd18edb\x00\x00\x00\x01\x08Document\x01\x00\x02\x0bonmouseover\x01\x02\x04this\x05value\x0fset_onmouseover\x01\x00\x00\x00 __wbg_onmouseup_5208f13e4d7e0ec7\x00\x00\x00\x01\x08Document\x01\x00\x01\tonmouseup\x01\x01\x04this\tonmouseup\x01\x00\x00\x00#__wbg_setonmouseup_dc9a2e9ecd2be4b7\x00\x00\x00\x01\x08Document\x01\x00\x02\tonmouseup\x01\x02\x04this\x05value\rset_onmouseup\x01\x00\x00\x00\x1e__wbg_onwheel_d691db8b6d34faf2\x00\x00\x00\x01\x08Document\x01\x00\x01\x07onwheel\x01\x01\x04this\x07onwheel\x01\x00\x00\x00!__wbg_setonwheel_f124b92091014563\x00\x00\x00\x01\x08Document\x01\x00\x02\x07onwheel\x01\x02\x04this\x05value\x0bset_onwheel\x01\x00\x00\x00\x1e__wbg_onpause_ac06e8283b78061c\x00\x00\x00\x01\x08Document\x01\x00\x01\x07onpause\x01\x01\x04this\x07onpause\x01\x00\x00\x00!__wbg_setonpause_78af57a7f27c7def\x00\x00\x00\x01\x08Document\x01\x00\x02\x07onpause\x01\x02\x04this\x05value\x0bset_onpause\x01\x00\x00\x00\x1d__wbg_onplay_724e539c6fb2341e\x00\x00\x00\x01\x08Document\x01\x00\x01\x06onplay\x01\x01\x04this\x06onplay\x01\x00\x00\x00 __wbg_setonplay_02334ea4164a350b\x00\x00\x00\x01\x08Document\x01\x00\x02\x06onplay\x01\x02\x04this\x05value\nset_onplay\x01\x00\x00\x00 __wbg_onplaying_ef726250124d3815\x00\x00\x00\x01\x08Document\x01\x00\x01\tonplaying\x01\x01\x04this\tonplaying\x01\x00\x00\x00#__wbg_setonplaying_2b4ecb726470db23\x00\x00\x00\x01\x08Document\x01\x00\x02\tonplaying\x01\x02\x04this\x05value\rset_onplaying\x01\x00\x00\x00!__wbg_onprogress_324a6bece5351da5\x00\x00\x00\x01\x08Document\x01\x00\x01\nonprogress\x01\x01\x04this\nonprogress\x01\x00\x00\x00$__wbg_setonprogress_bacb81601b4593b8\x00\x00\x00\x01\x08Document\x01\x00\x02\nonprogress\x01\x02\x04this\x05value\x0eset_onprogress\x01\x00\x00\x00#__wbg_onratechange_285257642274323e\x00\x00\x00\x01\x08Document\x01\x00\x01\x0conratechange\x01\x01\x04this\x0conratechange\x01\x00\x00\x00&__wbg_setonratechange_8fd7a7292caa3996\x00\x00\x00\x01\x08Document\x01\x00\x02\x0conratechange\x01\x02\x04this\x05value\x10set_onratechange\x01\x00\x00\x00\x1e__wbg_onreset_ddd147a52c276635\x00\x00\x00\x01\x08Document\x01\x00\x01\x07onreset\x01\x01\x04this\x07onreset\x01\x00\x00\x00!__wbg_setonreset_b502cb4edba46705\x00\x00\x00\x01\x08Document\x01\x00\x02\x07onreset\x01\x02\x04this\x05value\x0bset_onreset\x01\x00\x00\x00\x1f__wbg_onresize_8aba3e9aa5d1c6fa\x00\x00\x00\x01\x08Document\x01\x00\x01\x08onresize\x01\x01\x04this\x08onresize\x01\x00\x00\x00\"__wbg_setonresize_898c77a11b10561d\x00\x00\x00\x01\x08Document\x01\x00\x02\x08onresize\x01\x02\x04this\x05value\x0cset_onresize\x01\x00\x00\x00\x1f__wbg_onscroll_185309cc5c63e248\x00\x00\x00\x01\x08Document\x01\x00\x01\x08onscroll\x01\x01\x04this\x08onscroll\x01\x00\x00\x00\"__wbg_setonscroll_6c7953b2a5998599\x00\x00\x00\x01\x08Document\x01\x00\x02\x08onscroll\x01\x02\x04this\x05value\x0cset_onscroll\x01\x00\x00\x00\x1f__wbg_onseeked_e311913b103c214d\x00\x00\x00\x01\x08Document\x01\x00\x01\x08onseeked\x01\x01\x04this\x08onseeked\x01\x00\x00\x00\"__wbg_setonseeked_ddad48657c137d44\x00\x00\x00\x01\x08Document\x01\x00\x02\x08onseeked\x01\x02\x04this\x05value\x0cset_onseeked\x01\x00\x00\x00 __wbg_onseeking_315a543d7a96ef33\x00\x00\x00\x01\x08Document\x01\x00\x01\tonseeking\x01\x01\x04this\tonseeking\x01\x00\x00\x00#__wbg_setonseeking_0a1b6e8137f257d9\x00\x00\x00\x01\x08Document\x01\x00\x02\tonseeking\x01\x02\x04this\x05value\rset_onseeking\x01\x00\x00\x00\x1f__wbg_onselect_bcb615e8a805d05a\x00\x00\x00\x01\x08Document\x01\x00\x01\x08onselect\x01\x01\x04this\x08onselect\x01\x00\x00\x00\"__wbg_setonselect_b49d131ab1e612e6\x00\x00\x00\x01\x08Document\x01\x00\x02\x08onselect\x01\x02\x04this\x05value\x0cset_onselect\x01\x00\x00\x00\x1d__wbg_onshow_be99ac7c1a5c7f32\x00\x00\x00\x01\x08Document\x01\x00\x01\x06onshow\x01\x01\x04this\x06onshow\x01\x00\x00\x00 __wbg_setonshow_7212aaf86cb158a2\x00\x00\x00\x01\x08Document\x01\x00\x02\x06onshow\x01\x02\x04this\x05value\nset_onshow\x01\x00\x00\x00 __wbg_onstalled_f3107756526e6571\x00\x00\x00\x01\x08Document\x01\x00\x01\tonstalled\x01\x01\x04this\tonstalled\x01\x00\x00\x00#__wbg_setonstalled_3240eae6e3db70d4\x00\x00\x00\x01\x08Document\x01\x00\x02\tonstalled\x01\x02\x04this\x05value\rset_onstalled\x01\x00\x00\x00\x1f__wbg_onsubmit_91bdff267aa3439c\x00\x00\x00\x01\x08Document\x01\x00\x01\x08onsubmit\x01\x01\x04this\x08onsubmit\x01\x00\x00\x00\"__wbg_setonsubmit_e7d8157b2c53567b\x00\x00\x00\x01\x08Document\x01\x00\x02\x08onsubmit\x01\x02\x04this\x05value\x0cset_onsubmit\x01\x00\x00\x00 __wbg_onsuspend_6d2865020703afee\x00\x00\x00\x01\x08Document\x01\x00\x01\tonsuspend\x01\x01\x04this\tonsuspend\x01\x00\x00\x00#__wbg_setonsuspend_c8f6b8d98aee9599\x00\x00\x00\x01\x08Document\x01\x00\x02\tonsuspend\x01\x02\x04this\x05value\rset_onsuspend\x01\x00\x00\x00#__wbg_ontimeupdate_f457744a78d0800e\x00\x00\x00\x01\x08Document\x01\x00\x01\x0contimeupdate\x01\x01\x04this\x0contimeupdate\x01\x00\x00\x00&__wbg_setontimeupdate_f55a5198050af8a4\x00\x00\x00\x01\x08Document\x01\x00\x02\x0contimeupdate\x01\x02\x04this\x05value\x10set_ontimeupdate\x01\x00\x00\x00%__wbg_onvolumechange_0a1f718cd3a6d1f2\x00\x00\x00\x01\x08Document\x01\x00\x01\x0eonvolumechange\x01\x01\x04this\x0eonvolumechange\x01\x00\x00\x00(__wbg_setonvolumechange_1f45b8701e5d02a9\x00\x00\x00\x01\x08Document\x01\x00\x02\x0eonvolumechange\x01\x02\x04this\x05value\x12set_onvolumechange\x01\x00\x00\x00 __wbg_onwaiting_e10015ef1d72d5fc\x00\x00\x00\x01\x08Document\x01\x00\x01\tonwaiting\x01\x01\x04this\tonwaiting\x01\x00\x00\x00#__wbg_setonwaiting_f443087f5e109a70\x00\x00\x00\x01\x08Document\x01\x00\x02\tonwaiting\x01\x02\x04this\x05value\rset_onwaiting\x01\x00\x00\x00$__wbg_onselectstart_2ece4d23a7e517d2\x00\x00\x00\x01\x08Document\x01\x00\x01\ronselectstart\x01\x01\x04this\ronselectstart\x01\x00\x00\x00\'__wbg_setonselectstart_50939b2b2cab261e\x00\x00\x00\x01\x08Document\x01\x00\x02\ronselectstart\x01\x02\x04this\x05value\x11set_onselectstart\x01\x00\x00\x00\x1f__wbg_ontoggle_8e9a84aaab5338d4\x00\x00\x00\x01\x08Document\x01\x00\x01\x08ontoggle\x01\x01\x04this\x08ontoggle\x01\x00\x00\x00\"__wbg_setontoggle_6bb6206c33bada1e\x00\x00\x00\x01\x08Document\x01\x00\x02\x08ontoggle\x01\x02\x04this\x05value\x0cset_ontoggle\x01\x00\x00\x00&__wbg_onpointercancel_f202076a7e7e3f80\x00\x00\x00\x01\x08Document\x01\x00\x01\x0fonpointercancel\x01\x01\x04this\x0fonpointercancel\x01\x00\x00\x00)__wbg_setonpointercancel_d6abac3b861833e6\x00\x00\x00\x01\x08Document\x01\x00\x02\x0fonpointercancel\x01\x02\x04this\x05value\x13set_onpointercancel\x01\x00\x00\x00$__wbg_onpointerdown_a9169c6985002542\x00\x00\x00\x01\x08Document\x01\x00\x01\ronpointerdown\x01\x01\x04this\ronpointerdown\x01\x00\x00\x00\'__wbg_setonpointerdown_075dc16e666448aa\x00\x00\x00\x01\x08Document\x01\x00\x02\ronpointerdown\x01\x02\x04this\x05value\x11set_onpointerdown\x01\x00\x00\x00\"__wbg_onpointerup_9b9a45fbc29533a2\x00\x00\x00\x01\x08Document\x01\x00\x01\x0bonpointerup\x01\x01\x04this\x0bonpointerup\x01\x00\x00\x00%__wbg_setonpointerup_d1fcd03bc6d4d3f7\x00\x00\x00\x01\x08Document\x01\x00\x02\x0bonpointerup\x01\x02\x04this\x05value\x0fset_onpointerup\x01\x00\x00\x00$__wbg_onpointermove_37dd9b8eb4c40a4b\x00\x00\x00\x01\x08Document\x01\x00\x01\ronpointermove\x01\x01\x04this\ronpointermove\x01\x00\x00\x00\'__wbg_setonpointermove_28c557c6507ae2c0\x00\x00\x00\x01\x08Document\x01\x00\x02\ronpointermove\x01\x02\x04this\x05value\x11set_onpointermove\x01\x00\x00\x00#__wbg_onpointerout_5011d140498cf7c3\x00\x00\x00\x01\x08Document\x01\x00\x01\x0conpointerout\x01\x01\x04this\x0conpointerout\x01\x00\x00\x00&__wbg_setonpointerout_8998b563d6878930\x00\x00\x00\x01\x08Document\x01\x00\x02\x0conpointerout\x01\x02\x04this\x05value\x10set_onpointerout\x01\x00\x00\x00$__wbg_onpointerover_318361c853b75874\x00\x00\x00\x01\x08Document\x01\x00\x01\ronpointerover\x01\x01\x04this\ronpointerover\x01\x00\x00\x00\'__wbg_setonpointerover_8daebc96ac025233\x00\x00\x00\x01\x08Document\x01\x00\x02\ronpointerover\x01\x02\x04this\x05value\x11set_onpointerover\x01\x00\x00\x00%__wbg_onpointerenter_8e0e7a98732b0a5e\x00\x00\x00\x01\x08Document\x01\x00\x01\x0eonpointerenter\x01\x01\x04this\x0eonpointerenter\x01\x00\x00\x00(__wbg_setonpointerenter_5d5156cbc1e92719\x00\x00\x00\x01\x08Document\x01\x00\x02\x0eonpointerenter\x01\x02\x04this\x05value\x12set_onpointerenter\x01\x00\x00\x00%__wbg_onpointerleave_17515905f58ab154\x00\x00\x00\x01\x08Document\x01\x00\x01\x0eonpointerleave\x01\x01\x04this\x0eonpointerleave\x01\x00\x00\x00(__wbg_setonpointerleave_ab04a8584d3a53d8\x00\x00\x00\x01\x08Document\x01\x00\x02\x0eonpointerleave\x01\x02\x04this\x05value\x12set_onpointerleave\x01\x00\x00\x00*__wbg_ongotpointercapture_6aac3a951b2fc263\x00\x00\x00\x01\x08Document\x01\x00\x01\x13ongotpointercapture\x01\x01\x04this\x13ongotpointercapture\x01\x00\x00\x00-__wbg_setongotpointercapture_33a4b980293e4662\x00\x00\x00\x01\x08Document\x01\x00\x02\x13ongotpointercapture\x01\x02\x04this\x05value\x17set_ongotpointercapture\x01\x00\x00\x00+__wbg_onlostpointercapture_ab91669d7afb46de\x00\x00\x00\x01\x08Document\x01\x00\x01\x14onlostpointercapture\x01\x01\x04this\x14onlostpointercapture\x01\x00\x00\x00.__wbg_setonlostpointercapture_8775f1530d12cd5d\x00\x00\x00\x01\x08Document\x01\x00\x02\x14onlostpointercapture\x01\x02\x04this\x05value\x18set_onlostpointercapture\x01\x00\x00\x00(__wbg_onanimationcancel_b8924538890bc2d5\x00\x00\x00\x01\x08Document\x01\x00\x01\x11onanimationcancel\x01\x01\x04this\x11onanimationcancel\x01\x00\x00\x00+__wbg_setonanimationcancel_3124cdc343877640\x00\x00\x00\x01\x08Document\x01\x00\x02\x11onanimationcancel\x01\x02\x04this\x05value\x15set_onanimationcancel\x01\x00\x00\x00%__wbg_onanimationend_591df18b3171985b\x00\x00\x00\x01\x08Document\x01\x00\x01\x0eonanimationend\x01\x01\x04this\x0eonanimationend\x01\x00\x00\x00(__wbg_setonanimationend_a1bc83c528167656\x00\x00\x00\x01\x08Document\x01\x00\x02\x0eonanimationend\x01\x02\x04this\x05value\x12set_onanimationend\x01\x00\x00\x00+__wbg_onanimationiteration_442d52fc39fbf38f\x00\x00\x00\x01\x08Document\x01\x00\x01\x14onanimationiteration\x01\x01\x04this\x14onanimationiteration\x01\x00\x00\x00.__wbg_setonanimationiteration_211552237dbf9123\x00\x00\x00\x01\x08Document\x01\x00\x02\x14onanimationiteration\x01\x02\x04this\x05value\x18set_onanimationiteration\x01\x00\x00\x00\'__wbg_onanimationstart_e1d648acc6bff76d\x00\x00\x00\x01\x08Document\x01\x00\x01\x10onanimationstart\x01\x01\x04this\x10onanimationstart\x01\x00\x00\x00*__wbg_setonanimationstart_b183c56c278245d6\x00\x00\x00\x01\x08Document\x01\x00\x02\x10onanimationstart\x01\x02\x04this\x05value\x14set_onanimationstart\x01\x00\x00\x00)__wbg_ontransitioncancel_6178a3d56b52a2ff\x00\x00\x00\x01\x08Document\x01\x00\x01\x12ontransitioncancel\x01\x01\x04this\x12ontransitioncancel\x01\x00\x00\x00,__wbg_setontransitioncancel_f028dcf20dfa7b18\x00\x00\x00\x01\x08Document\x01\x00\x02\x12ontransitioncancel\x01\x02\x04this\x05value\x16set_ontransitioncancel\x01\x00\x00\x00&__wbg_ontransitionend_99207494d3de603d\x00\x00\x00\x01\x08Document\x01\x00\x01\x0fontransitionend\x01\x01\x04this\x0fontransitionend\x01\x00\x00\x00)__wbg_setontransitionend_d711cd58ed693650\x00\x00\x00\x01\x08Document\x01\x00\x02\x0fontransitionend\x01\x02\x04this\x05value\x13set_ontransitionend\x01\x00\x00\x00&__wbg_ontransitionrun_61cf6fbb8d592780\x00\x00\x00\x01\x08Document\x01\x00\x01\x0fontransitionrun\x01\x01\x04this\x0fontransitionrun\x01\x00\x00\x00)__wbg_setontransitionrun_bbf51e449014198d\x00\x00\x00\x01\x08Document\x01\x00\x02\x0fontransitionrun\x01\x02\x04this\x05value\x13set_ontransitionrun\x01\x00\x00\x00(__wbg_ontransitionstart_7f3fe9a62e74418c\x00\x00\x00\x01\x08Document\x01\x00\x01\x11ontransitionstart\x01\x01\x04this\x11ontransitionstart\x01\x00\x00\x00+__wbg_setontransitionstart_651c51cb5e253705\x00\x00\x00\x01\x08Document\x01\x00\x02\x11ontransitionstart\x01\x02\x04this\x05value\x15set_ontransitionstart\x01\x00\x00\x00+__wbg_onwebkitanimationend_0baf9ab9e1bcbd4a\x00\x00\x00\x01\x08Document\x01\x00\x01\x14onwebkitanimationend\x01\x01\x04this\x14onwebkitanimationend\x01\x00\x00\x00.__wbg_setonwebkitanimationend_28282caa64375408\x00\x00\x00\x01\x08Document\x01\x00\x02\x14onwebkitanimationend\x01\x02\x04this\x05value\x18set_onwebkitanimationend\x01\x00\x00\x001__wbg_onwebkitanimationiteration_7c16c47b585fa23d\x00\x00\x00\x01\x08Document\x01\x00\x01\x1aonwebkitanimationiteration\x01\x01\x04this\x1aonwebkitanimationiteration\x01\x00\x00\x004__wbg_setonwebkitanimationiteration_350865667347807b\x00\x00\x00\x01\x08Document\x01\x00\x02\x1aonwebkitanimationiteration\x01\x02\x04this\x05value\x1eset_onwebkitanimationiteration\x01\x00\x00\x00-__wbg_onwebkitanimationstart_32572395d9eb592c\x00\x00\x00\x01\x08Document\x01\x00\x01\x16onwebkitanimationstart\x01\x01\x04this\x16onwebkitanimationstart\x01\x00\x00\x000__wbg_setonwebkitanimationstart_f3f3164f18ffa8b8\x00\x00\x00\x01\x08Document\x01\x00\x02\x16onwebkitanimationstart\x01\x02\x04this\x05value\x1aset_onwebkitanimationstart\x01\x00\x00\x00,__wbg_onwebkittransitionend_bbc664c459af1eea\x00\x00\x00\x01\x08Document\x01\x00\x01\x15onwebkittransitionend\x01\x01\x04this\x15onwebkittransitionend\x01\x00\x00\x00/__wbg_setonwebkittransitionend_4d549efe24438237\x00\x00\x00\x01\x08Document\x01\x00\x02\x15onwebkittransitionend\x01\x02\x04this\x05value\x19set_onwebkittransitionend\x01\x00\x00\x00\x1e__wbg_onerror_7f2569374364bbea\x00\x00\x00\x01\x08Document\x01\x00\x01\x07onerror\x01\x01\x04this\x07onerror\x01\x00\x00\x00!__wbg_setonerror_f3771c2a52c8e41f\x00\x00\x00\x01\x08Document\x01\x00\x02\x07onerror\x01\x02\x04this\x05value\x0bset_onerror\x01\x00\x00\x00\x1f__wbg_children_a9b15bb1fca82824\x00\x00\x00\x01\x08Document\x01\x00\x01\x08children\x01\x01\x04this\x08children\x01\x00\x00\x00(__wbg_firstElementChild_208c0d013b82c08e\x00\x00\x00\x01\x08Document\x01\x00\x01\x11firstElementChild\x01\x01\x04this\x11firstElementChild\x01\x00\x00\x00\'__wbg_lastElementChild_ff22ebe26cfc2645\x00\x00\x00\x01\x08Document\x01\x00\x01\x10lastElementChild\x01\x01\x04this\x10lastElementChild\x01\x00\x00\x00(__wbg_childElementCount_65f366449924d919\x00\x00\x00\x01\x08Document\x01\x00\x01\x11childElementCount\x01\x01\x04this\x11childElementCount\x01\x00\x00\x00#__wbg_ontouchstart_78684de9453ebf1d\x00\x00\x00\x01\x08Document\x01\x00\x01\x0contouchstart\x01\x01\x04this\x0contouchstart\x01\x00\x00\x00&__wbg_setontouchstart_938bfe93c807af71\x00\x00\x00\x01\x08Document\x01\x00\x02\x0contouchstart\x01\x02\x04this\x05value\x10set_ontouchstart\x01\x00\x00\x00!__wbg_ontouchend_601e8a9c08402e96\x00\x00\x00\x01\x08Document\x01\x00\x01\nontouchend\x01\x01\x04this\nontouchend\x01\x00\x00\x00$__wbg_setontouchend_64bcab24b7901211\x00\x00\x00\x01\x08Document\x01\x00\x02\nontouchend\x01\x02\x04this\x05value\x0eset_ontouchend\x01\x00\x00\x00\"__wbg_ontouchmove_cb98ea28199d6c98\x00\x00\x00\x01\x08Document\x01\x00\x01\x0bontouchmove\x01\x01\x04this\x0bontouchmove\x01\x00\x00\x00%__wbg_setontouchmove_ebbf141dbd293aea\x00\x00\x00\x01\x08Document\x01\x00\x02\x0bontouchmove\x01\x02\x04this\x05value\x0fset_ontouchmove\x01\x00\x00\x00$__wbg_ontouchcancel_00df5c98fb5302e5\x00\x00\x00\x01\x08Document\x01\x00\x01\rontouchcancel\x01\x01\x04this\rontouchcancel\x01\x00\x00\x00\'__wbg_setontouchcancel_011e6025a6e4c061\x00\x00\x00\x01\x08Document\x01\x00\x02\rontouchcancel\x01\x02\x04this\x05value\x11set_ontouchcancel\x01\x00\x00\x00\x1a__wbg_new_fede784bbaaa0efc\x01\x00\x00\x01\x08Document\x00\x01\x00\x03new\x01\x00\x00\x00 __wbg_adoptNode_675a5805da9506c1\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x04node\tadoptNode\x01\x00\x00\x00-__wbg_caretPositionFromPoint_6993a7c37af8fde6\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x01x\x01y\x16caretPositionFromPoint\x01\x00\x00\x00&__wbg_createAttribute_a6bd9849dbb50244\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x04name\x0fcreateAttribute\x01\x00\x00\x00(__wbg_createAttributeNS_f347fae163e3eb5f\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\tnamespace\x04name\x11createAttributeNS\x01\x00\x00\x00)__wbg_createCDATASection_a2abb75c81b25fac\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x04data\x12createCDATASection\x01\x00\x00\x00$__wbg_createComment_60806dab1c5fb403\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x04data\rcreateComment\x01\x00\x00\x00-__wbg_createDocumentFragment_ed9f9698557dfbcc\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x01\x04this\x16createDocumentFragment\x01\x00\x00\x00$__wbg_createElement_5bdf88a5af9f17c5\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\nlocal_name\rcreateElement\x01\x00\x00\x00$__wbg_createElement_274a768fc80e63a4\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\nlocal_name\x07options\rcreateElement\x01\x00\x00\x00$__wbg_createElement_c537958a4e0d7c9d\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\nlocal_name\x07options\rcreateElement\x01\x00\x00\x00&__wbg_createElementNS_ea14cb45a87a0719\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\tnamespace\x0equalified_name\x0fcreateElementNS\x01\x00\x00\x00&__wbg_createElementNS_bffd27cb837f79ca\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\tnamespace\x0equalified_name\x07options\x0fcreateElementNS\x01\x00\x00\x00&__wbg_createElementNS_13a080f1b1e0a9b5\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\tnamespace\x0equalified_name\x07options\x0fcreateElementNS\x01\x00\x00\x00\"__wbg_createEvent_c250edff0a0a6ef3\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\tinterface\x0bcreateEvent\x01\x00\x00\x00)__wbg_createNodeIterator_652815c9e322e1b0\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x04root\x12createNodeIterator\x01\x00\x00\x00)__wbg_createNodeIterator_77862cacd30b9ef1\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x04root\x0cwhat_to_show\x12createNodeIterator\x01\x00\x00\x00)__wbg_createNodeIterator_04e3b071c7a22756\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x04root\x0cwhat_to_show\x06filter\x12createNodeIterator\x01\x00\x00\x002__wbg_createProcessingInstruction_1c374a95033c07db\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x06target\x04data\x1bcreateProcessingInstruction\x01\x00\x00\x00\"__wbg_createRange_0538a7602d7cc7aa\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x01\x04this\x0bcreateRange\x01\x00\x00\x00%__wbg_createTextNode_b3c9e3cb02f83ab5\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x04data\x0ecreateTextNode\x01\x00\x00\x00\'__wbg_createTreeWalker_c71eb439d1f0d520\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x04root\x10createTreeWalker\x01\x00\x00\x00\'__wbg_createTreeWalker_8a4d2326a969db7d\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x04root\x0cwhat_to_show\x10createTreeWalker\x01\x00\x00\x00\'__wbg_createTreeWalker_a6e40f61f8215114\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x04root\x0cwhat_to_show\x06filter\x10createTreeWalker\x01\x00\x00\x00.__wbg_enableStyleSheetsForSet_04b0708dfefea0ab\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x04name\x17enableStyleSheetsForSet\x01\x00\x00\x00%__wbg_exitFullscreen_cbab2d88768d31dc\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x01\x04this\x0eexitFullscreen\x01\x00\x00\x00&__wbg_exitPointerLock_8208c9bc6180e105\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x01\x04this\x0fexitPointerLock\x01\x00\x00\x00$__wbg_getAnimations_754c00f923510420\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x01\x04this\rgetAnimations\x01\x00\x00\x00%__wbg_getElementById_0cb6ad9511b1efc0\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\nelement_id\x0egetElementById\x01\x00\x00\x00-__wbg_getElementsByClassName_de38b280ba469c93\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x0bclass_names\x16getElementsByClassName\x01\x00\x00\x00(__wbg_getElementsByName_4f6809db69967eb4\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x0celement_name\x11getElementsByName\x01\x00\x00\x00+__wbg_getElementsByTagName_77f1dbac1705c087\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\nlocal_name\x14getElementsByTagName\x01\x00\x00\x00-__wbg_getElementsByTagNameNS_be34f7574de3c88a\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\tnamespace\nlocal_name\x16getElementsByTagNameNS\x01\x00\x00\x00#__wbg_getSelection_fb3d4237c242db9a\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x01\x04this\x0cgetSelection\x01\x00\x00\x00\x1f__wbg_hasFocus_1fcb663f9c532947\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x01\x04this\x08hasFocus\x01\x00\x00\x00!__wbg_importNode_eb760a52e9ec588c\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x04node\nimportNode\x01\x00\x00\x00!__wbg_importNode_b564776b3f672fa7\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x04node\x04deep\nimportNode\x01\x00\x00\x00$__wbg_querySelector_69fd5cd784bcc892\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\tselectors\rquerySelector\x01\x00\x00\x00\'__wbg_querySelectorAll_850b3b8e12223951\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\tselectors\x10querySelectorAll\x01\x00\x00\x00%__wbg_releaseCapture_e431bc6e6b0e0b63\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x01\x04this\x0ereleaseCapture\x01\x00\x00\x00\'__wbg_elementFromPoint_6a578f7e3be13bde\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x01x\x01y\x10elementFromPoint\x01\x00\x00\x00(__wbg_elementsFromPoint_db385c1429ebd133\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x01x\x01y\x11elementsFromPoint\x01\x00\x00\x00+__wbg_convertPointFromNode_275cee96af556805\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x05point\x04from\x14convertPointFromNode\x01\x00\x00\x00+__wbg_convertPointFromNode_775e4cc12ecf7630\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x05point\x04from\x14convertPointFromNode\x01\x00\x00\x00+__wbg_convertPointFromNode_ddde07558031226d\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x05point\x04from\x14convertPointFromNode\x01\x00\x00\x00+__wbg_convertPointFromNode_0fe9077911de7f75\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x05point\x04from\x07options\x14convertPointFromNode\x01\x00\x00\x00+__wbg_convertPointFromNode_ce2f4bcbffb5f43a\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x05point\x04from\x07options\x14convertPointFromNode\x01\x00\x00\x00+__wbg_convertPointFromNode_c9aba1c25778426e\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x05point\x04from\x07options\x14convertPointFromNode\x01\x00\x00\x00*__wbg_convertQuadFromNode_7811dd103b6ee880\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x04quad\x04from\x13convertQuadFromNode\x01\x00\x00\x00*__wbg_convertQuadFromNode_42afec8db938243a\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x04quad\x04from\x13convertQuadFromNode\x01\x00\x00\x00*__wbg_convertQuadFromNode_a8d7c609d29e41c5\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x04quad\x04from\x13convertQuadFromNode\x01\x00\x00\x00*__wbg_convertQuadFromNode_ee95d62509a02f07\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x04quad\x04from\x07options\x13convertQuadFromNode\x01\x00\x00\x00*__wbg_convertQuadFromNode_4ebe069885093d73\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x04quad\x04from\x07options\x13convertQuadFromNode\x01\x00\x00\x00*__wbg_convertQuadFromNode_3d7ebd1e2e7abb82\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x04quad\x04from\x07options\x13convertQuadFromNode\x01\x00\x00\x00*__wbg_convertRectFromNode_7c3d297e30b2527c\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x04rect\x04from\x13convertRectFromNode\x01\x00\x00\x00*__wbg_convertRectFromNode_b6460bd1e43989a2\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x04rect\x04from\x13convertRectFromNode\x01\x00\x00\x00*__wbg_convertRectFromNode_ba888151002a64e5\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x04rect\x04from\x13convertRectFromNode\x01\x00\x00\x00*__wbg_convertRectFromNode_4f044d1329de3e28\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x04rect\x04from\x07options\x13convertRectFromNode\x01\x00\x00\x00*__wbg_convertRectFromNode_717b06909dc0b7de\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x04rect\x04from\x07options\x13convertRectFromNode\x01\x00\x00\x00*__wbg_convertRectFromNode_a83aa7b159433611\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x04rect\x04from\x07options\x13convertRectFromNode\x01\x00\x00\x00\"__wbg_getBoxQuads_65e97864ca9ee5f8\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x01\x04this\x0bgetBoxQuads\x01\x00\x00\x00\"__wbg_getBoxQuads_2203b391d6aacae4\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x07options\x0bgetBoxQuads\x01\x00\x00\x00\x1d__wbg_append_a8476a7a0ecf2b6b\x01\x01\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x05nodes\x06append\x01\x00\x00\x00\x1d__wbg_append_6bd584a12a83da64\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x01\x04this\x06append\x01\x00\x00\x00\x1d__wbg_append_ec4fa7a02af10b55\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x07nodes_1\x06append\x01\x00\x00\x00\x1d__wbg_append_b4fdce37cd7e71ee\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x06append\x01\x00\x00\x00\x1d__wbg_append_c6bad1d44e023af6\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x06append\x01\x00\x00\x00\x1d__wbg_append_d2d0c503b75082a5\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x06append\x01\x00\x00\x00\x1d__wbg_append_ce93481701fbe9f9\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x06append\x01\x00\x00\x00\x1d__wbg_append_159c409c1c47f939\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x06append\x01\x00\x00\x00\x1d__wbg_append_9597fb08cf59d3fe\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x06append\x01\x00\x00\x00\x1d__wbg_append_f4995e1ae3947543\x01\x01\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x05nodes\x06append\x01\x00\x00\x00\x1d__wbg_append_18eeec154ca17955\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x01\x04this\x06append\x01\x00\x00\x00\x1d__wbg_append_5b7dc2005b0c31e5\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x07nodes_1\x06append\x01\x00\x00\x00\x1d__wbg_append_5d6bfbad09749937\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x06append\x01\x00\x00\x00\x1d__wbg_append_459c67446ddf9c68\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x06append\x01\x00\x00\x00\x1d__wbg_append_7ea9e18856099ff6\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x06append\x01\x00\x00\x00\x1d__wbg_append_e758744239f945f8\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x06append\x01\x00\x00\x00\x1d__wbg_append_57f3df30bc615b4d\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x06append\x01\x00\x00\x00\x1d__wbg_append_3bcb727a48039a06\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x06append\x01\x00\x00\x00\x1e__wbg_prepend_adab93beae2f1050\x01\x01\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x05nodes\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_41d9252366a021d3\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x01\x04this\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_7dacf6e8e6fbf4a5\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x07nodes_1\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_dd777ae8c9305c47\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_c1fdbd147f8dc9a9\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_f612acc535915ec9\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_737f4697b03debf1\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_9a21d4755a56f874\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_a89b5842f4981655\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_ac2aff74ddfb31e0\x01\x01\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x05nodes\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_5b739bf7f45a9340\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x01\x04this\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_c1ec20c79f845577\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\x07nodes_1\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_d23cb0aa9e93f77c\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_537426ddf11c32c6\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_9d505a8e84cf3323\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_94b185959f3fde3f\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_40c8d371615fc1b5\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_3aaee26df36bd9c1\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x07prepend\x01\x00\x00\x00\'__wbg_createExpression_c2f0ede344755260\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\nexpression\x10createExpression\x01\x00\x00\x00\'__wbg_createExpression_304d080d0b972a34\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\nexpression\x08resolver\x10createExpression\x01\x00\x00\x00\'__wbg_createExpression_b07dda05e4a0b57b\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\nexpression\x08resolver\x10createExpression\x01\x00\x00\x00\'__wbg_createNSResolver_711e56f2fd7b9c9e\x00\x00\x00\x01\x08Document\x01\x00\x00\x01\x02\x04this\rnode_resolver\x10createNSResolver\x01\x00\x00\x00\x1f__wbg_evaluate_d7ea9a83f20c447a\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x03\x04this\nexpression\x0ccontext_node\x08evaluate\x01\x00\x00\x00\x1f__wbg_evaluate_5f8e74b93a29c33b\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\nexpression\x0ccontext_node\x08resolver\x08evaluate\x01\x00\x00\x00\x1f__wbg_evaluate_8e7c43fc352285ca\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x04\x04this\nexpression\x0ccontext_node\x08resolver\x08evaluate\x01\x00\x00\x00\x1f__wbg_evaluate_081401390c550858\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x05\x04this\nexpression\x0ccontext_node\x08resolver\x05type_\x08evaluate\x01\x00\x00\x00\x1f__wbg_evaluate_006067586ad480df\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x05\x04this\nexpression\x0ccontext_node\x08resolver\x05type_\x08evaluate\x01\x00\x00\x00\x1f__wbg_evaluate_19e8d2bfabf473c5\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x06\x04this\nexpression\x0ccontext_node\x08resolver\x05type_\x06result\x08evaluate\x01\x00\x00\x00\x1f__wbg_evaluate_3135dac3defa315e\x01\x00\x00\x01\x08Document\x01\x00\x00\x01\x06\x04this\nexpression\x0ccontext_node\x08resolver\x05type_\x06result\x08evaluate\x01\x00\x00\x00\x00\x18web-sys-2ffcad8c6dc62865\x00"
        };
    }
    #[cfg(feature = "Document")]
    pub use gen_Document::*;
    #[cfg(feature = "Element")]
    #[allow(non_snake_case)]
    mod gen_Element {
        #![allow(unused_imports)]
        use super::*;
        use wasm_bindgen::prelude::*;
        #[allow(bad_style)]
        ///The `Element` class.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        ///
        #[repr(transparent)]
        #[allow(clippy::all)]
        pub struct Element {
            obj: Node,
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::fmt::Debug for Element {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    Element {
                        obj: ref __self_0_0,
                    } => {
                        let mut debug_trait_builder = f.debug_struct("Element");
                        let _ = debug_trait_builder.field("obj", &&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::clone::Clone for Element {
            #[inline]
            fn clone(&self) -> Element {
                match *self {
                    Element {
                        obj: ref __self_0_0,
                    } => Element {
                        obj: ::core::clone::Clone::clone(&(*__self_0_0)),
                    },
                }
            }
        }

        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::PartialEq for Element {
            #[inline]
            fn eq(&self, other: &Element) -> bool {
                match *other {
                    Element {
                        obj: ref __self_1_0,
                    } => match *self {
                        Element {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) == (*__self_1_0),
                    },
                }
            }
            #[inline]
            fn ne(&self, other: &Element) -> bool {
                match *other {
                    Element {
                        obj: ref __self_1_0,
                    } => match *self {
                        Element {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) != (*__self_1_0),
                    },
                }
            }
        }

        #[allow(bad_style)]
        #[allow(clippy::all)]
        const __wbg_generated_const_Element: () = {
            use wasm_bindgen::__rt::core;
            use wasm_bindgen::convert::RefFromWasmAbi;
            use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
            use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
            use wasm_bindgen::describe::WasmDescribe;
            use wasm_bindgen::{JsCast, JsValue};
            impl WasmDescribe for Element {
                fn describe() {
                    use wasm_bindgen::describe::*;
                    inform(NAMED_EXTERNREF);
                    inform(7u32);
                    inform(69u32);
                    inform(108u32);
                    inform(101u32);
                    inform(109u32);
                    inform(101u32);
                    inform(110u32);
                    inform(116u32);
                }
            }
            impl core::ops::Deref for Element {
                type Target = Node;
                #[inline]
                fn deref(&self) -> &Node {
                    &self.obj
                }
            }
            impl IntoWasmAbi for Element {
                type Abi = <JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    self.obj.into_abi()
                }
            }
            impl OptionIntoWasmAbi for Element {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl<'a> OptionIntoWasmAbi for &'a Element {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl FromWasmAbi for Element {
                type Abi = <JsValue as FromWasmAbi>::Abi;
                #[inline]
                unsafe fn from_abi(js: Self::Abi) -> Self {
                    Element {
                        obj: JsValue::from_abi(js).into(),
                    }
                }
            }
            impl OptionFromWasmAbi for Element {
                #[inline]
                fn is_none(abi: &Self::Abi) -> bool {
                    *abi == 0
                }
            }
            impl<'a> IntoWasmAbi for &'a Element {
                type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    (&self.obj).into_abi()
                }
            }
            impl RefFromWasmAbi for Element {
                type Abi = <JsValue as RefFromWasmAbi>::Abi;
                type Anchor = core::mem::ManuallyDrop<Element>;
                #[inline]
                unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
                    let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
                    core::mem::ManuallyDrop::new(Element {
                        obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
                    })
                }
            }
            impl From<JsValue> for Element {
                #[inline]
                fn from(obj: JsValue) -> Element {
                    Element { obj: obj.into() }
                }
            }
            impl AsRef<JsValue> for Element {
                #[inline]
                fn as_ref(&self) -> &JsValue {
                    self.obj.as_ref()
                }
            }
            impl AsRef<Element> for Element {
                #[inline]
                fn as_ref(&self) -> &Element {
                    self
                }
            }
            impl From<Element> for JsValue {
                #[inline]
                fn from(obj: Element) -> JsValue {
                    obj.obj.into()
                }
            }
            impl JsCast for Element {
                fn instanceof(val: &JsValue) -> bool {
                    #[link(wasm_import_module = "__wbindgen_placeholder__")]
                    #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                    extern "C" {
                        fn __wbg_instanceof_Element_fa1f2e86d1bc5f26(val: u32) -> u32;
                    }
                    unsafe {
                        let idx = val.into_abi();
                        __wbg_instanceof_Element_fa1f2e86d1bc5f26(idx) != 0
                    }
                }
                #[inline]
                fn unchecked_from_js(val: JsValue) -> Self {
                    Element { obj: val.into() }
                }
                #[inline]
                fn unchecked_from_js_ref(val: &JsValue) -> &Self {
                    unsafe { &*(val as *const JsValue as *const Element) }
                }
            }
            ()
        };
        #[allow(clippy::all)]
        impl From<Element> for Node {
            #[inline]
            fn from(obj: Element) -> Node {
                use wasm_bindgen::JsCast;
                Node::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<Node> for Element {
            #[inline]
            fn as_ref(&self) -> &Node {
                use wasm_bindgen::JsCast;
                Node::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<Element> for EventTarget {
            #[inline]
            fn from(obj: Element) -> EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<EventTarget> for Element {
            #[inline]
            fn as_ref(&self) -> &EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<Element> for ::js_sys::Object {
            #[inline]
            fn from(obj: Element) -> ::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<::js_sys::Object> for Element {
            #[inline]
            fn as_ref(&self) -> &::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js_ref(self.as_ref())
            }
        }
        ///Getter for the `namespaceURI` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_namespaceURI_a4d52538ca0c6bae() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `namespaceURI` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn namespace_uri(&self) -> Option<String> {
                ///Getter for the `namespaceURI` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_namespaceURI_a4d52538ca0c6bae(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_namespaceURI_a4d52538ca0c6bae(this)
                    };
                    <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `prefix` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prefix_b74ad6f9100a97c5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `prefix` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prefix(&self) -> Option<String> {
                ///Getter for the `prefix` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prefix_b74ad6f9100a97c5(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_prefix_b74ad6f9100a97c5(this)
                    };
                    <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `localName` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/localName)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_localName_d4716707bc9737b0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `localName` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/localName)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn local_name(&self) -> String {
                ///Getter for the `localName` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/localName)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_localName_d4716707bc9737b0(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_localName_d4716707bc9737b0(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `tagName` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_tagName_6513794923bf4962() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `tagName` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn tag_name(&self) -> String {
                ///Getter for the `tagName` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_tagName_6513794923bf4962(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_tagName_6513794923bf4962(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `id` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/id)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_id_e4583aceb9badade() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `id` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/id)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn id(&self) -> String {
                ///Getter for the `id` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/id)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_id_e4583aceb9badade(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_id_e4583aceb9badade(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `id` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/id)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setid_7bffc7f165147751() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///Setter for the `id` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/id)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_id(&self, value: &str) {
                ///Setter for the `id` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/id)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setid_7bffc7f165147751(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setid_7bffc7f165147751(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `className` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_className_07bb6355b5b00459() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `className` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn class_name(&self) -> String {
                ///Getter for the `className` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_className_07bb6355b5b00459(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_className_07bb6355b5b00459(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `className` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setclassName_dfd1832d72e3b25a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///Setter for the `className` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_class_name(&self, value: &str) {
                ///Setter for the `className` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/className)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setclassName_dfd1832d72e3b25a(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setclassName_dfd1832d72e3b25a(this, value)
                    };
                    ()
                }
            }
        }
        impl Element {}
        impl Element {}
        ///Getter for the `scrollTop` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollTop_f4b58b242d2f7a2d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `scrollTop` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_top(&self) -> i32 {
                ///Getter for the `scrollTop` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollTop_f4b58b242d2f7a2d(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scrollTop_f4b58b242d2f7a2d(this)
                    };
                    <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `scrollTop` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setscrollTop_db018344c981a335() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///Setter for the `scrollTop` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_scroll_top(&self, value: i32) {
                ///Setter for the `scrollTop` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setscrollTop_db018344c981a335(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setscrollTop_db018344c981a335(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `scrollLeft` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollLeft_52acbfb4a2fb3ce5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `scrollLeft` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_left(&self) -> i32 {
                ///Getter for the `scrollLeft` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollLeft_52acbfb4a2fb3ce5(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scrollLeft_52acbfb4a2fb3ce5(this)
                    };
                    <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `scrollLeft` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setscrollLeft_b0270fca179a1c31() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///Setter for the `scrollLeft` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_scroll_left(&self, value: i32) {
                ///Setter for the `scrollLeft` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setscrollLeft_b0270fca179a1c31(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setscrollLeft_b0270fca179a1c31(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `scrollWidth` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollWidth_6a5b2e5c2473e134() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `scrollWidth` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_width(&self) -> i32 {
                ///Getter for the `scrollWidth` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollWidth_6a5b2e5c2473e134(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scrollWidth_6a5b2e5c2473e134(this)
                    };
                    <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `scrollHeight` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollHeight_d9552ece28a2a959() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `scrollHeight` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_height(&self) -> i32 {
                ///Getter for the `scrollHeight` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollHeight_d9552ece28a2a959(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scrollHeight_d9552ece28a2a959(this)
                    };
                    <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `clientTop` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_clientTop_790ce01c04065aa6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `clientTop` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn client_top(&self) -> i32 {
                ///Getter for the `clientTop` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_clientTop_790ce01c04065aa6(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_clientTop_790ce01c04065aa6(this)
                    };
                    <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `clientLeft` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_clientLeft_bd80b0d52eac1b27() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `clientLeft` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn client_left(&self) -> i32 {
                ///Getter for the `clientLeft` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_clientLeft_bd80b0d52eac1b27(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_clientLeft_bd80b0d52eac1b27(this)
                    };
                    <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `clientWidth` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_clientWidth_857377e072b59b4b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `clientWidth` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn client_width(&self) -> i32 {
                ///Getter for the `clientWidth` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_clientWidth_857377e072b59b4b(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_clientWidth_857377e072b59b4b(this)
                    };
                    <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `clientHeight` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_clientHeight_daa13ddd5bd5136d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `clientHeight` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn client_height(&self) -> i32 {
                ///Getter for the `clientHeight` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_clientHeight_daa13ddd5bd5136d(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_clientHeight_daa13ddd5bd5136d(this)
                    };
                    <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `innerHTML` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_innerHTML_cd6045f48cf556c3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `innerHTML` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn inner_html(&self) -> String {
                ///Getter for the `innerHTML` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_innerHTML_cd6045f48cf556c3(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_innerHTML_cd6045f48cf556c3(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `innerHTML` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setinnerHTML_4ff235db1a3cb4d8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///Setter for the `innerHTML` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_inner_html(&self, value: &str) {
                ///Setter for the `innerHTML` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setinnerHTML_4ff235db1a3cb4d8(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setinnerHTML_4ff235db1a3cb4d8(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `outerHTML` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_outerHTML_146ed50ea7b173f5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `outerHTML` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn outer_html(&self) -> String {
                ///Getter for the `outerHTML` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_outerHTML_146ed50ea7b173f5(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_outerHTML_146ed50ea7b173f5(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `outerHTML` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setouterHTML_cdfd3d4eb57f8a41() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///Setter for the `outerHTML` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_outer_html(&self, value: &str) {
                ///Setter for the `outerHTML` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setouterHTML_cdfd3d4eb57f8a41(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setouterHTML_cdfd3d4eb57f8a41(this, value)
                    };
                    ()
                }
            }
        }
        impl Element {}
        impl Element {}
        ///Getter for the `slot` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/slot)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_slot_150e7c2e43d67113() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `slot` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/slot)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn slot(&self) -> String {
                ///Getter for the `slot` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/slot)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_slot_150e7c2e43d67113(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_slot_150e7c2e43d67113(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `slot` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/slot)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setslot_556c251dbe9072d1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///Setter for the `slot` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/slot)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_slot(&self, value: &str) {
                ///Setter for the `slot` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/slot)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setslot_556c251dbe9072d1(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setslot_556c251dbe9072d1(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `previousElementSibling` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/previousElementSibling)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_previousElementSibling_c563bd845a6b83c4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `previousElementSibling` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/previousElementSibling)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn previous_element_sibling(&self) -> Option<Element> {
                ///Getter for the `previousElementSibling` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/previousElementSibling)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_previousElementSibling_c563bd845a6b83c4(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_previousElementSibling_c563bd845a6b83c4(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `nextElementSibling` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/nextElementSibling)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_nextElementSibling_0fb824df2518e129() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `nextElementSibling` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/nextElementSibling)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn next_element_sibling(&self) -> Option<Element> {
                ///Getter for the `nextElementSibling` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/nextElementSibling)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_nextElementSibling_0fb824df2518e129(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_nextElementSibling_0fb824df2518e129(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Element {}
        ///Getter for the `firstElementChild` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/firstElementChild)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_firstElementChild_f5d9e8fe9a5510b7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `firstElementChild` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/firstElementChild)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn first_element_child(&self) -> Option<Element> {
                ///Getter for the `firstElementChild` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/firstElementChild)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_firstElementChild_f5d9e8fe9a5510b7(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_firstElementChild_f5d9e8fe9a5510b7(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `lastElementChild` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/lastElementChild)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lastElementChild_82782015d9d3ca7c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `lastElementChild` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/lastElementChild)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn last_element_child(&self) -> Option<Element> {
                ///Getter for the `lastElementChild` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/lastElementChild)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lastElementChild_82782015d9d3ca7c(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_lastElementChild_82782015d9d3ca7c(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `childElementCount` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/childElementCount)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_childElementCount_7937160c7ca38a19() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <u32 as WasmDescribe>::describe();
        }
        impl Element {
            ///Getter for the `childElementCount` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/childElementCount)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn child_element_count(&self) -> u32 {
                ///Getter for the `childElementCount` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/childElementCount)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_childElementCount_7937160c7ca38a19(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_childElementCount_7937160c7ca38a19(this)
                    };
                    <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Element {}
        ///The `closest()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_closest_5a57be82755ccd47() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Element {
            ///The `closest()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn closest(&self, selector: &str) -> Result<Option<Element>, JsValue> {
                ///The `closest()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/closest)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_closest_5a57be82755ccd47(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        selector: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let selector =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(selector);
                        __wbg_closest_5a57be82755ccd47(this, selector)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `getAttribute()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_getAttribute_ecbed0bd44a3467a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Element {
            ///The `getAttribute()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn get_attribute(&self, name: &str) -> Option<String> {
                ///The `getAttribute()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttribute)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_getAttribute_ecbed0bd44a3467a(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                        __wbg_getAttribute_ecbed0bd44a3467a(this, name)
                    };
                    <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `getAttributeNS()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_getAttributeNS_6a361a526afb119e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <Option<&str> as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Element {
            ///The `getAttributeNS()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn get_attribute_ns(
                &self,
                namespace: Option<&str>,
                local_name: &str,
            ) -> Option<String> {
                ///The `getAttributeNS()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_getAttributeNS_6a361a526afb119e(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let namespace =
                            <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                namespace,
                            );
                        let local_name =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(local_name);
                        __wbg_getAttributeNS_6a361a526afb119e(this, namespace, local_name)
                    };
                    <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `getAttributeNames()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_getAttributeNames_0aa52c16b346b81e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <::js_sys::Array as WasmDescribe>::describe();
        }
        impl Element {
            ///The `getAttributeNames()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn get_attribute_names(&self) -> ::js_sys::Array {
                ///The `getAttributeNames()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_getAttributeNames_0aa52c16b346b81e(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_getAttributeNames_0aa52c16b346b81e(this)
                    };
                    <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        ///The `hasAttribute()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_hasAttribute_22c9d1c60b61d157() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Element {
            ///The `hasAttribute()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn has_attribute(&self, name: &str) -> bool {
                ///The `hasAttribute()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_hasAttribute_22c9d1c60b61d157(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                        __wbg_hasAttribute_22c9d1c60b61d157(this, name)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `hasAttributeNS()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_hasAttributeNS_96fc205ae365c77d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <Option<&str> as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Element {
            ///The `hasAttributeNS()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn has_attribute_ns(&self, namespace: Option<&str>, local_name: &str) -> bool {
                ///The `hasAttributeNS()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_hasAttributeNS_96fc205ae365c77d(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let namespace =
                            <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                namespace,
                            );
                        let local_name =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(local_name);
                        __wbg_hasAttributeNS_96fc205ae365c77d(this, namespace, local_name)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `hasAttributes()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_hasAttributes_6dfeae07db5bb362() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Element {
            ///The `hasAttributes()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn has_attributes(&self) -> bool {
                ///The `hasAttributes()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_hasAttributes_6dfeae07db5bb362(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_hasAttributes_6dfeae07db5bb362(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `hasPointerCapture()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasPointerCapture)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_hasPointerCapture_e626ac27ee554d80() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Element {
            ///The `hasPointerCapture()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasPointerCapture)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn has_pointer_capture(&self, pointer_id: i32) -> bool {
                ///The `hasPointerCapture()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/hasPointerCapture)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_hasPointerCapture_e626ac27ee554d80(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        pointer_id: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let pointer_id =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pointer_id);
                        __wbg_hasPointerCapture_e626ac27ee554d80(this, pointer_id)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `insertAdjacentElement()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_insertAdjacentElement_977bba9106df5b76() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&Element as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Element {
            ///The `insertAdjacentElement()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn insert_adjacent_element(
                &self,
                where_: &str,
                element: &Element,
            ) -> Result<Option<Element>, JsValue> {
                ///The `insertAdjacentElement()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_insertAdjacentElement_977bba9106df5b76(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        where_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        element: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let where_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(where_);
                        let element =
                            <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(element);
                        __wbg_insertAdjacentElement_977bba9106df5b76(this, where_, element)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `insertAdjacentHTML()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_insertAdjacentHTML_f5b88401066717f4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `insertAdjacentHTML()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn insert_adjacent_html(&self, position: &str, text: &str) -> Result<(), JsValue> {
                ///The `insertAdjacentHTML()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_insertAdjacentHTML_f5b88401066717f4(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        position: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        text: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let position =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(position);
                        let text = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(text);
                        __wbg_insertAdjacentHTML_f5b88401066717f4(this, position, text)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `insertAdjacentText()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_insertAdjacentText_e06264cd2050dbd5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `insertAdjacentText()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn insert_adjacent_text(&self, where_: &str, data: &str) -> Result<(), JsValue> {
                ///The `insertAdjacentText()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_insertAdjacentText_e06264cd2050dbd5(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        where_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let where_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(where_);
                        let data = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(data);
                        __wbg_insertAdjacentText_e06264cd2050dbd5(this, where_, data)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `matches()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_matches_ae3b3bc8dc7ea0f8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Element {
            ///The `matches()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn matches(&self, selector: &str) -> Result<bool, JsValue> {
                ///The `matches()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/matches)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_matches_ae3b3bc8dc7ea0f8(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        selector: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let selector =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(selector);
                        __wbg_matches_ae3b3bc8dc7ea0f8(this, selector)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `querySelector()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_querySelector_cb87c7b52f337f99() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Element {
            ///The `querySelector()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn query_selector(&self, selectors: &str) -> Result<Option<Element>, JsValue> {
                ///The `querySelector()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_querySelector_cb87c7b52f337f99(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        selectors: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let selectors =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(selectors);
                        __wbg_querySelector_cb87c7b52f337f99(this, selectors)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl Element {}
        ///The `releaseCapture()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/releaseCapture)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_releaseCapture_ac7ce18cb8019c4d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `releaseCapture()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/releaseCapture)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn release_capture(&self) {
                ///The `releaseCapture()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/releaseCapture)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_releaseCapture_ac7ce18cb8019c4d(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_releaseCapture_ac7ce18cb8019c4d(this)
                    };
                    ()
                }
            }
        }
        ///The `releasePointerCapture()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_releasePointerCapture_27065a107bb695b8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `releasePointerCapture()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn release_pointer_capture(&self, pointer_id: i32) -> Result<(), JsValue> {
                ///The `releasePointerCapture()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_releasePointerCapture_27065a107bb695b8(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        pointer_id: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let pointer_id =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pointer_id);
                        __wbg_releasePointerCapture_27065a107bb695b8(this, pointer_id)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `removeAttribute()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_removeAttribute_a705c6de4bb158c4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `removeAttribute()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn remove_attribute(&self, name: &str) -> Result<(), JsValue> {
                ///The `removeAttribute()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_removeAttribute_a705c6de4bb158c4(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                        __wbg_removeAttribute_a705c6de4bb158c4(this, name)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `removeAttributeNS()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_removeAttributeNS_22454e97630590c5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <Option<&str> as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `removeAttributeNS()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn remove_attribute_ns(
                &self,
                namespace: Option<&str>,
                local_name: &str,
            ) -> Result<(), JsValue> {
                ///The `removeAttributeNS()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_removeAttributeNS_22454e97630590c5(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        local_name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let namespace =
                            <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                namespace,
                            );
                        let local_name =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(local_name);
                        __wbg_removeAttributeNS_22454e97630590c5(this, namespace, local_name)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl Element {}
        ///The `requestFullscreen()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_requestFullscreen_7c9e8be46f97059a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `requestFullscreen()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn request_fullscreen(&self) -> Result<(), JsValue> {
                ///The `requestFullscreen()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullscreen)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_requestFullscreen_7c9e8be46f97059a(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_requestFullscreen_7c9e8be46f97059a(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `requestPointerLock()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestPointerLock)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_requestPointerLock_b7b7b484a39c776f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `requestPointerLock()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestPointerLock)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn request_pointer_lock(&self) {
                ///The `requestPointerLock()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/requestPointerLock)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_requestPointerLock_b7b7b484a39c776f(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_requestPointerLock_b7b7b484a39c776f(this)
                    };
                    ()
                }
            }
        }
        ///The `scroll()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scroll_e6637a633ef763be() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `scroll()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_with_x_and_y(&self, x: f64, y: f64) {
                ///The `scroll()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scroll_e6637a633ef763be(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_scroll_e6637a633ef763be(this, x, y)
                    };
                    ()
                }
            }
        }
        ///The `scroll()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scroll_dc4b91e7c2214b0f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `scroll()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll(&self) {
                ///The `scroll()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scroll)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scroll_dc4b91e7c2214b0f(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scroll_dc4b91e7c2214b0f(this)
                    };
                    ()
                }
            }
        }
        impl Element {}
        ///The `scrollBy()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollBy_73d646c25eb8b2de() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `scrollBy()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_by_with_x_and_y(&self, x: f64, y: f64) {
                ///The `scrollBy()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollBy_73d646c25eb8b2de(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_scrollBy_73d646c25eb8b2de(this, x, y)
                    };
                    ()
                }
            }
        }
        ///The `scrollBy()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollBy_8a2a9d9bfb0f67a2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `scrollBy()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_by(&self) {
                ///The `scrollBy()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollBy)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollBy_8a2a9d9bfb0f67a2(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scrollBy_8a2a9d9bfb0f67a2(this)
                    };
                    ()
                }
            }
        }
        impl Element {}
        ///The `scrollIntoView()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollIntoView_46206f9ea43cbd51() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `scrollIntoView()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_into_view(&self) {
                ///The `scrollIntoView()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollIntoView_46206f9ea43cbd51(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scrollIntoView_46206f9ea43cbd51(this)
                    };
                    ()
                }
            }
        }
        ///The `scrollIntoView()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollIntoView_61f876ff64dd99e8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `scrollIntoView()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_into_view_with_bool(&self, arg: bool) {
                ///The `scrollIntoView()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollIntoView_61f876ff64dd99e8(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arg: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let arg = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(arg);
                        __wbg_scrollIntoView_61f876ff64dd99e8(this, arg)
                    };
                    ()
                }
            }
        }
        impl Element {}
        ///The `scrollTo()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollTo_6644ef7f14124c66() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `scrollTo()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_to_with_x_and_y(&self, x: f64, y: f64) {
                ///The `scrollTo()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollTo_6644ef7f14124c66(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_scrollTo_6644ef7f14124c66(this, x, y)
                    };
                    ()
                }
            }
        }
        ///The `scrollTo()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollTo_5679ce88b7666dcf() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `scrollTo()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_to(&self) {
                ///The `scrollTo()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollTo_5679ce88b7666dcf(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scrollTo_5679ce88b7666dcf(this)
                    };
                    ()
                }
            }
        }
        impl Element {}
        ///The `setAttribute()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setAttribute_727bdb9763037624() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `setAttribute()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_attribute(&self, name: &str, value: &str) -> Result<(), JsValue> {
                ///The `setAttribute()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setAttribute_727bdb9763037624(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setAttribute_727bdb9763037624(this, name, value)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `setAttributeNS()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setAttributeNS_06dd5dd3824eee15() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Element as WasmDescribe>::describe();
            <Option<&str> as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `setAttributeNS()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_attribute_ns(
                &self,
                namespace: Option<&str>,
                name: &str,
                value: &str,
            ) -> Result<(), JsValue> {
                ///The `setAttributeNS()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setAttributeNS_06dd5dd3824eee15(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let namespace =
                            <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                namespace,
                            );
                        let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setAttributeNS_06dd5dd3824eee15(this, namespace, name, value)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl Element {}
        impl Element {}
        ///The `setCapture()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setCapture_f65cd754a0214d16() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `setCapture()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_capture(&self) {
                ///The `setCapture()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setCapture_f65cd754a0214d16(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_setCapture_f65cd754a0214d16(this)
                    };
                    ()
                }
            }
        }
        ///The `setCapture()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setCapture_1473a0d9ae40cda3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `setCapture()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_capture_with_retarget_to_element(&self, retarget_to_element: bool) {
                ///The `setCapture()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setCapture)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setCapture_1473a0d9ae40cda3(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        retarget_to_element: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let retarget_to_element =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                retarget_to_element,
                            );
                        __wbg_setCapture_1473a0d9ae40cda3(this, retarget_to_element)
                    };
                    ()
                }
            }
        }
        ///The `setPointerCapture()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setPointerCapture_625b38d5daedd8cc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `setPointerCapture()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_pointer_capture(&self, pointer_id: i32) -> Result<(), JsValue> {
                ///The `setPointerCapture()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setPointerCapture_625b38d5daedd8cc(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        pointer_id: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let pointer_id =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(pointer_id);
                        __wbg_setPointerCapture_625b38d5daedd8cc(this, pointer_id)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `toggleAttribute()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_toggleAttribute_c397fb12fefff8b5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Element {
            ///The `toggleAttribute()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn toggle_attribute(&self, name: &str) -> Result<bool, JsValue> {
                ///The `toggleAttribute()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_toggleAttribute_c397fb12fefff8b5(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                        __wbg_toggleAttribute_c397fb12fefff8b5(this, name)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `toggleAttribute()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_toggleAttribute_a22a8a9e1c8a99ee() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Element {
            ///The `toggleAttribute()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn toggle_attribute_with_force(
                &self,
                name: &str,
                force: bool,
            ) -> Result<bool, JsValue> {
                ///The `toggleAttribute()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/toggleAttribute)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_toggleAttribute_a22a8a9e1c8a99ee(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        force: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                        let force = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(force);
                        __wbg_toggleAttribute_a22a8a9e1c8a99ee(this, name, force)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `webkitMatchesSelector()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitMatchesSelector)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_webkitMatchesSelector_117774d3541721e3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Element {
            ///The `webkitMatchesSelector()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitMatchesSelector)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn webkit_matches_selector(&self, selector: &str) -> Result<bool, JsValue> {
                ///The `webkitMatchesSelector()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/webkitMatchesSelector)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_webkitMatchesSelector_117774d3541721e3(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        selector: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let selector =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(selector);
                        __wbg_webkitMatchesSelector_117774d3541721e3(this, selector)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_147fedf314425550() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_node(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_147fedf314425550(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_after_147fedf314425550(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_91e81b1514e1c4d6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_node_0(&self) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_91e81b1514e1c4d6(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_after_91e81b1514e1c4d6(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_40650388efe5e6fb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_node_1(&self, nodes_1: &Node) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_40650388efe5e6fb(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_after_40650388efe5e6fb(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_89fda829715cecfc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_node_2(&self, nodes_1: &Node, nodes_2: &Node) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_89fda829715cecfc(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_after_89fda829715cecfc(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_f42d03e109c501fb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_node_3(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
            ) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_f42d03e109c501fb(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_after_f42d03e109c501fb(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_0bc21d0ec782cc38() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_node_4(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
            ) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_0bc21d0ec782cc38(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_after_0bc21d0ec782cc38(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_10ac5817660b4c4f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_node_5(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
            ) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_10ac5817660b4c4f(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_after_10ac5817660b4c4f(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_c448a85ec2460f92() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_node_6(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
            ) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_c448a85ec2460f92(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_after_c448a85ec2460f92(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_06682120d41074c9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_node_7(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
                nodes_7: &Node,
            ) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_06682120d41074c9(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_after_06682120d41074c9(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_05852887b5bff9ee() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_str(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_05852887b5bff9ee(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_after_05852887b5bff9ee(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_76876a550f4af80c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_str_0(&self) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_76876a550f4af80c(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_after_76876a550f4af80c(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_d4692d38dc710cfc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_str_1(&self, nodes_1: &str) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_d4692d38dc710cfc(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_after_d4692d38dc710cfc(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_21530160623cebed() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_str_2(&self, nodes_1: &str, nodes_2: &str) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_21530160623cebed(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_after_21530160623cebed(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_aa33c47f872bd7f3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_str_3(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
            ) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_aa33c47f872bd7f3(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_after_aa33c47f872bd7f3(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_f10c9c4a45bd889f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_str_4(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
            ) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_f10c9c4a45bd889f(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_after_f10c9c4a45bd889f(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_4d9402ce6b7432b1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_str_5(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
            ) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_4d9402ce6b7432b1(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_after_4d9402ce6b7432b1(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_8870a7b891327b09() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_str_6(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
            ) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_8870a7b891327b09(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_after_8870a7b891327b09(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `after()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_after_5b1a5974e8b69855() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `after()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn after_with_str_7(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
                nodes_7: &str,
            ) -> Result<(), JsValue> {
                ///The `after()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/after)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_after_5b1a5974e8b69855(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_after_5b1a5974e8b69855(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_874845a55747ed2a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_node(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_874845a55747ed2a(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_before_874845a55747ed2a(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_c19e89ac4e764add() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_node_0(&self) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_c19e89ac4e764add(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_before_c19e89ac4e764add(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_b66fc5060e59a97c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_node_1(&self, nodes_1: &Node) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_b66fc5060e59a97c(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_before_b66fc5060e59a97c(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_117c6f673a2fd0d9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_node_2(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
            ) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_117c6f673a2fd0d9(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_before_117c6f673a2fd0d9(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_33812c83019995d9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_node_3(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
            ) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_33812c83019995d9(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_before_33812c83019995d9(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_afcc051ddfdda687() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_node_4(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
            ) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_afcc051ddfdda687(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_before_afcc051ddfdda687(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_32df2b055b910588() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_node_5(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
            ) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_32df2b055b910588(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_before_32df2b055b910588(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_4cd09f201ab499de() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_node_6(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
            ) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_4cd09f201ab499de(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_before_4cd09f201ab499de(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_94c0d1b7fa3b97ca() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_node_7(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
                nodes_7: &Node,
            ) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_94c0d1b7fa3b97ca(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_before_94c0d1b7fa3b97ca(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_8ccc9f20e7695909() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_str(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_8ccc9f20e7695909(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_before_8ccc9f20e7695909(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_be6e099d1350482b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_str_0(&self) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_be6e099d1350482b(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_before_be6e099d1350482b(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_143faea83b6575c6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_str_1(&self, nodes_1: &str) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_143faea83b6575c6(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_before_143faea83b6575c6(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_930d6e23626c8b01() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_str_2(&self, nodes_1: &str, nodes_2: &str) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_930d6e23626c8b01(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_before_930d6e23626c8b01(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_24c45d7baf4f1cbf() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_str_3(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
            ) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_24c45d7baf4f1cbf(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_before_24c45d7baf4f1cbf(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_de65306c4e13d44a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_str_4(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
            ) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_de65306c4e13d44a(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_before_de65306c4e13d44a(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_adfc746eea5bc76a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_str_5(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
            ) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_adfc746eea5bc76a(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_before_adfc746eea5bc76a(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_60c2ad3dd306635d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_str_6(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
            ) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_60c2ad3dd306635d(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_before_60c2ad3dd306635d(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `before()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_before_13e96818a47f2f40() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `before()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn before_with_str_7(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
                nodes_7: &str,
            ) -> Result<(), JsValue> {
                ///The `before()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/before)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_before_13e96818a47f2f40(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_before_13e96818a47f2f40(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `remove()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_remove_cc7ef8dcae8cd130() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `remove()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn remove(&self) {
                ///The `remove()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/remove)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_remove_cc7ef8dcae8cd130(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_remove_cc7ef8dcae8cd130(this)
                    };
                    ()
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_4b6475c7792a1ef7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_node(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_4b6475c7792a1ef7(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_replaceWith_4b6475c7792a1ef7(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_f405193f2812dffe() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_node_0(&self) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_f405193f2812dffe(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_replaceWith_f405193f2812dffe(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_29908327fafa7de9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_node_1(&self, nodes_1: &Node) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_29908327fafa7de9(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_replaceWith_29908327fafa7de9(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_a165bf0356421af6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_node_2(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
            ) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_a165bf0356421af6(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_replaceWith_a165bf0356421af6(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_d5a35f634b6ab8d0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_node_3(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
            ) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_d5a35f634b6ab8d0(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_replaceWith_d5a35f634b6ab8d0(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_5d8407eeb589e4af() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_node_4(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
            ) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_5d8407eeb589e4af(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_replaceWith_5d8407eeb589e4af(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_801e1afa8338f7b0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_node_5(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
            ) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_801e1afa8338f7b0(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_replaceWith_801e1afa8338f7b0(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_b681de17bc43ccf6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_node_6(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
            ) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_b681de17bc43ccf6(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_replaceWith_b681de17bc43ccf6(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_2a087c23375cc61b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_node_7(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
                nodes_7: &Node,
            ) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_2a087c23375cc61b(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_replaceWith_2a087c23375cc61b(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_9912e195681bc1db() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_str(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_9912e195681bc1db(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_replaceWith_9912e195681bc1db(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_7fd54853fcd3a802() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_str_0(&self) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_7fd54853fcd3a802(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_replaceWith_7fd54853fcd3a802(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_a7914ca74d5ca733() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_str_1(&self, nodes_1: &str) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_a7914ca74d5ca733(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_replaceWith_a7914ca74d5ca733(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_10c42f932ac6fb4a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_str_2(
                &self,
                nodes_1: &str,
                nodes_2: &str,
            ) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_10c42f932ac6fb4a(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_replaceWith_10c42f932ac6fb4a(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_c515dc871450c2fc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_str_3(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
            ) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_c515dc871450c2fc(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_replaceWith_c515dc871450c2fc(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_925a58ab9474ba0d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_str_4(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
            ) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_925a58ab9474ba0d(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_replaceWith_925a58ab9474ba0d(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_e691773f4d645682() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_str_5(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
            ) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_e691773f4d645682(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_replaceWith_e691773f4d645682(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_3477b00e421f0c3d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_str_6(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
            ) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_3477b00e421f0c3d(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_replaceWith_3477b00e421f0c3d(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `replaceWith()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceWith_96d3055eee4a47f2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `replaceWith()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_with_with_str_7(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
                nodes_7: &str,
            ) -> Result<(), JsValue> {
                ///The `replaceWith()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/replaceWith)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceWith_96d3055eee4a47f2(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_replaceWith_96d3055eee4a47f2(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        impl Element {}
        ///The `getBoxQuads()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoxQuads)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_getBoxQuads_0e590c97fd5536c3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <::js_sys::Array as WasmDescribe>::describe();
        }
        impl Element {
            ///The `getBoxQuads()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoxQuads)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn get_box_quads(&self) -> Result<::js_sys::Array, JsValue> {
                ///The `getBoxQuads()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoxQuads)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_getBoxQuads_0e590c97fd5536c3(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_getBoxQuads_0e590c97fd5536c3(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl Element {}
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_f520bbbd4b01ee89() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_f520bbbd4b01ee89(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_append_f520bbbd4b01ee89(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_68085dd1f8b8757b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_0(&self) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_68085dd1f8b8757b(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_append_68085dd1f8b8757b(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_7edef7a1b2df93fa() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_1(&self, nodes_1: &Node) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_7edef7a1b2df93fa(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_append_7edef7a1b2df93fa(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_d6ecfd01b27a41e0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_2(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_d6ecfd01b27a41e0(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_append_d6ecfd01b27a41e0(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_affd430bfe80f46e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_3(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_affd430bfe80f46e(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_append_affd430bfe80f46e(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_3316192969089e80() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_4(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_3316192969089e80(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_append_3316192969089e80(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_329aa4c72d8ace56() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_5(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_329aa4c72d8ace56(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_append_329aa4c72d8ace56(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_6531964a674e0ce4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_6(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_6531964a674e0ce4(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_append_6531964a674e0ce4(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_80cf57634b45a858() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_node_7(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
                nodes_7: &Node,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_80cf57634b45a858(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_append_80cf57634b45a858(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_e50e4c01b5af65df() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_e50e4c01b5af65df(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_append_e50e4c01b5af65df(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_db60ebb31bd45d66() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_0(&self) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_db60ebb31bd45d66(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_append_db60ebb31bd45d66(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_468ce9d871ea79b6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_1(&self, nodes_1: &str) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_468ce9d871ea79b6(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_append_468ce9d871ea79b6(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_3925d04ef75d810b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_2(&self, nodes_1: &str, nodes_2: &str) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_3925d04ef75d810b(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_append_3925d04ef75d810b(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_7234cff9202b5533() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_3(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_7234cff9202b5533(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_append_7234cff9202b5533(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_fa5ad4303c41757e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_4(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_fa5ad4303c41757e(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_append_fa5ad4303c41757e(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_99a8c094c123765e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_5(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_99a8c094c123765e(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_append_99a8c094c123765e(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_40350c11bfdbf072() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_6(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_40350c11bfdbf072(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_append_40350c11bfdbf072(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `append()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_append_252fecf6f04113fb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `append()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_with_str_7(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
                nodes_7: &str,
            ) -> Result<(), JsValue> {
                ///The `append()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/append)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_append_252fecf6f04113fb(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_append_252fecf6f04113fb(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_28543945f438cc66() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_28543945f438cc66(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_prepend_28543945f438cc66(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_81bcb8845d62c172() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_0(&self) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_81bcb8845d62c172(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_prepend_81bcb8845d62c172(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_fa995bb42f6e2983() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_1(&self, nodes_1: &Node) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_fa995bb42f6e2983(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_prepend_fa995bb42f6e2983(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_883f652f8d9bd002() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_2(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_883f652f8d9bd002(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_prepend_883f652f8d9bd002(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_98837c04a7d7b770() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_3(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_98837c04a7d7b770(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_prepend_98837c04a7d7b770(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_188f9b20560e3ab2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_4(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_188f9b20560e3ab2(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_prepend_188f9b20560e3ab2(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_bb04ce98fd06674c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_5(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_bb04ce98fd06674c(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_prepend_bb04ce98fd06674c(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_b0790b080afcb59c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_6(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_b0790b080afcb59c(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_prepend_b0790b080afcb59c(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_7e556ddad3ecf3a7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Element as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_node_7(
                &self,
                nodes_1: &Node,
                nodes_2: &Node,
                nodes_3: &Node,
                nodes_4: &Node,
                nodes_5: &Node,
                nodes_6: &Node,
                nodes_7: &Node,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_7e556ddad3ecf3a7(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_prepend_7e556ddad3ecf3a7(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_2787b0be7bcd7a0a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str(&self, nodes: &::js_sys::Array) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_2787b0be7bcd7a0a(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                nodes,
                            );
                        __wbg_prepend_2787b0be7bcd7a0a(this, nodes)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_37c340ae8d4d1493() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Element as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_0(&self) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_37c340ae8d4d1493(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_prepend_37c340ae8d4d1493(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_3ca7a160f58ad290() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_1(&self, nodes_1: &str) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_3ca7a160f58ad290(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        __wbg_prepend_3ca7a160f58ad290(this, nodes_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_669ef8a9aa12273a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_2(&self, nodes_1: &str, nodes_2: &str) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_669ef8a9aa12273a(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        __wbg_prepend_669ef8a9aa12273a(this, nodes_1, nodes_2)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_02939715e513b445() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_3(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_02939715e513b445(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        __wbg_prepend_02939715e513b445(this, nodes_1, nodes_2, nodes_3)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_ef65c11687ba5e37() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_4(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_ef65c11687ba5e37(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        __wbg_prepend_ef65c11687ba5e37(this, nodes_1, nodes_2, nodes_3, nodes_4)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_76c4d845a86e8d3f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_5(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_76c4d845a86e8d3f(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        __wbg_prepend_76c4d845a86e8d3f(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_0e86da7bd1e3716f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_6(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_0e86da7bd1e3716f(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        __wbg_prepend_0e86da7bd1e3716f(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prepend()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
        ///
        ///*This API requires the following crate features to be activated: `Element`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prepend_d95117c1af13ab99() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Element as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Element {
            ///The `prepend()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
            ///
            ///*This API requires the following crate features to be activated: `Element`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prepend_with_str_7(
                &self,
                nodes_1: &str,
                nodes_2: &str,
                nodes_3: &str,
                nodes_4: &str,
                nodes_5: &str,
                nodes_6: &str,
                nodes_7: &str,
            ) -> Result<(), JsValue> {
                ///The `prepend()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Element/prepend)
                ///
                ///*This API requires the following crate features to be activated: `Element`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prepend_d95117c1af13ab99(
                        this: <&Element as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_1: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_2: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_3: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_4: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_5: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_6: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        nodes_7: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Element as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let nodes_1 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_1);
                        let nodes_2 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_2);
                        let nodes_3 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_3);
                        let nodes_4 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_4);
                        let nodes_5 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_5);
                        let nodes_6 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_6);
                        let nodes_7 =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(nodes_7);
                        __wbg_prepend_d95117c1af13ab99(
                            this, nodes_1, nodes_2, nodes_3, nodes_4, nodes_5, nodes_6, nodes_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        #[allow(non_upper_case_globals)]
        #[cfg(target_arch = "wasm32")]
        #[link_section = "__wasm_bindgen_unstable"]
        #[doc(hidden)]
        #[allow(clippy::all)]
        pub static __WASM_BINDGEN_GENERATED_40c1fc9d3c3bf4c7: [u8; 17743usize] = {
            static _INCLUDED_FILES: &[&str] = &[];
            * b".\x00\x00\x00{\"schema_version\":\"0.2.68\",\"version\":\"0.2.68\"}\x19E\x00\x00\x00\x00\xc5\x01\x00\x00\x02\x07Element)__wbg_instanceof_Element_fa1f2e86d1bc5f26\x00\x00\x00\x00#__wbg_namespaceURI_a4d52538ca0c6bae\x00\x00\x00\x01\x07Element\x01\x00\x01\x0cnamespaceURI\x01\x01\x04this\x0cnamespaceURI\x01\x00\x00\x00\x1d__wbg_prefix_b74ad6f9100a97c5\x00\x00\x00\x01\x07Element\x01\x00\x01\x06prefix\x01\x01\x04this\x06prefix\x01\x00\x00\x00 __wbg_localName_d4716707bc9737b0\x00\x00\x00\x01\x07Element\x01\x00\x01\tlocalName\x01\x01\x04this\tlocalName\x01\x00\x00\x00\x1e__wbg_tagName_6513794923bf4962\x00\x00\x00\x01\x07Element\x01\x00\x01\x07tagName\x01\x01\x04this\x07tagName\x01\x00\x00\x00\x19__wbg_id_e4583aceb9badade\x00\x00\x00\x01\x07Element\x01\x00\x01\x02id\x01\x01\x04this\x02id\x01\x00\x00\x00\x1c__wbg_setid_7bffc7f165147751\x00\x00\x00\x01\x07Element\x01\x00\x02\x02id\x01\x02\x04this\x05value\x06set_id\x01\x00\x00\x00 __wbg_className_07bb6355b5b00459\x00\x00\x00\x01\x07Element\x01\x00\x01\tclassName\x01\x01\x04this\tclassName\x01\x00\x00\x00#__wbg_setclassName_dfd1832d72e3b25a\x00\x00\x00\x01\x07Element\x01\x00\x02\tclassName\x01\x02\x04this\x05value\rset_className\x01\x00\x00\x00 __wbg_classList_1777292e1272c00a\x00\x00\x00\x01\x07Element\x01\x00\x01\tclassList\x01\x01\x04this\tclassList\x01\x00\x00\x00!__wbg_attributes_0a388f0c9e0bd435\x00\x00\x00\x01\x07Element\x01\x00\x01\nattributes\x01\x01\x04this\nattributes\x01\x00\x00\x00 __wbg_scrollTop_f4b58b242d2f7a2d\x00\x00\x00\x01\x07Element\x01\x00\x01\tscrollTop\x01\x01\x04this\tscrollTop\x01\x00\x00\x00#__wbg_setscrollTop_db018344c981a335\x00\x00\x00\x01\x07Element\x01\x00\x02\tscrollTop\x01\x02\x04this\x05value\rset_scrollTop\x01\x00\x00\x00!__wbg_scrollLeft_52acbfb4a2fb3ce5\x00\x00\x00\x01\x07Element\x01\x00\x01\nscrollLeft\x01\x01\x04this\nscrollLeft\x01\x00\x00\x00$__wbg_setscrollLeft_b0270fca179a1c31\x00\x00\x00\x01\x07Element\x01\x00\x02\nscrollLeft\x01\x02\x04this\x05value\x0eset_scrollLeft\x01\x00\x00\x00\"__wbg_scrollWidth_6a5b2e5c2473e134\x00\x00\x00\x01\x07Element\x01\x00\x01\x0bscrollWidth\x01\x01\x04this\x0bscrollWidth\x01\x00\x00\x00#__wbg_scrollHeight_d9552ece28a2a959\x00\x00\x00\x01\x07Element\x01\x00\x01\x0cscrollHeight\x01\x01\x04this\x0cscrollHeight\x01\x00\x00\x00 __wbg_clientTop_790ce01c04065aa6\x00\x00\x00\x01\x07Element\x01\x00\x01\tclientTop\x01\x01\x04this\tclientTop\x01\x00\x00\x00!__wbg_clientLeft_bd80b0d52eac1b27\x00\x00\x00\x01\x07Element\x01\x00\x01\nclientLeft\x01\x01\x04this\nclientLeft\x01\x00\x00\x00\"__wbg_clientWidth_857377e072b59b4b\x00\x00\x00\x01\x07Element\x01\x00\x01\x0bclientWidth\x01\x01\x04this\x0bclientWidth\x01\x00\x00\x00#__wbg_clientHeight_daa13ddd5bd5136d\x00\x00\x00\x01\x07Element\x01\x00\x01\x0cclientHeight\x01\x01\x04this\x0cclientHeight\x01\x00\x00\x00 __wbg_innerHTML_cd6045f48cf556c3\x00\x00\x00\x01\x07Element\x01\x00\x01\tinnerHTML\x01\x01\x04this\tinnerHTML\x01\x00\x00\x00#__wbg_setinnerHTML_4ff235db1a3cb4d8\x00\x00\x00\x01\x07Element\x01\x00\x02\tinnerHTML\x01\x02\x04this\x05value\rset_innerHTML\x01\x00\x00\x00 __wbg_outerHTML_146ed50ea7b173f5\x00\x00\x00\x01\x07Element\x01\x00\x01\touterHTML\x01\x01\x04this\touterHTML\x01\x00\x00\x00#__wbg_setouterHTML_cdfd3d4eb57f8a41\x00\x00\x00\x01\x07Element\x01\x00\x02\touterHTML\x01\x02\x04this\x05value\rset_outerHTML\x01\x00\x00\x00!__wbg_shadowRoot_0740cf7721775b71\x00\x00\x00\x01\x07Element\x01\x00\x01\nshadowRoot\x01\x01\x04this\nshadowRoot\x01\x00\x00\x00#__wbg_assignedSlot_7165c48606a8e532\x00\x00\x00\x01\x07Element\x01\x00\x01\x0cassignedSlot\x01\x01\x04this\x0cassignedSlot\x01\x00\x00\x00\x1b__wbg_slot_150e7c2e43d67113\x00\x00\x00\x01\x07Element\x01\x00\x01\x04slot\x01\x01\x04this\x04slot\x01\x00\x00\x00\x1e__wbg_setslot_556c251dbe9072d1\x00\x00\x00\x01\x07Element\x01\x00\x02\x04slot\x01\x02\x04this\x05value\x08set_slot\x01\x00\x00\x00-__wbg_previousElementSibling_c563bd845a6b83c4\x00\x00\x00\x01\x07Element\x01\x00\x01\x16previousElementSibling\x01\x01\x04this\x16previousElementSibling\x01\x00\x00\x00)__wbg_nextElementSibling_0fb824df2518e129\x00\x00\x00\x01\x07Element\x01\x00\x01\x12nextElementSibling\x01\x01\x04this\x12nextElementSibling\x01\x00\x00\x00\x1f__wbg_children_93d399e81705675d\x00\x00\x00\x01\x07Element\x01\x00\x01\x08children\x01\x01\x04this\x08children\x01\x00\x00\x00(__wbg_firstElementChild_f5d9e8fe9a5510b7\x00\x00\x00\x01\x07Element\x01\x00\x01\x11firstElementChild\x01\x01\x04this\x11firstElementChild\x01\x00\x00\x00\'__wbg_lastElementChild_82782015d9d3ca7c\x00\x00\x00\x01\x07Element\x01\x00\x01\x10lastElementChild\x01\x01\x04this\x10lastElementChild\x01\x00\x00\x00(__wbg_childElementCount_7937160c7ca38a19\x00\x00\x00\x01\x07Element\x01\x00\x01\x11childElementCount\x01\x01\x04this\x11childElementCount\x01\x00\x00\x00#__wbg_attachShadow_0de8f1f1d8267b8e\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x15shadow_root_init_dict\x0cattachShadow\x01\x00\x00\x00\x1e__wbg_closest_5a57be82755ccd47\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x08selector\x07closest\x01\x00\x00\x00#__wbg_getAttribute_ecbed0bd44a3467a\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x04name\x0cgetAttribute\x01\x00\x00\x00%__wbg_getAttributeNS_6a361a526afb119e\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\tnamespace\nlocal_name\x0egetAttributeNS\x01\x00\x00\x00(__wbg_getAttributeNames_0aa52c16b346b81e\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x11getAttributeNames\x01\x00\x00\x00\'__wbg_getAttributeNode_30e806eca59c76cf\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x04name\x10getAttributeNode\x01\x00\x00\x00)__wbg_getAttributeNodeNS_2bb3e976d0e8d3e2\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\rnamespace_uri\nlocal_name\x12getAttributeNodeNS\x01\x00\x00\x00,__wbg_getBoundingClientRect_c6d612c06726983e\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x15getBoundingClientRect\x01\x00\x00\x00%__wbg_getClientRects_620a3cf379dc6d09\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x0egetClientRects\x01\x00\x00\x00-__wbg_getElementsByClassName_d15a6b9b21a68e7d\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x0bclass_names\x16getElementsByClassName\x01\x00\x00\x00+__wbg_getElementsByTagName_58e5b5aa6bc71415\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\nlocal_name\x14getElementsByTagName\x01\x00\x00\x00-__wbg_getElementsByTagNameNS_b600aeb9c90ef6df\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\tnamespace\nlocal_name\x16getElementsByTagNameNS\x01\x00\x00\x00#__wbg_hasAttribute_22c9d1c60b61d157\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x04name\x0chasAttribute\x01\x00\x00\x00%__wbg_hasAttributeNS_96fc205ae365c77d\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\tnamespace\nlocal_name\x0ehasAttributeNS\x01\x00\x00\x00$__wbg_hasAttributes_6dfeae07db5bb362\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\rhasAttributes\x01\x00\x00\x00(__wbg_hasPointerCapture_e626ac27ee554d80\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\npointer_id\x11hasPointerCapture\x01\x00\x00\x00,__wbg_insertAdjacentElement_977bba9106df5b76\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x06where_\x07element\x15insertAdjacentElement\x01\x00\x00\x00)__wbg_insertAdjacentHTML_f5b88401066717f4\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x08position\x04text\x12insertAdjacentHTML\x01\x00\x00\x00)__wbg_insertAdjacentText_e06264cd2050dbd5\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x06where_\x04data\x12insertAdjacentText\x01\x00\x00\x00\x1e__wbg_matches_ae3b3bc8dc7ea0f8\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x08selector\x07matches\x01\x00\x00\x00$__wbg_querySelector_cb87c7b52f337f99\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\tselectors\rquerySelector\x01\x00\x00\x00\'__wbg_querySelectorAll_4e14dae829473ba2\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\tselectors\x10querySelectorAll\x01\x00\x00\x00%__wbg_releaseCapture_ac7ce18cb8019c4d\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x0ereleaseCapture\x01\x00\x00\x00,__wbg_releasePointerCapture_27065a107bb695b8\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\npointer_id\x15releasePointerCapture\x01\x00\x00\x00&__wbg_removeAttribute_a705c6de4bb158c4\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x04name\x0fremoveAttribute\x01\x00\x00\x00(__wbg_removeAttributeNS_22454e97630590c5\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\tnamespace\nlocal_name\x11removeAttributeNS\x01\x00\x00\x00*__wbg_removeAttributeNode_a272dc0db30ca345\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x08old_attr\x13removeAttributeNode\x01\x00\x00\x00(__wbg_requestFullscreen_7c9e8be46f97059a\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x11requestFullscreen\x01\x00\x00\x00)__wbg_requestPointerLock_b7b7b484a39c776f\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x12requestPointerLock\x01\x00\x00\x00\x1d__wbg_scroll_e6637a633ef763be\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x01x\x01y\x06scroll\x01\x00\x00\x00\x1d__wbg_scroll_dc4b91e7c2214b0f\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x06scroll\x01\x00\x00\x00\x1d__wbg_scroll_881cb91cea8f3de2\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07options\x06scroll\x01\x00\x00\x00\x1f__wbg_scrollBy_73d646c25eb8b2de\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x01x\x01y\x08scrollBy\x01\x00\x00\x00\x1f__wbg_scrollBy_8a2a9d9bfb0f67a2\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x08scrollBy\x01\x00\x00\x00\x1f__wbg_scrollBy_ebb10891fd48a87e\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07options\x08scrollBy\x01\x00\x00\x00%__wbg_scrollIntoView_46206f9ea43cbd51\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x0escrollIntoView\x01\x00\x00\x00%__wbg_scrollIntoView_61f876ff64dd99e8\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x03arg\x0escrollIntoView\x01\x00\x00\x00%__wbg_scrollIntoView_da87c668a716739e\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x03arg\x0escrollIntoView\x01\x00\x00\x00\x1f__wbg_scrollTo_6644ef7f14124c66\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x01x\x01y\x08scrollTo\x01\x00\x00\x00\x1f__wbg_scrollTo_5679ce88b7666dcf\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x08scrollTo\x01\x00\x00\x00\x1f__wbg_scrollTo_cd81b0c4cf26b1ef\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07options\x08scrollTo\x01\x00\x00\x00#__wbg_setAttribute_727bdb9763037624\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x04name\x05value\x0csetAttribute\x01\x00\x00\x00%__wbg_setAttributeNS_06dd5dd3824eee15\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\tnamespace\x04name\x05value\x0esetAttributeNS\x01\x00\x00\x00\'__wbg_setAttributeNode_b3fd01d08736b139\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x08new_attr\x10setAttributeNode\x01\x00\x00\x00)__wbg_setAttributeNodeNS_9ad67ad316f494ba\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x08new_attr\x12setAttributeNodeNS\x01\x00\x00\x00!__wbg_setCapture_f65cd754a0214d16\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\nsetCapture\x01\x00\x00\x00!__wbg_setCapture_1473a0d9ae40cda3\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x13retarget_to_element\nsetCapture\x01\x00\x00\x00(__wbg_setPointerCapture_625b38d5daedd8cc\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\npointer_id\x11setPointerCapture\x01\x00\x00\x00&__wbg_toggleAttribute_c397fb12fefff8b5\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x04name\x0ftoggleAttribute\x01\x00\x00\x00&__wbg_toggleAttribute_a22a8a9e1c8a99ee\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x04name\x05force\x0ftoggleAttribute\x01\x00\x00\x00,__wbg_webkitMatchesSelector_117774d3541721e3\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x08selector\x15webkitMatchesSelector\x01\x00\x00\x00\x1c__wbg_after_147fedf314425550\x01\x01\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x05nodes\x05after\x01\x00\x00\x00\x1c__wbg_after_91e81b1514e1c4d6\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x05after\x01\x00\x00\x00\x1c__wbg_after_40650388efe5e6fb\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07nodes_1\x05after\x01\x00\x00\x00\x1c__wbg_after_89fda829715cecfc\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x05after\x01\x00\x00\x00\x1c__wbg_after_f42d03e109c501fb\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x05after\x01\x00\x00\x00\x1c__wbg_after_0bc21d0ec782cc38\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x05after\x01\x00\x00\x00\x1c__wbg_after_10ac5817660b4c4f\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x05after\x01\x00\x00\x00\x1c__wbg_after_c448a85ec2460f92\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x05after\x01\x00\x00\x00\x1c__wbg_after_06682120d41074c9\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x05after\x01\x00\x00\x00\x1c__wbg_after_05852887b5bff9ee\x01\x01\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x05nodes\x05after\x01\x00\x00\x00\x1c__wbg_after_76876a550f4af80c\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x05after\x01\x00\x00\x00\x1c__wbg_after_d4692d38dc710cfc\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07nodes_1\x05after\x01\x00\x00\x00\x1c__wbg_after_21530160623cebed\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x05after\x01\x00\x00\x00\x1c__wbg_after_aa33c47f872bd7f3\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x05after\x01\x00\x00\x00\x1c__wbg_after_f10c9c4a45bd889f\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x05after\x01\x00\x00\x00\x1c__wbg_after_4d9402ce6b7432b1\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x05after\x01\x00\x00\x00\x1c__wbg_after_8870a7b891327b09\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x05after\x01\x00\x00\x00\x1c__wbg_after_5b1a5974e8b69855\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x05after\x01\x00\x00\x00\x1d__wbg_before_874845a55747ed2a\x01\x01\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x05nodes\x06before\x01\x00\x00\x00\x1d__wbg_before_c19e89ac4e764add\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x06before\x01\x00\x00\x00\x1d__wbg_before_b66fc5060e59a97c\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07nodes_1\x06before\x01\x00\x00\x00\x1d__wbg_before_117c6f673a2fd0d9\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x06before\x01\x00\x00\x00\x1d__wbg_before_33812c83019995d9\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x06before\x01\x00\x00\x00\x1d__wbg_before_afcc051ddfdda687\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x06before\x01\x00\x00\x00\x1d__wbg_before_32df2b055b910588\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x06before\x01\x00\x00\x00\x1d__wbg_before_4cd09f201ab499de\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x06before\x01\x00\x00\x00\x1d__wbg_before_94c0d1b7fa3b97ca\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x06before\x01\x00\x00\x00\x1d__wbg_before_8ccc9f20e7695909\x01\x01\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x05nodes\x06before\x01\x00\x00\x00\x1d__wbg_before_be6e099d1350482b\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x06before\x01\x00\x00\x00\x1d__wbg_before_143faea83b6575c6\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07nodes_1\x06before\x01\x00\x00\x00\x1d__wbg_before_930d6e23626c8b01\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x06before\x01\x00\x00\x00\x1d__wbg_before_24c45d7baf4f1cbf\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x06before\x01\x00\x00\x00\x1d__wbg_before_de65306c4e13d44a\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x06before\x01\x00\x00\x00\x1d__wbg_before_adfc746eea5bc76a\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x06before\x01\x00\x00\x00\x1d__wbg_before_60c2ad3dd306635d\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x06before\x01\x00\x00\x00\x1d__wbg_before_13e96818a47f2f40\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x06before\x01\x00\x00\x00\x1d__wbg_remove_cc7ef8dcae8cd130\x00\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x06remove\x01\x00\x00\x00\"__wbg_replaceWith_4b6475c7792a1ef7\x01\x01\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x05nodes\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_f405193f2812dffe\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_29908327fafa7de9\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07nodes_1\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_a165bf0356421af6\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_d5a35f634b6ab8d0\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_5d8407eeb589e4af\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_801e1afa8338f7b0\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_b681de17bc43ccf6\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_2a087c23375cc61b\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_9912e195681bc1db\x01\x01\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x05nodes\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_7fd54853fcd3a802\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_a7914ca74d5ca733\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07nodes_1\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_10c42f932ac6fb4a\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_c515dc871450c2fc\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_925a58ab9474ba0d\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_e691773f4d645682\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_3477b00e421f0c3d\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x0breplaceWith\x01\x00\x00\x00\"__wbg_replaceWith_96d3055eee4a47f2\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x0breplaceWith\x01\x00\x00\x00+__wbg_convertPointFromNode_3952ee8f399c9a3f\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x05point\x04from\x14convertPointFromNode\x01\x00\x00\x00+__wbg_convertPointFromNode_5728196c619acc78\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x05point\x04from\x14convertPointFromNode\x01\x00\x00\x00+__wbg_convertPointFromNode_71c6cb4a245483fa\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x05point\x04from\x14convertPointFromNode\x01\x00\x00\x00+__wbg_convertPointFromNode_21df66b11613e0ea\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x05point\x04from\x07options\x14convertPointFromNode\x01\x00\x00\x00+__wbg_convertPointFromNode_c680a3db057a982b\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x05point\x04from\x07options\x14convertPointFromNode\x01\x00\x00\x00+__wbg_convertPointFromNode_5c5d1aed790828c6\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x05point\x04from\x07options\x14convertPointFromNode\x01\x00\x00\x00*__wbg_convertQuadFromNode_97bd6aa2e21c7ab4\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x04quad\x04from\x13convertQuadFromNode\x01\x00\x00\x00*__wbg_convertQuadFromNode_f02590715dea7dff\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x04quad\x04from\x13convertQuadFromNode\x01\x00\x00\x00*__wbg_convertQuadFromNode_8b182bb106b96330\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x04quad\x04from\x13convertQuadFromNode\x01\x00\x00\x00*__wbg_convertQuadFromNode_cdbddd653561dfe3\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x04quad\x04from\x07options\x13convertQuadFromNode\x01\x00\x00\x00*__wbg_convertQuadFromNode_cd4180388942434d\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x04quad\x04from\x07options\x13convertQuadFromNode\x01\x00\x00\x00*__wbg_convertQuadFromNode_d6dd12864e6a3ad2\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x04quad\x04from\x07options\x13convertQuadFromNode\x01\x00\x00\x00*__wbg_convertRectFromNode_a000a86e5f6fe0a1\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x04rect\x04from\x13convertRectFromNode\x01\x00\x00\x00*__wbg_convertRectFromNode_963bc70df888dff6\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x04rect\x04from\x13convertRectFromNode\x01\x00\x00\x00*__wbg_convertRectFromNode_cdcfa0788f146134\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x04rect\x04from\x13convertRectFromNode\x01\x00\x00\x00*__wbg_convertRectFromNode_7f8d9130119cc646\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x04rect\x04from\x07options\x13convertRectFromNode\x01\x00\x00\x00*__wbg_convertRectFromNode_4e30dd3352b8f4e7\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x04rect\x04from\x07options\x13convertRectFromNode\x01\x00\x00\x00*__wbg_convertRectFromNode_400e4add1a97563f\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x04rect\x04from\x07options\x13convertRectFromNode\x01\x00\x00\x00\"__wbg_getBoxQuads_0e590c97fd5536c3\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x0bgetBoxQuads\x01\x00\x00\x00\"__wbg_getBoxQuads_a363faf7940ba7ec\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07options\x0bgetBoxQuads\x01\x00\x00\x00\x1d__wbg_append_f520bbbd4b01ee89\x01\x01\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x05nodes\x06append\x01\x00\x00\x00\x1d__wbg_append_68085dd1f8b8757b\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x06append\x01\x00\x00\x00\x1d__wbg_append_7edef7a1b2df93fa\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07nodes_1\x06append\x01\x00\x00\x00\x1d__wbg_append_d6ecfd01b27a41e0\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x06append\x01\x00\x00\x00\x1d__wbg_append_affd430bfe80f46e\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x06append\x01\x00\x00\x00\x1d__wbg_append_3316192969089e80\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x06append\x01\x00\x00\x00\x1d__wbg_append_329aa4c72d8ace56\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x06append\x01\x00\x00\x00\x1d__wbg_append_6531964a674e0ce4\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x06append\x01\x00\x00\x00\x1d__wbg_append_80cf57634b45a858\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x06append\x01\x00\x00\x00\x1d__wbg_append_e50e4c01b5af65df\x01\x01\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x05nodes\x06append\x01\x00\x00\x00\x1d__wbg_append_db60ebb31bd45d66\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x06append\x01\x00\x00\x00\x1d__wbg_append_468ce9d871ea79b6\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07nodes_1\x06append\x01\x00\x00\x00\x1d__wbg_append_3925d04ef75d810b\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x06append\x01\x00\x00\x00\x1d__wbg_append_7234cff9202b5533\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x06append\x01\x00\x00\x00\x1d__wbg_append_fa5ad4303c41757e\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x06append\x01\x00\x00\x00\x1d__wbg_append_99a8c094c123765e\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x06append\x01\x00\x00\x00\x1d__wbg_append_40350c11bfdbf072\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x06append\x01\x00\x00\x00\x1d__wbg_append_252fecf6f04113fb\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x06append\x01\x00\x00\x00\x1e__wbg_prepend_28543945f438cc66\x01\x01\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x05nodes\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_81bcb8845d62c172\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_fa995bb42f6e2983\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07nodes_1\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_883f652f8d9bd002\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_98837c04a7d7b770\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_188f9b20560e3ab2\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_bb04ce98fd06674c\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_b0790b080afcb59c\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_7e556ddad3ecf3a7\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_2787b0be7bcd7a0a\x01\x01\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x05nodes\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_37c340ae8d4d1493\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x01\x04this\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_3ca7a160f58ad290\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x02\x04this\x07nodes_1\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_669ef8a9aa12273a\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x03\x04this\x07nodes_1\x07nodes_2\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_02939715e513b445\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x04\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_ef65c11687ba5e37\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x05\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_76c4d845a86e8d3f\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x06\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_0e86da7bd1e3716f\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x07\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07prepend\x01\x00\x00\x00\x1e__wbg_prepend_d95117c1af13ab99\x01\x00\x00\x01\x07Element\x01\x00\x00\x01\x08\x04this\x07nodes_1\x07nodes_2\x07nodes_3\x07nodes_4\x07nodes_5\x07nodes_6\x07nodes_7\x07prepend\x01\x00\x00\x00\x00\x18web-sys-2ffcad8c6dc62865\x00"
        };
    }
    #[cfg(feature = "Element")]
    pub use gen_Element::*;
    #[cfg(feature = "Event")]
    #[allow(non_snake_case)]
    mod gen_Event {
        #![allow(unused_imports)]
        use super::*;
        use wasm_bindgen::prelude::*;
        #[allow(bad_style)]
        ///The `Event` class.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        ///
        #[repr(transparent)]
        #[allow(clippy::all)]
        pub struct Event {
            obj: ::js_sys::Object,
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::fmt::Debug for Event {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    Event {
                        obj: ref __self_0_0,
                    } => {
                        let mut debug_trait_builder = f.debug_struct("Event");
                        let _ = debug_trait_builder.field("obj", &&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::clone::Clone for Event {
            #[inline]
            fn clone(&self) -> Event {
                match *self {
                    Event {
                        obj: ref __self_0_0,
                    } => Event {
                        obj: ::core::clone::Clone::clone(&(*__self_0_0)),
                    },
                }
            }
        }
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::marker::StructuralPartialEq for Event {}
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::PartialEq for Event {
            #[inline]
            fn eq(&self, other: &Event) -> bool {
                match *other {
                    Event {
                        obj: ref __self_1_0,
                    } => match *self {
                        Event {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) == (*__self_1_0),
                    },
                }
            }
            #[inline]
            fn ne(&self, other: &Event) -> bool {
                match *other {
                    Event {
                        obj: ref __self_1_0,
                    } => match *self {
                        Event {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) != (*__self_1_0),
                    },
                }
            }
        }
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::marker::StructuralEq for Event {}
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::Eq for Event {
            #[inline]
            #[doc(hidden)]
            fn assert_receiver_is_total_eq(&self) -> () {
                {
                    let _: ::core::cmp::AssertParamIsEq<::js_sys::Object>;
                }
            }
        }
        #[allow(bad_style)]
        #[allow(clippy::all)]
        const __wbg_generated_const_Event: () = {
            use wasm_bindgen::__rt::core;
            use wasm_bindgen::convert::RefFromWasmAbi;
            use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
            use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
            use wasm_bindgen::describe::WasmDescribe;
            use wasm_bindgen::{JsCast, JsValue};
            impl WasmDescribe for Event {
                fn describe() {
                    use wasm_bindgen::describe::*;
                    inform(NAMED_EXTERNREF);
                    inform(5u32);
                    inform(69u32);
                    inform(118u32);
                    inform(101u32);
                    inform(110u32);
                    inform(116u32);
                }
            }
            impl core::ops::Deref for Event {
                type Target = ::js_sys::Object;
                #[inline]
                fn deref(&self) -> &::js_sys::Object {
                    &self.obj
                }
            }
            impl IntoWasmAbi for Event {
                type Abi = <JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    self.obj.into_abi()
                }
            }
            impl OptionIntoWasmAbi for Event {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl<'a> OptionIntoWasmAbi for &'a Event {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl FromWasmAbi for Event {
                type Abi = <JsValue as FromWasmAbi>::Abi;
                #[inline]
                unsafe fn from_abi(js: Self::Abi) -> Self {
                    Event {
                        obj: JsValue::from_abi(js).into(),
                    }
                }
            }
            impl OptionFromWasmAbi for Event {
                #[inline]
                fn is_none(abi: &Self::Abi) -> bool {
                    *abi == 0
                }
            }
            impl<'a> IntoWasmAbi for &'a Event {
                type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    (&self.obj).into_abi()
                }
            }
            impl RefFromWasmAbi for Event {
                type Abi = <JsValue as RefFromWasmAbi>::Abi;
                type Anchor = core::mem::ManuallyDrop<Event>;
                #[inline]
                unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
                    let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
                    core::mem::ManuallyDrop::new(Event {
                        obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
                    })
                }
            }
            impl From<JsValue> for Event {
                #[inline]
                fn from(obj: JsValue) -> Event {
                    Event { obj: obj.into() }
                }
            }
            impl AsRef<JsValue> for Event {
                #[inline]
                fn as_ref(&self) -> &JsValue {
                    self.obj.as_ref()
                }
            }
            impl AsRef<Event> for Event {
                #[inline]
                fn as_ref(&self) -> &Event {
                    self
                }
            }
            impl From<Event> for JsValue {
                #[inline]
                fn from(obj: Event) -> JsValue {
                    obj.obj.into()
                }
            }
            impl JsCast for Event {
                fn instanceof(val: &JsValue) -> bool {
                    #[link(wasm_import_module = "__wbindgen_placeholder__")]
                    #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                    extern "C" {
                        fn __wbg_instanceof_Event_c90f1ac035dd618e(val: u32) -> u32;
                    }
                    unsafe {
                        let idx = val.into_abi();
                        __wbg_instanceof_Event_c90f1ac035dd618e(idx) != 0
                    }
                }
                #[inline]
                fn unchecked_from_js(val: JsValue) -> Self {
                    Event { obj: val.into() }
                }
                #[inline]
                fn unchecked_from_js_ref(val: &JsValue) -> &Self {
                    unsafe { &*(val as *const JsValue as *const Event) }
                }
            }
            ()
        };
        #[allow(clippy::all)]
        impl From<Event> for ::js_sys::Object {
            #[inline]
            fn from(obj: Event) -> ::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<::js_sys::Object> for Event {
            #[inline]
            fn as_ref(&self) -> &::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js_ref(self.as_ref())
            }
        }
        ///Getter for the `type` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/type)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_type_7df10f9c9c76b0b0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Event {
            ///Getter for the `type` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/type)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn type_(&self) -> String {
                ///Getter for the `type` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/type)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_type_7df10f9c9c76b0b0(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_type_7df10f9c9c76b0b0(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        #[cfg(feature = "EventTarget")]
        ///Getter for the `target` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/target)
        ///
        ///*This API requires the following crate features to be activated: `Event`, `EventTarget`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_target_02b2c4e71f788cc6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <Option<EventTarget> as WasmDescribe>::describe();
        }
        impl Event {
            #[cfg(feature = "EventTarget")]
            ///Getter for the `target` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/target)
            ///
            ///*This API requires the following crate features to be activated: `Event`, `EventTarget`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn target(&self) -> Option<EventTarget> {
                #[cfg(feature = "EventTarget")]
                ///Getter for the `target` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/target)
                ///
                ///*This API requires the following crate features to be activated: `Event`, `EventTarget`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_target_02b2c4e71f788cc6(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<EventTarget> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_target_02b2c4e71f788cc6(this)
                    };
                    <Option<EventTarget> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        #[cfg(feature = "EventTarget")]
        ///Getter for the `currentTarget` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget)
        ///
        ///*This API requires the following crate features to be activated: `Event`, `EventTarget`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_currentTarget_273561c7aeba291c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <Option<EventTarget> as WasmDescribe>::describe();
        }
        impl Event {
            #[cfg(feature = "EventTarget")]
            ///Getter for the `currentTarget` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget)
            ///
            ///*This API requires the following crate features to be activated: `Event`, `EventTarget`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn current_target(&self) -> Option<EventTarget> {
                #[cfg(feature = "EventTarget")]
                ///Getter for the `currentTarget` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget)
                ///
                ///*This API requires the following crate features to be activated: `Event`, `EventTarget`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_currentTarget_273561c7aeba291c(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<EventTarget> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_currentTarget_273561c7aeba291c(this)
                    };
                    <Option<EventTarget> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `eventPhase` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_eventPhase_5daba2076b317bb8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <u16 as WasmDescribe>::describe();
        }
        impl Event {
            ///Getter for the `eventPhase` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn event_phase(&self) -> u16 {
                ///Getter for the `eventPhase` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_eventPhase_5daba2076b317bb8(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <u16 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_eventPhase_5daba2076b317bb8(this)
                    };
                    <u16 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `bubbles` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_bubbles_fe82e7d7c34a1e7a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Event {
            ///Getter for the `bubbles` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn bubbles(&self) -> bool {
                ///Getter for the `bubbles` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_bubbles_fe82e7d7c34a1e7a(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_bubbles_fe82e7d7c34a1e7a(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `cancelable` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_cancelable_cd5b08b0338a243b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Event {
            ///Getter for the `cancelable` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn cancelable(&self) -> bool {
                ///Getter for the `cancelable` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_cancelable_cd5b08b0338a243b(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_cancelable_cd5b08b0338a243b(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `defaultPrevented` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_defaultPrevented_826d3a084a17b1c2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Event {
            ///Getter for the `defaultPrevented` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn default_prevented(&self) -> bool {
                ///Getter for the `defaultPrevented` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_defaultPrevented_826d3a084a17b1c2(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_defaultPrevented_826d3a084a17b1c2(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `composed` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/composed)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_composed_c2ca24989db52f93() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Event {
            ///Getter for the `composed` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/composed)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn composed(&self) -> bool {
                ///Getter for the `composed` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/composed)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_composed_c2ca24989db52f93(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_composed_c2ca24989db52f93(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `isTrusted` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_isTrusted_7b8465dc066a80cd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Event {
            ///Getter for the `isTrusted` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn is_trusted(&self) -> bool {
                ///Getter for the `isTrusted` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_isTrusted_7b8465dc066a80cd(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_isTrusted_7b8465dc066a80cd(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `timeStamp` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_timeStamp_3cc01bbb7cc961ab() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
        }
        impl Event {
            ///Getter for the `timeStamp` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_stamp(&self) -> f64 {
                ///Getter for the `timeStamp` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeStamp_3cc01bbb7cc961ab(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_timeStamp_3cc01bbb7cc961ab(this)
                    };
                    <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `cancelBubble` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_cancelBubble_ba020b9735aa529e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Event {
            ///Getter for the `cancelBubble` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn cancel_bubble(&self) -> bool {
                ///Getter for the `cancelBubble` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_cancelBubble_ba020b9735aa529e(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_cancelBubble_ba020b9735aa529e(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `cancelBubble` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setcancelBubble_5e0accd834daddc8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Event as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Event {
            ///Setter for the `cancelBubble` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_cancel_bubble(&self, value: bool) {
                ///Setter for the `cancelBubble` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setcancelBubble_5e0accd834daddc8(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setcancelBubble_5e0accd834daddc8(this, value)
                    };
                    ()
                }
            }
        }
        ///The `new Event(..)` constructor, creating a new instance of `Event`.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_new_964b4876f78388bf() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&str as WasmDescribe>::describe();
            <Event as WasmDescribe>::describe();
        }
        impl Event {
            ///The `new Event(..)` constructor, creating a new instance of `Event`.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn new(type_: &str) -> Result<Event, JsValue> {
                ///The `new Event(..)` constructor, creating a new instance of `Event`.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/Event)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_new_964b4876f78388bf(
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Event as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        __wbg_new_964b4876f78388bf(type_)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Event as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        impl Event {}
        ///The `composedPath()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_composedPath_48170aeefe733314() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <::js_sys::Array as WasmDescribe>::describe();
        }
        impl Event {
            ///The `composedPath()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn composed_path(&self) -> ::js_sys::Array {
                ///The `composedPath()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_composedPath_48170aeefe733314(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_composedPath_48170aeefe733314(this)
                    };
                    <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `initEvent()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_initEvent_1a5bf52e43493af0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Event as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Event {
            ///The `initEvent()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn init_event(&self, type_: &str) {
                ///The `initEvent()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_initEvent_1a5bf52e43493af0(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        __wbg_initEvent_1a5bf52e43493af0(this, type_)
                    };
                    ()
                }
            }
        }
        ///The `initEvent()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_initEvent_55bfd3645d7d74e4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Event as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Event {
            ///The `initEvent()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn init_event_with_bubbles(&self, type_: &str, bubbles: bool) {
                ///The `initEvent()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_initEvent_55bfd3645d7d74e4(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        bubbles: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let bubbles =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles);
                        __wbg_initEvent_55bfd3645d7d74e4(this, type_, bubbles)
                    };
                    ()
                }
            }
        }
        ///The `initEvent()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_initEvent_4fbe71ddf96fd732() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Event as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Event {
            ///The `initEvent()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn init_event_with_bubbles_and_cancelable(
                &self,
                type_: &str,
                bubbles: bool,
                cancelable: bool,
            ) {
                ///The `initEvent()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_initEvent_4fbe71ddf96fd732(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        bubbles: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        cancelable: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let bubbles =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles);
                        let cancelable =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable);
                        __wbg_initEvent_4fbe71ddf96fd732(this, type_, bubbles, cancelable)
                    };
                    ()
                }
            }
        }
        ///The `preventDefault()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_preventDefault_93d06688748bfc14() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Event {
            ///The `preventDefault()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prevent_default(&self) {
                ///The `preventDefault()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_preventDefault_93d06688748bfc14(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_preventDefault_93d06688748bfc14(this)
                    };
                    ()
                }
            }
        }
        ///The `stopImmediatePropagation()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_stopImmediatePropagation_fb0954856e0d61b0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Event {
            ///The `stopImmediatePropagation()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn stop_immediate_propagation(&self) {
                ///The `stopImmediatePropagation()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_stopImmediatePropagation_fb0954856e0d61b0(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_stopImmediatePropagation_fb0954856e0d61b0(this)
                    };
                    ()
                }
            }
        }
        ///The `stopPropagation()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation)
        ///
        ///*This API requires the following crate features to be activated: `Event`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_stopPropagation_a47dd3b6ffe6b400() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Event as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Event {
            ///The `stopPropagation()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation)
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn stop_propagation(&self) {
                ///The `stopPropagation()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation)
                ///
                ///*This API requires the following crate features to be activated: `Event`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_stopPropagation_a47dd3b6ffe6b400(
                        this: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_stopPropagation_a47dd3b6ffe6b400(this)
                    };
                    ()
                }
            }
        }
        #[allow(non_upper_case_globals)]
        #[cfg(target_arch = "wasm32")]
        #[link_section = "__wasm_bindgen_unstable"]
        #[doc(hidden)]
        #[allow(clippy::all)]
        pub static __WASM_BINDGEN_GENERATED_897a32557632741e: [u8; 1832usize] = {
            static _INCLUDED_FILES: &[&str] = &[];
            * b".\x00\x00\x00{\"schema_version\":\"0.2.68\",\"version\":\"0.2.68\"}\xf2\x06\x00\x00\x00\x00\x16\x00\x00\x02\x05Event\'__wbg_instanceof_Event_c90f1ac035dd618e\x00\x00\x00\x00\x1b__wbg_type_7df10f9c9c76b0b0\x00\x00\x00\x01\x05Event\x01\x00\x01\x04type\x01\x01\x04this\x04type\x01\x00\x00\x00\x1d__wbg_target_02b2c4e71f788cc6\x00\x00\x00\x01\x05Event\x01\x00\x01\x06target\x01\x01\x04this\x06target\x01\x00\x00\x00$__wbg_currentTarget_273561c7aeba291c\x00\x00\x00\x01\x05Event\x01\x00\x01\rcurrentTarget\x01\x01\x04this\rcurrentTarget\x01\x00\x00\x00!__wbg_eventPhase_5daba2076b317bb8\x00\x00\x00\x01\x05Event\x01\x00\x01\neventPhase\x01\x01\x04this\neventPhase\x01\x00\x00\x00\x1e__wbg_bubbles_fe82e7d7c34a1e7a\x00\x00\x00\x01\x05Event\x01\x00\x01\x07bubbles\x01\x01\x04this\x07bubbles\x01\x00\x00\x00!__wbg_cancelable_cd5b08b0338a243b\x00\x00\x00\x01\x05Event\x01\x00\x01\ncancelable\x01\x01\x04this\ncancelable\x01\x00\x00\x00\'__wbg_defaultPrevented_826d3a084a17b1c2\x00\x00\x00\x01\x05Event\x01\x00\x01\x10defaultPrevented\x01\x01\x04this\x10defaultPrevented\x01\x00\x00\x00\x1f__wbg_composed_c2ca24989db52f93\x00\x00\x00\x01\x05Event\x01\x00\x01\x08composed\x01\x01\x04this\x08composed\x01\x00\x00\x00 __wbg_isTrusted_7b8465dc066a80cd\x00\x00\x00\x01\x05Event\x01\x00\x01\tisTrusted\x01\x01\x04this\tisTrusted\x01\x00\x00\x00 __wbg_timeStamp_3cc01bbb7cc961ab\x00\x00\x00\x01\x05Event\x01\x00\x01\ttimeStamp\x01\x01\x04this\ttimeStamp\x01\x00\x00\x00#__wbg_cancelBubble_ba020b9735aa529e\x00\x00\x00\x01\x05Event\x01\x00\x01\x0ccancelBubble\x01\x01\x04this\x0ccancelBubble\x01\x00\x00\x00&__wbg_setcancelBubble_5e0accd834daddc8\x00\x00\x00\x01\x05Event\x01\x00\x02\x0ccancelBubble\x01\x02\x04this\x05value\x10set_cancelBubble\x01\x00\x00\x00\x1a__wbg_new_964b4876f78388bf\x01\x00\x00\x01\x05Event\x00\x01\x01\x05type_\x03new\x01\x00\x00\x00+__wbg_newwitheventinitdict_a55d9713f613767e\x01\x00\x00\x01\x05Event\x00\x01\x02\x05type_\x0fevent_init_dict\x18new_with_event_init_dict\x01\x00\x00\x00#__wbg_composedPath_48170aeefe733314\x00\x00\x00\x01\x05Event\x01\x00\x00\x01\x01\x04this\x0ccomposedPath\x01\x00\x00\x00 __wbg_initEvent_1a5bf52e43493af0\x00\x00\x00\x01\x05Event\x01\x00\x00\x01\x02\x04this\x05type_\tinitEvent\x01\x00\x00\x00 __wbg_initEvent_55bfd3645d7d74e4\x00\x00\x00\x01\x05Event\x01\x00\x00\x01\x03\x04this\x05type_\x07bubbles\tinitEvent\x01\x00\x00\x00 __wbg_initEvent_4fbe71ddf96fd732\x00\x00\x00\x01\x05Event\x01\x00\x00\x01\x04\x04this\x05type_\x07bubbles\ncancelable\tinitEvent\x01\x00\x00\x00%__wbg_preventDefault_93d06688748bfc14\x00\x00\x00\x01\x05Event\x01\x00\x00\x01\x01\x04this\x0epreventDefault\x01\x00\x00\x00/__wbg_stopImmediatePropagation_fb0954856e0d61b0\x00\x00\x00\x01\x05Event\x01\x00\x00\x01\x01\x04this\x18stopImmediatePropagation\x01\x00\x00\x00&__wbg_stopPropagation_a47dd3b6ffe6b400\x00\x00\x00\x01\x05Event\x01\x00\x00\x01\x01\x04this\x0fstopPropagation\x01\x00\x00\x00\x00\x18web-sys-2ffcad8c6dc62865\x00"
        };
        impl Event {
            ///The `Event.NONE` const.
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            pub const NONE: u16 = 0i64 as u16;
            ///The `Event.CAPTURING_PHASE` const.
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            pub const CAPTURING_PHASE: u16 = 1u64 as u16;
            ///The `Event.AT_TARGET` const.
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            pub const AT_TARGET: u16 = 2u64 as u16;
            ///The `Event.BUBBLING_PHASE` const.
            ///
            ///*This API requires the following crate features to be activated: `Event`*
            pub const BUBBLING_PHASE: u16 = 3u64 as u16;
        }
    }
    #[cfg(feature = "Event")]
    pub use gen_Event::*;
    #[cfg(feature = "EventTarget")]
    #[allow(non_snake_case)]
    mod gen_EventTarget {
        #![allow(unused_imports)]
        use super::*;
        use wasm_bindgen::prelude::*;
        #[allow(bad_style)]
        ///The `EventTarget` class.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget)
        ///
        ///*This API requires the following crate features to be activated: `EventTarget`*
        ///
        #[repr(transparent)]
        #[allow(clippy::all)]
        pub struct EventTarget {
            obj: ::js_sys::Object,
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::fmt::Debug for EventTarget {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    EventTarget {
                        obj: ref __self_0_0,
                    } => {
                        let mut debug_trait_builder = f.debug_struct("EventTarget");
                        let _ = debug_trait_builder.field("obj", &&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::clone::Clone for EventTarget {
            #[inline]
            fn clone(&self) -> EventTarget {
                match *self {
                    EventTarget {
                        obj: ref __self_0_0,
                    } => EventTarget {
                        obj: ::core::clone::Clone::clone(&(*__self_0_0)),
                    },
                }
            }
        }

        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::PartialEq for EventTarget {
            #[inline]
            fn eq(&self, other: &EventTarget) -> bool {
                match *other {
                    EventTarget {
                        obj: ref __self_1_0,
                    } => match *self {
                        EventTarget {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) == (*__self_1_0),
                    },
                }
            }
            #[inline]
            fn ne(&self, other: &EventTarget) -> bool {
                match *other {
                    EventTarget {
                        obj: ref __self_1_0,
                    } => match *self {
                        EventTarget {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) != (*__self_1_0),
                    },
                }
            }
        }

        #[allow(bad_style)]
        #[allow(clippy::all)]
        const __wbg_generated_const_EventTarget: () = {
            use wasm_bindgen::__rt::core;
            use wasm_bindgen::convert::RefFromWasmAbi;
            use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
            use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
            use wasm_bindgen::describe::WasmDescribe;
            use wasm_bindgen::{JsCast, JsValue};
            impl WasmDescribe for EventTarget {
                fn describe() {
                    use wasm_bindgen::describe::*;
                    inform(NAMED_EXTERNREF);
                    inform(11u32);
                    inform(69u32);
                    inform(118u32);
                    inform(101u32);
                    inform(110u32);
                    inform(116u32);
                    inform(84u32);
                    inform(97u32);
                    inform(114u32);
                    inform(103u32);
                    inform(101u32);
                    inform(116u32);
                }
            }
            impl core::ops::Deref for EventTarget {
                type Target = ::js_sys::Object;
                #[inline]
                fn deref(&self) -> &::js_sys::Object {
                    &self.obj
                }
            }
            impl IntoWasmAbi for EventTarget {
                type Abi = <JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    self.obj.into_abi()
                }
            }
            impl OptionIntoWasmAbi for EventTarget {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl<'a> OptionIntoWasmAbi for &'a EventTarget {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl FromWasmAbi for EventTarget {
                type Abi = <JsValue as FromWasmAbi>::Abi;
                #[inline]
                unsafe fn from_abi(js: Self::Abi) -> Self {
                    EventTarget {
                        obj: JsValue::from_abi(js).into(),
                    }
                }
            }
            impl OptionFromWasmAbi for EventTarget {
                #[inline]
                fn is_none(abi: &Self::Abi) -> bool {
                    *abi == 0
                }
            }
            impl<'a> IntoWasmAbi for &'a EventTarget {
                type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    (&self.obj).into_abi()
                }
            }
            impl RefFromWasmAbi for EventTarget {
                type Abi = <JsValue as RefFromWasmAbi>::Abi;
                type Anchor = core::mem::ManuallyDrop<EventTarget>;
                #[inline]
                unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
                    let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
                    core::mem::ManuallyDrop::new(EventTarget {
                        obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
                    })
                }
            }
            impl From<JsValue> for EventTarget {
                #[inline]
                fn from(obj: JsValue) -> EventTarget {
                    EventTarget { obj: obj.into() }
                }
            }
            impl AsRef<JsValue> for EventTarget {
                #[inline]
                fn as_ref(&self) -> &JsValue {
                    self.obj.as_ref()
                }
            }
            impl AsRef<EventTarget> for EventTarget {
                #[inline]
                fn as_ref(&self) -> &EventTarget {
                    self
                }
            }
            impl From<EventTarget> for JsValue {
                #[inline]
                fn from(obj: EventTarget) -> JsValue {
                    obj.obj.into()
                }
            }
            impl JsCast for EventTarget {
                fn instanceof(val: &JsValue) -> bool {
                    #[link(wasm_import_module = "__wbindgen_placeholder__")]
                    #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                    extern "C" {
                        fn __wbg_instanceof_EventTarget_3698adc340efc704(val: u32) -> u32;
                    }
                    unsafe {
                        let idx = val.into_abi();
                        __wbg_instanceof_EventTarget_3698adc340efc704(idx) != 0
                    }
                }
                #[inline]
                fn unchecked_from_js(val: JsValue) -> Self {
                    EventTarget { obj: val.into() }
                }
                #[inline]
                fn unchecked_from_js_ref(val: &JsValue) -> &Self {
                    unsafe { &*(val as *const JsValue as *const EventTarget) }
                }
            }
            ()
        };
        #[allow(clippy::all)]
        impl From<EventTarget> for ::js_sys::Object {
            #[inline]
            fn from(obj: EventTarget) -> ::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<::js_sys::Object> for EventTarget {
            #[inline]
            fn as_ref(&self) -> &::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js_ref(self.as_ref())
            }
        }
        ///The `new EventTarget(..)` constructor, creating a new instance of `EventTarget`.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/EventTarget)
        ///
        ///*This API requires the following crate features to be activated: `EventTarget`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_new_0c294bffb7a1fe86() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(0u32);
            <EventTarget as WasmDescribe>::describe();
        }
        impl EventTarget {
            ///The `new EventTarget(..)` constructor, creating a new instance of `EventTarget`.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/EventTarget)
            ///
            ///*This API requires the following crate features to be activated: `EventTarget`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn new() -> Result<EventTarget, JsValue> {
                ///The `new EventTarget(..)` constructor, creating a new instance of `EventTarget`.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/EventTarget)
                ///
                ///*This API requires the following crate features to be activated: `EventTarget`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_new_0c294bffb7a1fe86(
                    ) -> <EventTarget as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = { __wbg_new_0c294bffb7a1fe86() };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<EventTarget as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `addEventListener()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
        ///
        ///*This API requires the following crate features to be activated: `EventTarget`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_addEventListener_9e7b0c3f65ebc0d7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&EventTarget as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl EventTarget {
            ///The `addEventListener()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
            ///
            ///*This API requires the following crate features to be activated: `EventTarget`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn add_event_listener_with_callback(
                &self,
                type_: &str,
                listener: &::js_sys::Function,
            ) -> Result<(), JsValue> {
                ///The `addEventListener()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
                ///
                ///*This API requires the following crate features to be activated: `EventTarget`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_addEventListener_9e7b0c3f65ebc0d7(
                        this: <&EventTarget as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        listener: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&EventTarget as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let listener =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                listener,
                            );
                        __wbg_addEventListener_9e7b0c3f65ebc0d7(this, type_, listener)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl EventTarget {}
        impl EventTarget {}
        impl EventTarget {}
        ///The `addEventListener()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
        ///
        ///*This API requires the following crate features to be activated: `EventTarget`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_addEventListener_cb2d36c36a655653() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&EventTarget as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl EventTarget {
            ///The `addEventListener()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
            ///
            ///*This API requires the following crate features to be activated: `EventTarget`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn add_event_listener_with_callback_and_bool(
                &self,
                type_: &str,
                listener: &::js_sys::Function,
                options: bool,
            ) -> Result<(), JsValue> {
                ///The `addEventListener()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
                ///
                ///*This API requires the following crate features to be activated: `EventTarget`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_addEventListener_cb2d36c36a655653(
                        this: <&EventTarget as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        listener: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        options: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&EventTarget as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let listener =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                listener,
                            );
                        let options =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(options);
                        __wbg_addEventListener_cb2d36c36a655653(this, type_, listener, options)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl EventTarget {}
        impl EventTarget {}
        impl EventTarget {}
        ///The `addEventListener()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
        ///
        ///*This API requires the following crate features to be activated: `EventTarget`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_addEventListener_1ee029f42ddd26e4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&EventTarget as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <Option<bool> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl EventTarget {
            ///The `addEventListener()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
            ///
            ///*This API requires the following crate features to be activated: `EventTarget`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn add_event_listener_with_callback_and_bool_and_wants_untrusted(
                &self,
                type_: &str,
                listener: &::js_sys::Function,
                options: bool,
                wants_untrusted: Option<bool>,
            ) -> Result<(), JsValue> {
                ///The `addEventListener()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener)
                ///
                ///*This API requires the following crate features to be activated: `EventTarget`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_addEventListener_1ee029f42ddd26e4(
                        this: <&EventTarget as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        listener: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        options: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        wants_untrusted: <Option<bool> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&EventTarget as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let listener =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                listener,
                            );
                        let options =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(options);
                        let wants_untrusted =
                            <Option<bool> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                wants_untrusted,
                            );
                        __wbg_addEventListener_1ee029f42ddd26e4(
                            this,
                            type_,
                            listener,
                            options,
                            wants_untrusted,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl EventTarget {}
        #[cfg(feature = "Event")]
        ///The `dispatchEvent()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent)
        ///
        ///*This API requires the following crate features to be activated: `Event`, `EventTarget`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_dispatchEvent_aca3da6ff77b010c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&EventTarget as WasmDescribe>::describe();
            <&Event as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl EventTarget {
            #[cfg(feature = "Event")]
            ///The `dispatchEvent()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent)
            ///
            ///*This API requires the following crate features to be activated: `Event`, `EventTarget`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dispatch_event(&self, event: &Event) -> Result<bool, JsValue> {
                #[cfg(feature = "Event")]
                ///The `dispatchEvent()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent)
                ///
                ///*This API requires the following crate features to be activated: `Event`, `EventTarget`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dispatchEvent_aca3da6ff77b010c(
                        this: <&EventTarget as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        event: <&Event as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&EventTarget as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let event = <&Event as wasm_bindgen::convert::IntoWasmAbi>::into_abi(event);
                        __wbg_dispatchEvent_aca3da6ff77b010c(this, event)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `removeEventListener()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)
        ///
        ///*This API requires the following crate features to be activated: `EventTarget`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_removeEventListener_e118aefce350c930() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&EventTarget as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl EventTarget {
            ///The `removeEventListener()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)
            ///
            ///*This API requires the following crate features to be activated: `EventTarget`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn remove_event_listener_with_callback(
                &self,
                type_: &str,
                listener: &::js_sys::Function,
            ) -> Result<(), JsValue> {
                ///The `removeEventListener()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)
                ///
                ///*This API requires the following crate features to be activated: `EventTarget`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_removeEventListener_e118aefce350c930(
                        this: <&EventTarget as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        listener: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&EventTarget as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let listener =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                listener,
                            );
                        __wbg_removeEventListener_e118aefce350c930(this, type_, listener)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl EventTarget {}
        impl EventTarget {}
        impl EventTarget {}
        ///The `removeEventListener()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)
        ///
        ///*This API requires the following crate features to be activated: `EventTarget`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_removeEventListener_9ffcd175e0916270() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&EventTarget as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl EventTarget {
            ///The `removeEventListener()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)
            ///
            ///*This API requires the following crate features to be activated: `EventTarget`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn remove_event_listener_with_callback_and_bool(
                &self,
                type_: &str,
                listener: &::js_sys::Function,
                options: bool,
            ) -> Result<(), JsValue> {
                ///The `removeEventListener()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener)
                ///
                ///*This API requires the following crate features to be activated: `EventTarget`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_removeEventListener_9ffcd175e0916270(
                        this: <&EventTarget as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        listener: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        options: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&EventTarget as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let listener =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                listener,
                            );
                        let options =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(options);
                        __wbg_removeEventListener_9ffcd175e0916270(this, type_, listener, options)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl EventTarget {}
        #[allow(non_upper_case_globals)]
        #[cfg(target_arch = "wasm32")]
        #[link_section = "__wasm_bindgen_unstable"]
        #[doc(hidden)]
        #[allow(clippy::all)]
        pub static __WASM_BINDGEN_GENERATED_37c29281907c9639: [u8; 2118usize] = {
            static _INCLUDED_FILES: &[&str] = &[];
            * b".\x00\x00\x00{\"schema_version\":\"0.2.68\",\"version\":\"0.2.68\"}\x10\x08\x00\x00\x00\x00\x13\x00\x00\x02\x0bEventTarget-__wbg_instanceof_EventTarget_3698adc340efc704\x00\x00\x00\x00\x1a__wbg_new_0c294bffb7a1fe86\x01\x00\x00\x01\x0bEventTarget\x00\x01\x00\x03new\x01\x00\x00\x00\'__wbg_addEventListener_9e7b0c3f65ebc0d7\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x03\x04this\x05type_\x08listener\x10addEventListener\x01\x00\x00\x00\'__wbg_addEventListener_bcd74f48f6ffb32c\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x03\x04this\x05type_\x08listener\x10addEventListener\x01\x00\x00\x00\'__wbg_addEventListener_f0baf69c9c7425c9\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x04\x04this\x05type_\x08listener\x07options\x10addEventListener\x01\x00\x00\x00\'__wbg_addEventListener_6b43316e72180c38\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x04\x04this\x05type_\x08listener\x07options\x10addEventListener\x01\x00\x00\x00\'__wbg_addEventListener_cb2d36c36a655653\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x04\x04this\x05type_\x08listener\x07options\x10addEventListener\x01\x00\x00\x00\'__wbg_addEventListener_6231f4a617a940d6\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x04\x04this\x05type_\x08listener\x07options\x10addEventListener\x01\x00\x00\x00\'__wbg_addEventListener_7edaefe483bf3730\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x05\x04this\x05type_\x08listener\x07options\x0fwants_untrusted\x10addEventListener\x01\x00\x00\x00\'__wbg_addEventListener_babcbdff9d7f50db\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x05\x04this\x05type_\x08listener\x07options\x0fwants_untrusted\x10addEventListener\x01\x00\x00\x00\'__wbg_addEventListener_1ee029f42ddd26e4\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x05\x04this\x05type_\x08listener\x07options\x0fwants_untrusted\x10addEventListener\x01\x00\x00\x00\'__wbg_addEventListener_5d99a781f0333df2\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x05\x04this\x05type_\x08listener\x07options\x0fwants_untrusted\x10addEventListener\x01\x00\x00\x00$__wbg_dispatchEvent_aca3da6ff77b010c\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x02\x04this\x05event\rdispatchEvent\x01\x00\x00\x00*__wbg_removeEventListener_e118aefce350c930\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x03\x04this\x05type_\x08listener\x13removeEventListener\x01\x00\x00\x00*__wbg_removeEventListener_a2c5d831c71cc370\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x03\x04this\x05type_\x08listener\x13removeEventListener\x01\x00\x00\x00*__wbg_removeEventListener_973ca63458fd8232\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x04\x04this\x05type_\x08listener\x07options\x13removeEventListener\x01\x00\x00\x00*__wbg_removeEventListener_40cf69c5707380ae\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x04\x04this\x05type_\x08listener\x07options\x13removeEventListener\x01\x00\x00\x00*__wbg_removeEventListener_9ffcd175e0916270\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x04\x04this\x05type_\x08listener\x07options\x13removeEventListener\x01\x00\x00\x00*__wbg_removeEventListener_a03885bd3f5c180a\x01\x00\x00\x01\x0bEventTarget\x01\x00\x00\x01\x04\x04this\x05type_\x08listener\x07options\x13removeEventListener\x01\x00\x00\x00\x00\x18web-sys-2ffcad8c6dc62865\x00"
        };
    }
    #[cfg(feature = "EventTarget")]
    pub use gen_EventTarget::*;
    #[cfg(feature = "HtmlCanvasElement")]
    #[allow(non_snake_case)]
    mod gen_HtmlCanvasElement {
        #![allow(unused_imports)]
        use super::*;
        use wasm_bindgen::prelude::*;
        #[allow(bad_style)]
        ///The `HtmlCanvasElement` class.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
        ///
        #[repr(transparent)]
        #[allow(clippy::all)]
        pub struct HtmlCanvasElement {
            obj: HtmlElement,
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::fmt::Debug for HtmlCanvasElement {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    HtmlCanvasElement {
                        obj: ref __self_0_0,
                    } => {
                        let mut debug_trait_builder = f.debug_struct("HtmlCanvasElement");
                        let _ = debug_trait_builder.field("obj", &&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::clone::Clone for HtmlCanvasElement {
            #[inline]
            fn clone(&self) -> HtmlCanvasElement {
                match *self {
                    HtmlCanvasElement {
                        obj: ref __self_0_0,
                    } => HtmlCanvasElement {
                        obj: ::core::clone::Clone::clone(&(*__self_0_0)),
                    },
                }
            }
        }

        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::PartialEq for HtmlCanvasElement {
            #[inline]
            fn eq(&self, other: &HtmlCanvasElement) -> bool {
                match *other {
                    HtmlCanvasElement {
                        obj: ref __self_1_0,
                    } => match *self {
                        HtmlCanvasElement {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) == (*__self_1_0),
                    },
                }
            }
            #[inline]
            fn ne(&self, other: &HtmlCanvasElement) -> bool {
                match *other {
                    HtmlCanvasElement {
                        obj: ref __self_1_0,
                    } => match *self {
                        HtmlCanvasElement {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) != (*__self_1_0),
                    },
                }
            }
        }

        #[allow(bad_style)]
        #[allow(clippy::all)]
        const __wbg_generated_const_HtmlCanvasElement: () = {
            use wasm_bindgen::__rt::core;
            use wasm_bindgen::convert::RefFromWasmAbi;
            use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
            use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
            use wasm_bindgen::describe::WasmDescribe;
            use wasm_bindgen::{JsCast, JsValue};
            impl WasmDescribe for HtmlCanvasElement {
                fn describe() {
                    use wasm_bindgen::describe::*;
                    inform(NAMED_EXTERNREF);
                    inform(17u32);
                    inform(72u32);
                    inform(84u32);
                    inform(77u32);
                    inform(76u32);
                    inform(67u32);
                    inform(97u32);
                    inform(110u32);
                    inform(118u32);
                    inform(97u32);
                    inform(115u32);
                    inform(69u32);
                    inform(108u32);
                    inform(101u32);
                    inform(109u32);
                    inform(101u32);
                    inform(110u32);
                    inform(116u32);
                }
            }
            impl core::ops::Deref for HtmlCanvasElement {
                type Target = HtmlElement;
                #[inline]
                fn deref(&self) -> &HtmlElement {
                    &self.obj
                }
            }
            impl IntoWasmAbi for HtmlCanvasElement {
                type Abi = <JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    self.obj.into_abi()
                }
            }
            impl OptionIntoWasmAbi for HtmlCanvasElement {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl<'a> OptionIntoWasmAbi for &'a HtmlCanvasElement {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl FromWasmAbi for HtmlCanvasElement {
                type Abi = <JsValue as FromWasmAbi>::Abi;
                #[inline]
                unsafe fn from_abi(js: Self::Abi) -> Self {
                    HtmlCanvasElement {
                        obj: JsValue::from_abi(js).into(),
                    }
                }
            }
            impl OptionFromWasmAbi for HtmlCanvasElement {
                #[inline]
                fn is_none(abi: &Self::Abi) -> bool {
                    *abi == 0
                }
            }
            impl<'a> IntoWasmAbi for &'a HtmlCanvasElement {
                type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    (&self.obj).into_abi()
                }
            }
            impl RefFromWasmAbi for HtmlCanvasElement {
                type Abi = <JsValue as RefFromWasmAbi>::Abi;
                type Anchor = core::mem::ManuallyDrop<HtmlCanvasElement>;
                #[inline]
                unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
                    let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
                    core::mem::ManuallyDrop::new(HtmlCanvasElement {
                        obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
                    })
                }
            }
            impl From<JsValue> for HtmlCanvasElement {
                #[inline]
                fn from(obj: JsValue) -> HtmlCanvasElement {
                    HtmlCanvasElement { obj: obj.into() }
                }
            }
            impl AsRef<JsValue> for HtmlCanvasElement {
                #[inline]
                fn as_ref(&self) -> &JsValue {
                    self.obj.as_ref()
                }
            }
            impl AsRef<HtmlCanvasElement> for HtmlCanvasElement {
                #[inline]
                fn as_ref(&self) -> &HtmlCanvasElement {
                    self
                }
            }
            impl From<HtmlCanvasElement> for JsValue {
                #[inline]
                fn from(obj: HtmlCanvasElement) -> JsValue {
                    obj.obj.into()
                }
            }
            impl JsCast for HtmlCanvasElement {
                fn instanceof(val: &JsValue) -> bool {
                    #[link(wasm_import_module = "__wbindgen_placeholder__")]
                    #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                    extern "C" {
                        fn __wbg_instanceof_HtmlCanvasElement_4f5b5ec6cd53ccf3(val: u32) -> u32;
                    }
                    unsafe {
                        let idx = val.into_abi();
                        __wbg_instanceof_HtmlCanvasElement_4f5b5ec6cd53ccf3(idx) != 0
                    }
                }
                #[inline]
                fn unchecked_from_js(val: JsValue) -> Self {
                    HtmlCanvasElement { obj: val.into() }
                }
                #[inline]
                fn unchecked_from_js_ref(val: &JsValue) -> &Self {
                    unsafe { &*(val as *const JsValue as *const HtmlCanvasElement) }
                }
            }
            ()
        };
        #[allow(clippy::all)]
        impl From<HtmlCanvasElement> for HtmlElement {
            #[inline]
            fn from(obj: HtmlCanvasElement) -> HtmlElement {
                use wasm_bindgen::JsCast;
                HtmlElement::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<HtmlElement> for HtmlCanvasElement {
            #[inline]
            fn as_ref(&self) -> &HtmlElement {
                use wasm_bindgen::JsCast;
                HtmlElement::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<HtmlCanvasElement> for Element {
            #[inline]
            fn from(obj: HtmlCanvasElement) -> Element {
                use wasm_bindgen::JsCast;
                Element::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<Element> for HtmlCanvasElement {
            #[inline]
            fn as_ref(&self) -> &Element {
                use wasm_bindgen::JsCast;
                Element::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<HtmlCanvasElement> for Node {
            #[inline]
            fn from(obj: HtmlCanvasElement) -> Node {
                use wasm_bindgen::JsCast;
                Node::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<Node> for HtmlCanvasElement {
            #[inline]
            fn as_ref(&self) -> &Node {
                use wasm_bindgen::JsCast;
                Node::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<HtmlCanvasElement> for EventTarget {
            #[inline]
            fn from(obj: HtmlCanvasElement) -> EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<EventTarget> for HtmlCanvasElement {
            #[inline]
            fn as_ref(&self) -> &EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<HtmlCanvasElement> for ::js_sys::Object {
            #[inline]
            fn from(obj: HtmlCanvasElement) -> ::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<::js_sys::Object> for HtmlCanvasElement {
            #[inline]
            fn as_ref(&self) -> &::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js_ref(self.as_ref())
            }
        }
        ///Getter for the `width` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_width_a22f9855caa54b53() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <u32 as WasmDescribe>::describe();
        }
        impl HtmlCanvasElement {
            ///Getter for the `width` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn width(&self) -> u32 {
                ///Getter for the `width` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_width_a22f9855caa54b53(
                        this: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                self,
                            );
                        __wbg_width_a22f9855caa54b53(this)
                    };
                    <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `width` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setwidth_5f26a8ba9dbfa0d0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <u32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlCanvasElement {
            ///Setter for the `width` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_width(&self, value: u32) {
                ///Setter for the `width` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setwidth_5f26a8ba9dbfa0d0(
                        this: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                self,
                            );
                        let value = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setwidth_5f26a8ba9dbfa0d0(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `height` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_height_9a404a6b3c61c7ef() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <u32 as WasmDescribe>::describe();
        }
        impl HtmlCanvasElement {
            ///Getter for the `height` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn height(&self) -> u32 {
                ///Getter for the `height` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_height_9a404a6b3c61c7ef(
                        this: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                self,
                            );
                        __wbg_height_9a404a6b3c61c7ef(this)
                    };
                    <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `height` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setheight_70f62727aa9383c2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <u32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlCanvasElement {
            ///Setter for the `height` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_height(&self, value: u32) {
                ///Setter for the `height` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setheight_70f62727aa9383c2(
                        this: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                self,
                            );
                        let value = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setheight_70f62727aa9383c2(this, value)
                    };
                    ()
                }
            }
        }
        ///The `getContext()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_getContext_37ca0870acb096d9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<::js_sys::Object> as WasmDescribe>::describe();
        }
        impl HtmlCanvasElement {
            ///The `getContext()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn get_context(
                &self,
                context_id: &str,
            ) -> Result<Option<::js_sys::Object>, JsValue> {
                ///The `getContext()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_getContext_37ca0870acb096d9(
                        this: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        context_id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                self,
                            );
                        let context_id =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(context_id);
                        __wbg_getContext_37ca0870acb096d9(this, context_id)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(
                        <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                            _ret,
                        ),
                    )
                }
            }
        }
        ///The `getContext()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_getContext_e7747f5b022c18e9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <Option<::js_sys::Object> as WasmDescribe>::describe();
        }
        impl HtmlCanvasElement {
            ///The `getContext()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn get_context_with_context_options(
                &self,
                context_id: &str,
                context_options: &::wasm_bindgen::JsValue,
            ) -> Result<Option<::js_sys::Object>, JsValue> {
                ///The `getContext()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_getContext_e7747f5b022c18e9(
                        this: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        context_id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        context_options : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                self,
                            );
                        let context_id =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(context_id);
                        let context_options = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (context_options) ;
                        __wbg_getContext_e7747f5b022c18e9(this, context_id, context_options)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(
                        <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                            _ret,
                        ),
                    )
                }
            }
        }
        ///The `toBlob()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_toBlob_dea698af8d9f77dd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlCanvasElement {
            ///The `toBlob()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn to_blob(&self, callback: &::js_sys::Function) -> Result<(), JsValue> {
                ///The `toBlob()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_toBlob_dea698af8d9f77dd(
                        this: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                self,
                            );
                        let callback =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                callback,
                            );
                        __wbg_toBlob_dea698af8d9f77dd(this, callback)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `toBlob()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_toBlob_a480d80c04fd44a2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlCanvasElement {
            ///The `toBlob()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn to_blob_with_type(
                &self,
                callback: &::js_sys::Function,
                type_: &str,
            ) -> Result<(), JsValue> {
                ///The `toBlob()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_toBlob_a480d80c04fd44a2(
                        this: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                self,
                            );
                        let callback =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                callback,
                            );
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        __wbg_toBlob_a480d80c04fd44a2(this, callback, type_)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `toBlob()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_toBlob_c6216b6a23b89724() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlCanvasElement {
            ///The `toBlob()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn to_blob_with_type_and_encoder_options(
                &self,
                callback: &::js_sys::Function,
                type_: &str,
                encoder_options: &::wasm_bindgen::JsValue,
            ) -> Result<(), JsValue> {
                ///The `toBlob()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_toBlob_c6216b6a23b89724(
                        this: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        encoder_options : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                self,
                            );
                        let callback =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                callback,
                            );
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let encoder_options = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (encoder_options) ;
                        __wbg_toBlob_c6216b6a23b89724(this, callback, type_, encoder_options)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `toDataURL()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_toDataURL_36e2b0dea25e6a44() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl HtmlCanvasElement {
            ///The `toDataURL()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn to_data_url(&self) -> Result<String, JsValue> {
                ///The `toDataURL()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_toDataURL_36e2b0dea25e6a44(
                        this: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                self,
                            );
                        __wbg_toDataURL_36e2b0dea25e6a44(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        ///The `toDataURL()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_toDataURL_d2258d6973364b4a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl HtmlCanvasElement {
            ///The `toDataURL()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn to_data_url_with_type(&self, type_: &str) -> Result<String, JsValue> {
                ///The `toDataURL()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_toDataURL_d2258d6973364b4a(
                        this: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                self,
                            );
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        __wbg_toDataURL_d2258d6973364b4a(this, type_)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        ///The `toDataURL()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_toDataURL_c35417b37db65ae6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl HtmlCanvasElement {
            ///The `toDataURL()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn to_data_url_with_type_and_encoder_options(
                &self,
                type_: &str,
                encoder_options: &::wasm_bindgen::JsValue,
            ) -> Result<String, JsValue> {
                ///The `toDataURL()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_toDataURL_c35417b37db65ae6(
                        this: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        encoder_options : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                self,
                            );
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let encoder_options = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (encoder_options) ;
                        __wbg_toDataURL_c35417b37db65ae6(this, type_, encoder_options)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        impl HtmlCanvasElement {}
        #[allow(non_upper_case_globals)]
        #[cfg(target_arch = "wasm32")]
        #[link_section = "__wasm_bindgen_unstable"]
        #[doc(hidden)]
        #[allow(clippy::all)]
        pub static __WASM_BINDGEN_GENERATED_ab15df22fd5ccd0b: [u8; 1353usize] = {
            static _INCLUDED_FILES: &[&str] = &[];
            * b".\x00\x00\x00{\"schema_version\":\"0.2.68\",\"version\":\"0.2.68\"}\x13\x05\x00\x00\x00\x00\x0e\x00\x00\x02\x11HTMLCanvasElement3__wbg_instanceof_HtmlCanvasElement_4f5b5ec6cd53ccf3\x00\x00\x00\x00\x1c__wbg_width_a22f9855caa54b53\x00\x00\x00\x01\x11HTMLCanvasElement\x01\x00\x01\x05width\x01\x01\x04this\x05width\x01\x00\x00\x00\x1f__wbg_setwidth_5f26a8ba9dbfa0d0\x00\x00\x00\x01\x11HTMLCanvasElement\x01\x00\x02\x05width\x01\x02\x04this\x05value\tset_width\x01\x00\x00\x00\x1d__wbg_height_9a404a6b3c61c7ef\x00\x00\x00\x01\x11HTMLCanvasElement\x01\x00\x01\x06height\x01\x01\x04this\x06height\x01\x00\x00\x00 __wbg_setheight_70f62727aa9383c2\x00\x00\x00\x01\x11HTMLCanvasElement\x01\x00\x02\x06height\x01\x02\x04this\x05value\nset_height\x01\x00\x00\x00!__wbg_getContext_37ca0870acb096d9\x01\x00\x00\x01\x11HTMLCanvasElement\x01\x00\x00\x01\x02\x04this\ncontext_id\ngetContext\x01\x00\x00\x00!__wbg_getContext_e7747f5b022c18e9\x01\x00\x00\x01\x11HTMLCanvasElement\x01\x00\x00\x01\x03\x04this\ncontext_id\x0fcontext_options\ngetContext\x01\x00\x00\x00\x1d__wbg_toBlob_dea698af8d9f77dd\x01\x00\x00\x01\x11HTMLCanvasElement\x01\x00\x00\x01\x02\x04this\x08callback\x06toBlob\x01\x00\x00\x00\x1d__wbg_toBlob_a480d80c04fd44a2\x01\x00\x00\x01\x11HTMLCanvasElement\x01\x00\x00\x01\x03\x04this\x08callback\x05type_\x06toBlob\x01\x00\x00\x00\x1d__wbg_toBlob_c6216b6a23b89724\x01\x00\x00\x01\x11HTMLCanvasElement\x01\x00\x00\x01\x04\x04this\x08callback\x05type_\x0fencoder_options\x06toBlob\x01\x00\x00\x00 __wbg_toDataURL_36e2b0dea25e6a44\x01\x00\x00\x01\x11HTMLCanvasElement\x01\x00\x00\x01\x01\x04this\ttoDataURL\x01\x00\x00\x00 __wbg_toDataURL_d2258d6973364b4a\x01\x00\x00\x01\x11HTMLCanvasElement\x01\x00\x00\x01\x02\x04this\x05type_\ttoDataURL\x01\x00\x00\x00 __wbg_toDataURL_c35417b37db65ae6\x01\x00\x00\x01\x11HTMLCanvasElement\x01\x00\x00\x01\x03\x04this\x05type_\x0fencoder_options\ttoDataURL\x01\x00\x00\x001__wbg_transferControlToOffscreen_135e3c8a13d12de5\x01\x00\x00\x01\x11HTMLCanvasElement\x01\x00\x00\x01\x01\x04this\x1atransferControlToOffscreen\x01\x00\x00\x00\x00\x18web-sys-2ffcad8c6dc62865\x00"
        };
    }
    #[cfg(feature = "HtmlCanvasElement")]
    pub use gen_HtmlCanvasElement::*;
    #[cfg(feature = "HtmlElement")]
    #[allow(non_snake_case)]
    mod gen_HtmlElement {
        #![allow(unused_imports)]
        use super::*;
        use wasm_bindgen::prelude::*;
        #[allow(bad_style)]
        ///The `HtmlElement` class.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        ///
        #[repr(transparent)]
        #[allow(clippy::all)]
        pub struct HtmlElement {
            obj: Element,
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::fmt::Debug for HtmlElement {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    HtmlElement {
                        obj: ref __self_0_0,
                    } => {
                        let mut debug_trait_builder = f.debug_struct("HtmlElement");
                        let _ = debug_trait_builder.field("obj", &&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::clone::Clone for HtmlElement {
            #[inline]
            fn clone(&self) -> HtmlElement {
                match *self {
                    HtmlElement {
                        obj: ref __self_0_0,
                    } => HtmlElement {
                        obj: ::core::clone::Clone::clone(&(*__self_0_0)),
                    },
                }
            }
        }

        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::PartialEq for HtmlElement {
            #[inline]
            fn eq(&self, other: &HtmlElement) -> bool {
                match *other {
                    HtmlElement {
                        obj: ref __self_1_0,
                    } => match *self {
                        HtmlElement {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) == (*__self_1_0),
                    },
                }
            }
            #[inline]
            fn ne(&self, other: &HtmlElement) -> bool {
                match *other {
                    HtmlElement {
                        obj: ref __self_1_0,
                    } => match *self {
                        HtmlElement {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) != (*__self_1_0),
                    },
                }
            }
        }

        #[allow(bad_style)]
        #[allow(clippy::all)]
        const __wbg_generated_const_HtmlElement: () = {
            use wasm_bindgen::__rt::core;
            use wasm_bindgen::convert::RefFromWasmAbi;
            use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
            use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
            use wasm_bindgen::describe::WasmDescribe;
            use wasm_bindgen::{JsCast, JsValue};
            impl WasmDescribe for HtmlElement {
                fn describe() {
                    use wasm_bindgen::describe::*;
                    inform(NAMED_EXTERNREF);
                    inform(11u32);
                    inform(72u32);
                    inform(84u32);
                    inform(77u32);
                    inform(76u32);
                    inform(69u32);
                    inform(108u32);
                    inform(101u32);
                    inform(109u32);
                    inform(101u32);
                    inform(110u32);
                    inform(116u32);
                }
            }
            impl core::ops::Deref for HtmlElement {
                type Target = Element;
                #[inline]
                fn deref(&self) -> &Element {
                    &self.obj
                }
            }
            impl IntoWasmAbi for HtmlElement {
                type Abi = <JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    self.obj.into_abi()
                }
            }
            impl OptionIntoWasmAbi for HtmlElement {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl<'a> OptionIntoWasmAbi for &'a HtmlElement {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl FromWasmAbi for HtmlElement {
                type Abi = <JsValue as FromWasmAbi>::Abi;
                #[inline]
                unsafe fn from_abi(js: Self::Abi) -> Self {
                    HtmlElement {
                        obj: JsValue::from_abi(js).into(),
                    }
                }
            }
            impl OptionFromWasmAbi for HtmlElement {
                #[inline]
                fn is_none(abi: &Self::Abi) -> bool {
                    *abi == 0
                }
            }
            impl<'a> IntoWasmAbi for &'a HtmlElement {
                type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    (&self.obj).into_abi()
                }
            }
            impl RefFromWasmAbi for HtmlElement {
                type Abi = <JsValue as RefFromWasmAbi>::Abi;
                type Anchor = core::mem::ManuallyDrop<HtmlElement>;
                #[inline]
                unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
                    let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
                    core::mem::ManuallyDrop::new(HtmlElement {
                        obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
                    })
                }
            }
            impl From<JsValue> for HtmlElement {
                #[inline]
                fn from(obj: JsValue) -> HtmlElement {
                    HtmlElement { obj: obj.into() }
                }
            }
            impl AsRef<JsValue> for HtmlElement {
                #[inline]
                fn as_ref(&self) -> &JsValue {
                    self.obj.as_ref()
                }
            }
            impl AsRef<HtmlElement> for HtmlElement {
                #[inline]
                fn as_ref(&self) -> &HtmlElement {
                    self
                }
            }
            impl From<HtmlElement> for JsValue {
                #[inline]
                fn from(obj: HtmlElement) -> JsValue {
                    obj.obj.into()
                }
            }
            impl JsCast for HtmlElement {
                fn instanceof(val: &JsValue) -> bool {
                    #[link(wasm_import_module = "__wbindgen_placeholder__")]
                    #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                    extern "C" {
                        fn __wbg_instanceof_HtmlElement_9cd64b297a10eb1e(val: u32) -> u32;
                    }
                    unsafe {
                        let idx = val.into_abi();
                        __wbg_instanceof_HtmlElement_9cd64b297a10eb1e(idx) != 0
                    }
                }
                #[inline]
                fn unchecked_from_js(val: JsValue) -> Self {
                    HtmlElement { obj: val.into() }
                }
                #[inline]
                fn unchecked_from_js_ref(val: &JsValue) -> &Self {
                    unsafe { &*(val as *const JsValue as *const HtmlElement) }
                }
            }
            ()
        };
        #[allow(clippy::all)]
        impl From<HtmlElement> for Element {
            #[inline]
            fn from(obj: HtmlElement) -> Element {
                use wasm_bindgen::JsCast;
                Element::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<Element> for HtmlElement {
            #[inline]
            fn as_ref(&self) -> &Element {
                use wasm_bindgen::JsCast;
                Element::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<HtmlElement> for Node {
            #[inline]
            fn from(obj: HtmlElement) -> Node {
                use wasm_bindgen::JsCast;
                Node::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<Node> for HtmlElement {
            #[inline]
            fn as_ref(&self) -> &Node {
                use wasm_bindgen::JsCast;
                Node::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<HtmlElement> for EventTarget {
            #[inline]
            fn from(obj: HtmlElement) -> EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<EventTarget> for HtmlElement {
            #[inline]
            fn as_ref(&self) -> &EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<HtmlElement> for ::js_sys::Object {
            #[inline]
            fn from(obj: HtmlElement) -> ::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<::js_sys::Object> for HtmlElement {
            #[inline]
            fn as_ref(&self) -> &::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js_ref(self.as_ref())
            }
        }
        ///Getter for the `title` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_title_ebf722f7ebc5b6a0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `title` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn title(&self) -> String {
                ///Getter for the `title` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_title_ebf722f7ebc5b6a0(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_title_ebf722f7ebc5b6a0(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `title` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_settitle_9f554deab9873ff5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `title` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_title(&self, value: &str) {
                ///Setter for the `title` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_settitle_9f554deab9873ff5(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_settitle_9f554deab9873ff5(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `lang` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lang_b3108479a08dbf7f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `lang` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn lang(&self) -> String {
                ///Getter for the `lang` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lang_b3108479a08dbf7f(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_lang_b3108479a08dbf7f(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `lang` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setlang_48f4f027ce0fb431() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `lang` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_lang(&self, value: &str) {
                ///Setter for the `lang` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setlang_48f4f027ce0fb431(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setlang_48f4f027ce0fb431(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `dir` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_dir_27be405bcd957e41() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `dir` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dir(&self) -> String {
                ///Getter for the `dir` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dir_27be405bcd957e41(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_dir_27be405bcd957e41(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `dir` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setdir_71690acb002c8664() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `dir` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_dir(&self, value: &str) {
                ///Setter for the `dir` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setdir_71690acb002c8664(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setdir_71690acb002c8664(this, value)
                    };
                    ()
                }
            }
        }
        impl HtmlElement {}
        ///Getter for the `innerText` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_innerText_cff90c487875523e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `innerText` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn inner_text(&self) -> String {
                ///Getter for the `innerText` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_innerText_cff90c487875523e(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_innerText_cff90c487875523e(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `innerText` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setinnerText_f2b56447f815dc9e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `innerText` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_inner_text(&self, value: &str) {
                ///Setter for the `innerText` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setinnerText_f2b56447f815dc9e(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setinnerText_f2b56447f815dc9e(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `hidden` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_hidden_61449e189249c287() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `hidden` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn hidden(&self) -> bool {
                ///Getter for the `hidden` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_hidden_61449e189249c287(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_hidden_61449e189249c287(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `hidden` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_sethidden_912c0ab43cd6ed09() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `hidden` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_hidden(&self, value: bool) {
                ///Setter for the `hidden` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_sethidden_912c0ab43cd6ed09(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_sethidden_912c0ab43cd6ed09(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `tabIndex` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_tabIndex_ed6baeff06afe143() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `tabIndex` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn tab_index(&self) -> i32 {
                ///Getter for the `tabIndex` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_tabIndex_ed6baeff06afe143(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_tabIndex_ed6baeff06afe143(this)
                    };
                    <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `tabIndex` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_settabIndex_b3ed60b55f3ff661() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `tabIndex` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_tab_index(&self, value: i32) {
                ///Setter for the `tabIndex` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_settabIndex_b3ed60b55f3ff661(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_settabIndex_b3ed60b55f3ff661(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `accessKey` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKey)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_accessKey_71de7ac2edb5b19f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `accessKey` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKey)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn access_key(&self) -> String {
                ///Getter for the `accessKey` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKey)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_accessKey_71de7ac2edb5b19f(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_accessKey_71de7ac2edb5b19f(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `accessKey` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKey)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setaccessKey_f0aeb6a015d7254c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `accessKey` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKey)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_access_key(&self, value: &str) {
                ///Setter for the `accessKey` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKey)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setaccessKey_f0aeb6a015d7254c(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setaccessKey_f0aeb6a015d7254c(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `accessKeyLabel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKeyLabel)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_accessKeyLabel_193b56d6f23ff9d3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `accessKeyLabel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKeyLabel)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn access_key_label(&self) -> String {
                ///Getter for the `accessKeyLabel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKeyLabel)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_accessKeyLabel_193b56d6f23ff9d3(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_accessKeyLabel_193b56d6f23ff9d3(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `draggable` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/draggable)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_draggable_a0808fbd4cae790c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `draggable` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/draggable)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn draggable(&self) -> bool {
                ///Getter for the `draggable` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/draggable)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_draggable_a0808fbd4cae790c(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_draggable_a0808fbd4cae790c(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `draggable` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/draggable)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setdraggable_2628e5cbc13bd5ce() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `draggable` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/draggable)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_draggable(&self, value: bool) {
                ///Setter for the `draggable` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/draggable)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setdraggable_2628e5cbc13bd5ce(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setdraggable_2628e5cbc13bd5ce(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `contentEditable` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_contentEditable_6e6d3c1ffe28f7ee() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `contentEditable` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn content_editable(&self) -> String {
                ///Getter for the `contentEditable` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_contentEditable_6e6d3c1ffe28f7ee(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_contentEditable_6e6d3c1ffe28f7ee(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `contentEditable` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setcontentEditable_94909fd81044a6fc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `contentEditable` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_content_editable(&self, value: &str) {
                ///Setter for the `contentEditable` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setcontentEditable_94909fd81044a6fc(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setcontentEditable_94909fd81044a6fc(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `isContentEditable` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/isContentEditable)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_isContentEditable_d9ae30f7ecb12fc5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `isContentEditable` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/isContentEditable)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn is_content_editable(&self) -> bool {
                ///Getter for the `isContentEditable` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/isContentEditable)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_isContentEditable_d9ae30f7ecb12fc5(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_isContentEditable_d9ae30f7ecb12fc5(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `spellcheck` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/spellcheck)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_spellcheck_0ba452ab33600433() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `spellcheck` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/spellcheck)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn spellcheck(&self) -> bool {
                ///Getter for the `spellcheck` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/spellcheck)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_spellcheck_0ba452ab33600433(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_spellcheck_0ba452ab33600433(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `spellcheck` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/spellcheck)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setspellcheck_9b22ed6da981d69a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `spellcheck` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/spellcheck)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_spellcheck(&self, value: bool) {
                ///Setter for the `spellcheck` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/spellcheck)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setspellcheck_9b22ed6da981d69a(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setspellcheck_9b22ed6da981d69a(this, value)
                    };
                    ()
                }
            }
        }
        impl HtmlElement {}
        ///Getter for the `offsetParent` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_offsetParent_bcacab7989166f64() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `offsetParent` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn offset_parent(&self) -> Option<Element> {
                ///Getter for the `offsetParent` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_offsetParent_bcacab7989166f64(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_offsetParent_bcacab7989166f64(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `offsetTop` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_offsetTop_1027e482ec905ab8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `offsetTop` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn offset_top(&self) -> i32 {
                ///Getter for the `offsetTop` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetTop)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_offsetTop_1027e482ec905ab8(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_offsetTop_1027e482ec905ab8(this)
                    };
                    <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `offsetLeft` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetLeft)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_offsetLeft_8b586e4a8357d02d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `offsetLeft` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetLeft)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn offset_left(&self) -> i32 {
                ///Getter for the `offsetLeft` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetLeft)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_offsetLeft_8b586e4a8357d02d(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_offsetLeft_8b586e4a8357d02d(this)
                    };
                    <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `offsetWidth` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_offsetWidth_23360c2e25b49ca5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `offsetWidth` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn offset_width(&self) -> i32 {
                ///Getter for the `offsetWidth` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_offsetWidth_23360c2e25b49ca5(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_offsetWidth_23360c2e25b49ca5(this)
                    };
                    <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `offsetHeight` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_offsetHeight_12da3cbaaaaefe5d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `offsetHeight` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn offset_height(&self) -> i32 {
                ///Getter for the `offsetHeight` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_offsetHeight_12da3cbaaaaefe5d(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_offsetHeight_12da3cbaaaaefe5d(this)
                    };
                    <i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `oncopy` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oncopy_7b3a8ed17ab871ac() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `oncopy` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oncopy(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oncopy` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oncopy_7b3a8ed17ab871ac(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oncopy_7b3a8ed17ab871ac(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oncopy` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoncopy_ca781cb0cefa386a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `oncopy` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oncopy(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oncopy` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncopy)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoncopy_ca781cb0cefa386a(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoncopy_ca781cb0cefa386a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oncut` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oncut_bdb85a99fa7c5f81() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `oncut` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oncut(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oncut` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oncut_bdb85a99fa7c5f81(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oncut_bdb85a99fa7c5f81(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oncut` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoncut_41bb2808635b1832() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `oncut` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oncut(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oncut` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoncut_41bb2808635b1832(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoncut_41bb2808635b1832(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpaste` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpaste_0c62af1b8e7a11e1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onpaste` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpaste(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpaste` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpaste_0c62af1b8e7a11e1(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpaste_0c62af1b8e7a11e1(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpaste` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpaste_e41dccebcd720fda() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onpaste` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpaste(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpaste` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpaste_e41dccebcd720fda(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpaste_e41dccebcd720fda(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onabort` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onabort)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onabort_a925c1667f0b0aba() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onabort` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onabort)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onabort(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onabort` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onabort)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onabort_a925c1667f0b0aba(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onabort_a925c1667f0b0aba(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onabort` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onabort)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonabort_f889511196a6d9e5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onabort` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onabort)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onabort(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onabort` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onabort)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonabort_f889511196a6d9e5(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonabort_f889511196a6d9e5(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onblur` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onblur)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onblur_adbf09293bc01bad() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onblur` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onblur)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onblur(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onblur` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onblur)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onblur_adbf09293bc01bad(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onblur_adbf09293bc01bad(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onblur` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onblur)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonblur_81997e499437d2a8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onblur` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onblur)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onblur(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onblur` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onblur)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonblur_81997e499437d2a8(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonblur_81997e499437d2a8(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onfocus` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onfocus)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onfocus_c2dc5ed6ad1cd7bc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onfocus` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onfocus)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onfocus(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onfocus` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onfocus)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onfocus_c2dc5ed6ad1cd7bc(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onfocus_c2dc5ed6ad1cd7bc(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onfocus` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onfocus)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonfocus_5c7d3a8231e78c14() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onfocus` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onfocus)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onfocus(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onfocus` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onfocus)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonfocus_5c7d3a8231e78c14(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonfocus_5c7d3a8231e78c14(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onauxclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onauxclick)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onauxclick_d9297fc2a5889380() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onauxclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onauxclick)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onauxclick(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onauxclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onauxclick)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onauxclick_d9297fc2a5889380(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onauxclick_d9297fc2a5889380(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onauxclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onauxclick)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonauxclick_635410e84c65050b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onauxclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onauxclick)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onauxclick(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onauxclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onauxclick)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonauxclick_635410e84c65050b(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonauxclick_635410e84c65050b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oncanplay` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncanplay)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oncanplay_a80e351279262511() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `oncanplay` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncanplay)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oncanplay(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oncanplay` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncanplay)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oncanplay_a80e351279262511(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oncanplay_a80e351279262511(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oncanplay` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncanplay)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoncanplay_c97aed271c9f3dc9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `oncanplay` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncanplay)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oncanplay(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oncanplay` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncanplay)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoncanplay_c97aed271c9f3dc9(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoncanplay_c97aed271c9f3dc9(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oncanplaythrough` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncanplaythrough)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oncanplaythrough_73231f77263f7e55() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `oncanplaythrough` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncanplaythrough)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oncanplaythrough(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oncanplaythrough` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncanplaythrough)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oncanplaythrough_73231f77263f7e55(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oncanplaythrough_73231f77263f7e55(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oncanplaythrough` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncanplaythrough)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoncanplaythrough_e93142d7814c4730() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `oncanplaythrough` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncanplaythrough)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oncanplaythrough(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oncanplaythrough` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncanplaythrough)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoncanplaythrough_e93142d7814c4730(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoncanplaythrough_e93142d7814c4730(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onchange)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onchange_07fe8fb12ecd8aac() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onchange)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onchange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onchange)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onchange_07fe8fb12ecd8aac(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onchange_07fe8fb12ecd8aac(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onchange)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonchange_6ba4af224eb77197() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onchange)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onchange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onchange)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonchange_6ba4af224eb77197(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonchange_6ba4af224eb77197(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onclick)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onclick_884dd4cb4b458b18() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onclick)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onclick(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onclick)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onclick_884dd4cb4b458b18(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onclick_884dd4cb4b458b18(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onclick)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonclick_5cb400945e687587() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onclick)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onclick(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onclick)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonclick_5cb400945e687587(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonclick_5cb400945e687587(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onclose` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onclose)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onclose_0ba513c6a0a14e4c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onclose` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onclose)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onclose(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onclose` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onclose)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onclose_0ba513c6a0a14e4c(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onclose_0ba513c6a0a14e4c(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onclose` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onclose)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonclose_b669e68396de32f6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onclose` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onclose)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onclose(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onclose` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onclose)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonclose_b669e68396de32f6(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonclose_b669e68396de32f6(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oncontextmenu` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncontextmenu)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oncontextmenu_f032bf7d825c276e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `oncontextmenu` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncontextmenu)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oncontextmenu(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oncontextmenu` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncontextmenu)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oncontextmenu_f032bf7d825c276e(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oncontextmenu_f032bf7d825c276e(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oncontextmenu` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncontextmenu)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoncontextmenu_65f08938aa485207() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `oncontextmenu` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncontextmenu)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oncontextmenu(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oncontextmenu` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncontextmenu)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoncontextmenu_65f08938aa485207(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoncontextmenu_65f08938aa485207(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondblclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondblclick)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondblclick_c2247c1ae74a478d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ondblclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondblclick)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondblclick(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondblclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondblclick)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondblclick_c2247c1ae74a478d(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondblclick_c2247c1ae74a478d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondblclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondblclick)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondblclick_a0f2700bfca980ce() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ondblclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondblclick)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondblclick(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondblclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondblclick)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondblclick_a0f2700bfca980ce(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondblclick_a0f2700bfca980ce(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondrag` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondrag)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondrag_fcece04f90d5a7a4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ondrag` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondrag)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondrag(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondrag` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondrag)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondrag_fcece04f90d5a7a4(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondrag_fcece04f90d5a7a4(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondrag` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondrag)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondrag_080ad95ba48cb659() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ondrag` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondrag)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondrag(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondrag` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondrag)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondrag_080ad95ba48cb659(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondrag_080ad95ba48cb659(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragend_ae72dfb314dbc1fc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ondragend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragend_ae72dfb314dbc1fc(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragend_ae72dfb314dbc1fc(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragend_5fa4c19a72cdf3b8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ondragend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragend_5fa4c19a72cdf3b8(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragend_5fa4c19a72cdf3b8(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragenter)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragenter_e902a97747968536() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ondragenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragenter)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragenter(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragenter)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragenter_e902a97747968536(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragenter_e902a97747968536(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragenter)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragenter_2262162aaee5a260() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ondragenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragenter)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragenter(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragenter)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragenter_2262162aaee5a260(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragenter_2262162aaee5a260(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragexit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragexit)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragexit_44e1e894831005ad() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ondragexit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragexit)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragexit(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragexit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragexit)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragexit_44e1e894831005ad(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragexit_44e1e894831005ad(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragexit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragexit)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragexit_336a01c8867a8f9b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ondragexit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragexit)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragexit(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragexit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragexit)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragexit_336a01c8867a8f9b(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragexit_336a01c8867a8f9b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragleave)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragleave_1a2a72375ae961b6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ondragleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragleave)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragleave(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragleave)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragleave_1a2a72375ae961b6(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragleave_1a2a72375ae961b6(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragleave)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragleave_acfeb49f2391c5fc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ondragleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragleave)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragleave(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragleave)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragleave_acfeb49f2391c5fc(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragleave_acfeb49f2391c5fc(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragover)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragover_a61096049417238b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ondragover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragover)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragover(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragover)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragover_a61096049417238b(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragover_a61096049417238b(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragover)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragover_b6d6ff5a507bcf7e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ondragover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragover)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragover(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragover)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragover_b6d6ff5a507bcf7e(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragover_b6d6ff5a507bcf7e(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragstart_5eeabc73c5701963() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ondragstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragstart_5eeabc73c5701963(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragstart_5eeabc73c5701963(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragstart_2c3de15ea9277cae() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ondragstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondragstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragstart_2c3de15ea9277cae(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragstart_2c3de15ea9277cae(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondrop` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondrop)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondrop_1dd0a5081ecf3f13() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ondrop` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondrop)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondrop(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondrop` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondrop)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondrop_1dd0a5081ecf3f13(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondrop_1dd0a5081ecf3f13(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondrop` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondrop)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondrop_3490e2e606255886() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ondrop` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondrop)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondrop(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondrop` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondrop)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondrop_3490e2e606255886(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondrop_3490e2e606255886(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondurationchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondurationchange)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondurationchange_a034a442cb8a3d9b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ondurationchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondurationchange)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondurationchange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondurationchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondurationchange)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondurationchange_a034a442cb8a3d9b(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondurationchange_a034a442cb8a3d9b(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondurationchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondurationchange)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondurationchange_b8c0b16ca3d2f28c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ondurationchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondurationchange)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondurationchange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondurationchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ondurationchange)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondurationchange_b8c0b16ca3d2f28c(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondurationchange_b8c0b16ca3d2f28c(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onemptied` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onemptied)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onemptied_37362c456185fa70() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onemptied` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onemptied)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onemptied(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onemptied` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onemptied)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onemptied_37362c456185fa70(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onemptied_37362c456185fa70(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onemptied` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onemptied)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonemptied_a1647ee682123de0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onemptied` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onemptied)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onemptied(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onemptied` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onemptied)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonemptied_a1647ee682123de0(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonemptied_a1647ee682123de0(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onended` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onended)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onended_21cf50432e49f6e2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onended` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onended)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onended(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onended` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onended)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onended_21cf50432e49f6e2(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onended_21cf50432e49f6e2(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onended` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onended)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonended_c968bba11bc35bc7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onended` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onended)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onended(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onended` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onended)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonended_c968bba11bc35bc7(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonended_c968bba11bc35bc7(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oninput` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oninput)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oninput_7fd41e8ea8811dc0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `oninput` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oninput)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oninput(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oninput` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oninput)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oninput_7fd41e8ea8811dc0(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oninput_7fd41e8ea8811dc0(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oninput` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oninput)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoninput_cb5303c5eb0f44a1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `oninput` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oninput)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oninput(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oninput` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oninput)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoninput_cb5303c5eb0f44a1(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoninput_cb5303c5eb0f44a1(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oninvalid` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oninvalid)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oninvalid_658e750a23425176() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `oninvalid` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oninvalid)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oninvalid(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oninvalid` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oninvalid)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oninvalid_658e750a23425176(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oninvalid_658e750a23425176(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oninvalid` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oninvalid)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoninvalid_689e18476482cd67() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `oninvalid` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oninvalid)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oninvalid(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oninvalid` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oninvalid)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoninvalid_689e18476482cd67(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoninvalid_689e18476482cd67(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onkeydown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeydown)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onkeydown_c6b4982db55636af() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onkeydown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeydown)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onkeydown(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onkeydown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeydown)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onkeydown_c6b4982db55636af(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onkeydown_c6b4982db55636af(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onkeydown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeydown)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonkeydown_55015c5e28333b3e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onkeydown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeydown)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onkeydown(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onkeydown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeydown)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonkeydown_55015c5e28333b3e(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonkeydown_55015c5e28333b3e(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onkeypress` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeypress)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onkeypress_2d39fdc8764e9d61() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onkeypress` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeypress)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onkeypress(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onkeypress` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeypress)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onkeypress_2d39fdc8764e9d61(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onkeypress_2d39fdc8764e9d61(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onkeypress` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeypress)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonkeypress_d10f89ce37b07035() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onkeypress` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeypress)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onkeypress(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onkeypress` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeypress)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonkeypress_d10f89ce37b07035(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonkeypress_d10f89ce37b07035(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onkeyup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeyup)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onkeyup_ca7c60ed539670b8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onkeyup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeyup)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onkeyup(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onkeyup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeyup)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onkeyup_ca7c60ed539670b8(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onkeyup_ca7c60ed539670b8(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onkeyup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeyup)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonkeyup_6baedad1631fa211() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onkeyup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeyup)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onkeyup(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onkeyup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onkeyup)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonkeyup_6baedad1631fa211(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonkeyup_6baedad1631fa211(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onload` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onload)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onload_755a0e5d93ffed76() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onload` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onload)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onload(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onload` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onload)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onload_755a0e5d93ffed76(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onload_755a0e5d93ffed76(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onload` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onload)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonload_ab35a7a2495b1678() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onload` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onload)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onload(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onload` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onload)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonload_ab35a7a2495b1678(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonload_ab35a7a2495b1678(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onloadeddata` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadeddata)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onloadeddata_6743cae5831003b7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onloadeddata` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadeddata)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onloadeddata(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onloadeddata` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadeddata)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onloadeddata_6743cae5831003b7(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onloadeddata_6743cae5831003b7(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onloadeddata` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadeddata)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonloadeddata_391c5f58135385bc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onloadeddata` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadeddata)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onloadeddata(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onloadeddata` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadeddata)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonloadeddata_391c5f58135385bc(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonloadeddata_391c5f58135385bc(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onloadedmetadata` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadedmetadata)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onloadedmetadata_ecfd8d2d8472cc9b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onloadedmetadata` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadedmetadata)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onloadedmetadata(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onloadedmetadata` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadedmetadata)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onloadedmetadata_ecfd8d2d8472cc9b(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onloadedmetadata_ecfd8d2d8472cc9b(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onloadedmetadata` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadedmetadata)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonloadedmetadata_90a6cd45ac4228bc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onloadedmetadata` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadedmetadata)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onloadedmetadata(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onloadedmetadata` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadedmetadata)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonloadedmetadata_90a6cd45ac4228bc(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonloadedmetadata_90a6cd45ac4228bc(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onloadend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onloadend_73fe5daa092b2055() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onloadend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onloadend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onloadend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onloadend_73fe5daa092b2055(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onloadend_73fe5daa092b2055(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onloadend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonloadend_b815c33556eadae0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onloadend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onloadend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onloadend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonloadend_b815c33556eadae0(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonloadend_b815c33556eadae0(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onloadstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onloadstart_48c33b21b2269178() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onloadstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onloadstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onloadstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onloadstart_48c33b21b2269178(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onloadstart_48c33b21b2269178(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onloadstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonloadstart_fcae8381445f2eac() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onloadstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onloadstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onloadstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onloadstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonloadstart_fcae8381445f2eac(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonloadstart_fcae8381445f2eac(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmousedown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmousedown)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmousedown_797311051441244d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onmousedown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmousedown)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmousedown(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmousedown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmousedown)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmousedown_797311051441244d(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmousedown_797311051441244d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmousedown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmousedown)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmousedown_72a0e96a61e25156() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onmousedown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmousedown)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmousedown(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmousedown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmousedown)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmousedown_72a0e96a61e25156(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmousedown_72a0e96a61e25156(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseenter)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseenter_73edfc6c51f0ea33() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onmouseenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseenter)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseenter(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseenter)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseenter_73edfc6c51f0ea33(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseenter_73edfc6c51f0ea33(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseenter)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseenter_a5531574ed49570b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onmouseenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseenter)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseenter(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseenter)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseenter_a5531574ed49570b(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseenter_a5531574ed49570b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseleave)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseleave_0b45b92fb9cb94e7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onmouseleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseleave)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseleave(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseleave)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseleave_0b45b92fb9cb94e7(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseleave_0b45b92fb9cb94e7(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseleave)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseleave_1fbd8f27decc0dfe() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onmouseleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseleave)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseleave(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseleave)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseleave_1fbd8f27decc0dfe(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseleave_1fbd8f27decc0dfe(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmousemove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmousemove)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmousemove_29ceea814619effc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onmousemove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmousemove)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmousemove(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmousemove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmousemove)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmousemove_29ceea814619effc(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmousemove_29ceea814619effc(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmousemove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmousemove)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmousemove_f2a2b57f4365e56a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onmousemove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmousemove)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmousemove(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmousemove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmousemove)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmousemove_f2a2b57f4365e56a(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmousemove_f2a2b57f4365e56a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseout` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseout)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseout_5925a1742ab5e7ac() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onmouseout` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseout)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseout(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseout` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseout)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseout_5925a1742ab5e7ac(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseout_5925a1742ab5e7ac(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseout` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseout)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseout_72f07c34d8b5baf5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onmouseout` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseout)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseout(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseout` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseout)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseout_72f07c34d8b5baf5(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseout_72f07c34d8b5baf5(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseover)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseover_a5532e72cd770c47() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onmouseover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseover)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseover(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseover)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseover_a5532e72cd770c47(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseover_a5532e72cd770c47(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseover)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseover_c6662721e2402d7c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onmouseover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseover)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseover(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseover)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseover_c6662721e2402d7c(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseover_c6662721e2402d7c(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseup)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseup_e8983bbd34f05c3e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onmouseup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseup)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseup(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseup)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseup_e8983bbd34f05c3e(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseup_e8983bbd34f05c3e(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseup)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseup_359f8714c1843237() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onmouseup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseup)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseup(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onmouseup)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseup_359f8714c1843237(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseup_359f8714c1843237(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwheel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwheel)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwheel_da6a9a085d3021bb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onwheel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwheel)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwheel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwheel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwheel)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwheel_da6a9a085d3021bb(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwheel_da6a9a085d3021bb(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwheel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwheel)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwheel_4f37bbd452c3a83f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onwheel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwheel)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwheel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwheel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwheel)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwheel_4f37bbd452c3a83f(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwheel_4f37bbd452c3a83f(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpause` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpause)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpause_b5f59cb07c200809() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onpause` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpause)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpause(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpause` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpause)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpause_b5f59cb07c200809(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpause_b5f59cb07c200809(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpause` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpause)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpause_daf1e250ecdf98b4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onpause` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpause)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpause(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpause` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpause)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpause_daf1e250ecdf98b4(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpause_daf1e250ecdf98b4(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onplay` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onplay)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onplay_9741d92e49486920() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onplay` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onplay)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onplay(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onplay` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onplay)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onplay_9741d92e49486920(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onplay_9741d92e49486920(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onplay` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onplay)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonplay_a34bc01db864f186() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onplay` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onplay)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onplay(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onplay` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onplay)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonplay_a34bc01db864f186(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonplay_a34bc01db864f186(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onplaying` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onplaying)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onplaying_36edd3c61c3352ce() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onplaying` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onplaying)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onplaying(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onplaying` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onplaying)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onplaying_36edd3c61c3352ce(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onplaying_36edd3c61c3352ce(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onplaying` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onplaying)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonplaying_204bbebec88bcdfd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onplaying` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onplaying)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onplaying(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onplaying` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onplaying)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonplaying_204bbebec88bcdfd(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonplaying_204bbebec88bcdfd(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onprogress` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onprogress)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onprogress_31c0d713586cf410() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onprogress` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onprogress)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onprogress(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onprogress` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onprogress)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onprogress_31c0d713586cf410(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onprogress_31c0d713586cf410(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onprogress` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onprogress)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonprogress_88e4c59c42b4bf37() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onprogress` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onprogress)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onprogress(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onprogress` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onprogress)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonprogress_88e4c59c42b4bf37(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonprogress_88e4c59c42b4bf37(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onratechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onratechange)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onratechange_e1040f7494544102() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onratechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onratechange)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onratechange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onratechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onratechange)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onratechange_e1040f7494544102(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onratechange_e1040f7494544102(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onratechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onratechange)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonratechange_d3f1a15d6d770808() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onratechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onratechange)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onratechange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onratechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onratechange)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonratechange_d3f1a15d6d770808(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonratechange_d3f1a15d6d770808(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onreset` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onreset)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onreset_c4c3837b8c088db8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onreset` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onreset)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onreset(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onreset` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onreset)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onreset_c4c3837b8c088db8(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onreset_c4c3837b8c088db8(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onreset` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onreset)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonreset_8dd0bf66e27caa2f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onreset` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onreset)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onreset(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onreset` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onreset)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonreset_8dd0bf66e27caa2f(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonreset_8dd0bf66e27caa2f(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onresize` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onresize)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onresize_fc93f4ef8bcb8d5a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onresize` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onresize)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onresize(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onresize` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onresize)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onresize_fc93f4ef8bcb8d5a(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onresize_fc93f4ef8bcb8d5a(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onresize` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onresize)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonresize_509e0ddd6baaba0a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onresize` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onresize)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onresize(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onresize` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onresize)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonresize_509e0ddd6baaba0a(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonresize_509e0ddd6baaba0a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onscroll` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onscroll)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onscroll_febbd4e8a55fbaf1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onscroll` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onscroll)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onscroll(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onscroll` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onscroll)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onscroll_febbd4e8a55fbaf1(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onscroll_febbd4e8a55fbaf1(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onscroll` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onscroll)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonscroll_5430176e04b4824a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onscroll` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onscroll)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onscroll(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onscroll` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onscroll)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonscroll_5430176e04b4824a(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonscroll_5430176e04b4824a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onseeked` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onseeked)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onseeked_4203cf2c58d9383d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onseeked` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onseeked)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onseeked(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onseeked` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onseeked)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onseeked_4203cf2c58d9383d(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onseeked_4203cf2c58d9383d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onseeked` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onseeked)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonseeked_0d584fba8104941a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onseeked` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onseeked)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onseeked(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onseeked` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onseeked)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonseeked_0d584fba8104941a(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonseeked_0d584fba8104941a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onseeking` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onseeking)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onseeking_940d0e1de6949a43() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onseeking` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onseeking)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onseeking(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onseeking` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onseeking)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onseeking_940d0e1de6949a43(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onseeking_940d0e1de6949a43(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onseeking` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onseeking)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonseeking_11a5aa351940199a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onseeking` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onseeking)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onseeking(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onseeking` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onseeking)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonseeking_11a5aa351940199a(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonseeking_11a5aa351940199a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onselect` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onselect)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onselect_fb665d82282ac44a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onselect` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onselect)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onselect(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onselect` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onselect)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onselect_fb665d82282ac44a(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onselect_fb665d82282ac44a(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onselect` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onselect)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonselect_ae3097a44ffcc0a1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onselect` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onselect)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onselect(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onselect` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onselect)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonselect_ae3097a44ffcc0a1(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonselect_ae3097a44ffcc0a1(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onshow` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onshow)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onshow_d79aa4e815e1e41e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onshow` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onshow)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onshow(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onshow` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onshow)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onshow_d79aa4e815e1e41e(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onshow_d79aa4e815e1e41e(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onshow` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onshow)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonshow_9681bd8de4bbc8f5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onshow` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onshow)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onshow(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onshow` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onshow)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonshow_9681bd8de4bbc8f5(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonshow_9681bd8de4bbc8f5(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onstalled` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onstalled)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onstalled_753ec759fb439565() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onstalled` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onstalled)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onstalled(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onstalled` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onstalled)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onstalled_753ec759fb439565(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onstalled_753ec759fb439565(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onstalled` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onstalled)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonstalled_a762e763c2ce45a7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onstalled` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onstalled)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onstalled(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onstalled` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onstalled)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonstalled_a762e763c2ce45a7(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonstalled_a762e763c2ce45a7(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onsubmit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onsubmit)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onsubmit_31b2ed3bd295facb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onsubmit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onsubmit)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onsubmit(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onsubmit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onsubmit)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onsubmit_31b2ed3bd295facb(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onsubmit_31b2ed3bd295facb(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onsubmit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onsubmit)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonsubmit_7631a0aa9d75897c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onsubmit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onsubmit)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onsubmit(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onsubmit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onsubmit)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonsubmit_7631a0aa9d75897c(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonsubmit_7631a0aa9d75897c(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onsuspend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onsuspend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onsuspend_9287b7403fd57362() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onsuspend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onsuspend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onsuspend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onsuspend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onsuspend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onsuspend_9287b7403fd57362(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onsuspend_9287b7403fd57362(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onsuspend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onsuspend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonsuspend_f9a3cc7425be6ef4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onsuspend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onsuspend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onsuspend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onsuspend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onsuspend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonsuspend_f9a3cc7425be6ef4(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonsuspend_f9a3cc7425be6ef4(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontimeupdate` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontimeupdate)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontimeupdate_d84d51e70d938340() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ontimeupdate` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontimeupdate)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontimeupdate(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontimeupdate` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontimeupdate)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontimeupdate_d84d51e70d938340(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontimeupdate_d84d51e70d938340(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontimeupdate` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontimeupdate)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontimeupdate_ce957038c6355ca6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ontimeupdate` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontimeupdate)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontimeupdate(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontimeupdate` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontimeupdate)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontimeupdate_ce957038c6355ca6(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontimeupdate_ce957038c6355ca6(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onvolumechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onvolumechange)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onvolumechange_4dd4bded63276142() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onvolumechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onvolumechange)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onvolumechange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onvolumechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onvolumechange)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onvolumechange_4dd4bded63276142(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onvolumechange_4dd4bded63276142(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onvolumechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onvolumechange)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonvolumechange_ce55e044c6d9eca8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onvolumechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onvolumechange)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onvolumechange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onvolumechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onvolumechange)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonvolumechange_ce55e044c6d9eca8(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonvolumechange_ce55e044c6d9eca8(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwaiting` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwaiting)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwaiting_044667e38fe2d365() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onwaiting` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwaiting)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwaiting(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwaiting` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwaiting)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwaiting_044667e38fe2d365(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwaiting_044667e38fe2d365(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwaiting` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwaiting)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwaiting_f178536c3c5f3bf2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onwaiting` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwaiting)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwaiting(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwaiting` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwaiting)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwaiting_f178536c3c5f3bf2(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwaiting_f178536c3c5f3bf2(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onselectstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onselectstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onselectstart_d76bebd0fa1e622f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onselectstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onselectstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onselectstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onselectstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onselectstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onselectstart_d76bebd0fa1e622f(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onselectstart_d76bebd0fa1e622f(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onselectstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onselectstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonselectstart_cdfdf38e371b2ef8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onselectstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onselectstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onselectstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onselectstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onselectstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonselectstart_cdfdf38e371b2ef8(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonselectstart_cdfdf38e371b2ef8(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontoggle` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontoggle)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontoggle_7be8f1635435e0e1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ontoggle` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontoggle)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontoggle(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontoggle` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontoggle)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontoggle_7be8f1635435e0e1(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontoggle_7be8f1635435e0e1(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontoggle` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontoggle)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontoggle_361182b0c60a73f2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ontoggle` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontoggle)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontoggle(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontoggle` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontoggle)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontoggle_361182b0c60a73f2(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontoggle_361182b0c60a73f2(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointercancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointercancel)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointercancel_7de3b706ff4ff9a4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onpointercancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointercancel)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointercancel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointercancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointercancel)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointercancel_7de3b706ff4ff9a4(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointercancel_7de3b706ff4ff9a4(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointercancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointercancel)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointercancel_1bbfdcfefaf9663d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onpointercancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointercancel)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointercancel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointercancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointercancel)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointercancel_1bbfdcfefaf9663d(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointercancel_1bbfdcfefaf9663d(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerdown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerdown)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerdown_f063959d473b71bd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onpointerdown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerdown)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerdown(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerdown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerdown)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerdown_f063959d473b71bd(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerdown_f063959d473b71bd(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerdown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerdown)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerdown_a567f402e98e87ed() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onpointerdown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerdown)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerdown(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerdown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerdown)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerdown_a567f402e98e87ed(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerdown_a567f402e98e87ed(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerup)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerup_506741faa6f86c0d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onpointerup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerup)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerup(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerup)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerup_506741faa6f86c0d(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerup_506741faa6f86c0d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerup)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerup_b3050dafc0dd3485() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onpointerup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerup)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerup(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerup)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerup_b3050dafc0dd3485(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerup_b3050dafc0dd3485(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointermove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointermove)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointermove_1887987b8401c816() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onpointermove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointermove)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointermove(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointermove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointermove)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointermove_1887987b8401c816(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointermove_1887987b8401c816(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointermove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointermove)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointermove_22e0cb04c9e93a74() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onpointermove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointermove)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointermove(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointermove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointermove)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointermove_22e0cb04c9e93a74(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointermove_22e0cb04c9e93a74(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerout` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerout)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerout_279d781fa6b399dc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onpointerout` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerout)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerout(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerout` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerout)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerout_279d781fa6b399dc(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerout_279d781fa6b399dc(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerout` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerout)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerout_c207f96f499500a0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onpointerout` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerout)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerout(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerout` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerout)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerout_c207f96f499500a0(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerout_c207f96f499500a0(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerover)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerover_c1dfca438fbb8b45() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onpointerover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerover)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerover(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerover)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerover_c1dfca438fbb8b45(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerover_c1dfca438fbb8b45(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerover)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerover_18927658a600731b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onpointerover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerover)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerover(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerover)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerover_18927658a600731b(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerover_18927658a600731b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerenter)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerenter_08b0c83e2557b649() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onpointerenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerenter)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerenter(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerenter)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerenter_08b0c83e2557b649(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerenter_08b0c83e2557b649(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerenter)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerenter_fe36cc536fefacd2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onpointerenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerenter)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerenter(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerenter)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerenter_fe36cc536fefacd2(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerenter_fe36cc536fefacd2(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerleave)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerleave_66c1bfefa1a2146d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onpointerleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerleave)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerleave(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerleave)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerleave_66c1bfefa1a2146d(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerleave_66c1bfefa1a2146d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerleave)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerleave_2e13d057ab4e0967() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onpointerleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerleave)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerleave(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpointerleave)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerleave_2e13d057ab4e0967(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerleave_2e13d057ab4e0967(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ongotpointercapture` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ongotpointercapture)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ongotpointercapture_f637cd62604b62fb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ongotpointercapture` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ongotpointercapture)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ongotpointercapture(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ongotpointercapture` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ongotpointercapture)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ongotpointercapture_f637cd62604b62fb(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ongotpointercapture_f637cd62604b62fb(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ongotpointercapture` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ongotpointercapture)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setongotpointercapture_13a2632d6c4fcca7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ongotpointercapture` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ongotpointercapture)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ongotpointercapture(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ongotpointercapture` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ongotpointercapture)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setongotpointercapture_13a2632d6c4fcca7(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setongotpointercapture_13a2632d6c4fcca7(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onlostpointercapture` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onlostpointercapture)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onlostpointercapture_bc6b08e8f5739fdb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onlostpointercapture` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onlostpointercapture)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onlostpointercapture(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onlostpointercapture` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onlostpointercapture)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onlostpointercapture_bc6b08e8f5739fdb(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onlostpointercapture_bc6b08e8f5739fdb(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onlostpointercapture` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onlostpointercapture)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonlostpointercapture_f0855967a6b46b20() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onlostpointercapture` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onlostpointercapture)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onlostpointercapture(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onlostpointercapture` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onlostpointercapture)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonlostpointercapture_f0855967a6b46b20(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonlostpointercapture_f0855967a6b46b20(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onanimationcancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationcancel)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onanimationcancel_efe6d4f0f7f370ac() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onanimationcancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationcancel)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onanimationcancel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onanimationcancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationcancel)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onanimationcancel_efe6d4f0f7f370ac(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onanimationcancel_efe6d4f0f7f370ac(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onanimationcancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationcancel)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonanimationcancel_60c79a6343bf10cd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onanimationcancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationcancel)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onanimationcancel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onanimationcancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationcancel)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonanimationcancel_60c79a6343bf10cd(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonanimationcancel_60c79a6343bf10cd(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onanimationend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onanimationend_b60dd8c2b9fdd7b2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onanimationend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onanimationend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onanimationend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onanimationend_b60dd8c2b9fdd7b2(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onanimationend_b60dd8c2b9fdd7b2(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onanimationend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonanimationend_9a452fca7b8169b9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onanimationend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onanimationend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onanimationend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonanimationend_9a452fca7b8169b9(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonanimationend_9a452fca7b8169b9(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onanimationiteration` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationiteration)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onanimationiteration_cba8a02a28c468ab() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onanimationiteration` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationiteration)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onanimationiteration(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onanimationiteration` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationiteration)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onanimationiteration_cba8a02a28c468ab(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onanimationiteration_cba8a02a28c468ab(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onanimationiteration` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationiteration)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonanimationiteration_f890a2033e568628() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onanimationiteration` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationiteration)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onanimationiteration(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onanimationiteration` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationiteration)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonanimationiteration_f890a2033e568628(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonanimationiteration_f890a2033e568628(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onanimationstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onanimationstart_50c5226a5e69c3d0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onanimationstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onanimationstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onanimationstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onanimationstart_50c5226a5e69c3d0(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onanimationstart_50c5226a5e69c3d0(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onanimationstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonanimationstart_51763b10d4744c44() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onanimationstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onanimationstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onanimationstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onanimationstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonanimationstart_51763b10d4744c44(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonanimationstart_51763b10d4744c44(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontransitioncancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitioncancel)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontransitioncancel_403d2985b801c0e3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ontransitioncancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitioncancel)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontransitioncancel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontransitioncancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitioncancel)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontransitioncancel_403d2985b801c0e3(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontransitioncancel_403d2985b801c0e3(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontransitioncancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitioncancel)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontransitioncancel_966e1d73ecec26e3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ontransitioncancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitioncancel)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontransitioncancel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontransitioncancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitioncancel)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontransitioncancel_966e1d73ecec26e3(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontransitioncancel_966e1d73ecec26e3(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontransitionend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontransitionend_d29070046654f1ac() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ontransitionend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontransitionend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontransitionend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontransitionend_d29070046654f1ac(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontransitionend_d29070046654f1ac(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontransitionend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontransitionend_cbb29408d879e4a2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ontransitionend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontransitionend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontransitionend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontransitionend_cbb29408d879e4a2(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontransitionend_cbb29408d879e4a2(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontransitionrun` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionrun)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontransitionrun_0b1e8e6f0a95125a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ontransitionrun` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionrun)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontransitionrun(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontransitionrun` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionrun)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontransitionrun_0b1e8e6f0a95125a(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontransitionrun_0b1e8e6f0a95125a(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontransitionrun` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionrun)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontransitionrun_712e1871db1ee16e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ontransitionrun` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionrun)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontransitionrun(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontransitionrun` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionrun)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontransitionrun_712e1871db1ee16e(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontransitionrun_712e1871db1ee16e(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontransitionstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontransitionstart_220125dc4e164d2c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ontransitionstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontransitionstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontransitionstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontransitionstart_220125dc4e164d2c(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontransitionstart_220125dc4e164d2c(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontransitionstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontransitionstart_b1fea978b499430e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ontransitionstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontransitionstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontransitionstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontransitionstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontransitionstart_b1fea978b499430e(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontransitionstart_b1fea978b499430e(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwebkitanimationend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwebkitanimationend_9e274d6bb06f77a8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onwebkitanimationend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwebkitanimationend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwebkitanimationend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwebkitanimationend_9e274d6bb06f77a8(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwebkitanimationend_9e274d6bb06f77a8(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwebkitanimationend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwebkitanimationend_e97b7c61708e3754() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onwebkitanimationend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwebkitanimationend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwebkitanimationend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwebkitanimationend_e97b7c61708e3754(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwebkitanimationend_e97b7c61708e3754(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwebkitanimationiteration` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationiteration)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwebkitanimationiteration_bf54df27415ec972() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onwebkitanimationiteration` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationiteration)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwebkitanimationiteration(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwebkitanimationiteration` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationiteration)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwebkitanimationiteration_bf54df27415ec972(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwebkitanimationiteration_bf54df27415ec972(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwebkitanimationiteration` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationiteration)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwebkitanimationiteration_fb32c0af5138972f()
        {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onwebkitanimationiteration` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationiteration)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwebkitanimationiteration(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwebkitanimationiteration` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationiteration)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwebkitanimationiteration_fb32c0af5138972f(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwebkitanimationiteration_fb32c0af5138972f(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwebkitanimationstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwebkitanimationstart_557edc13741e5a61() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onwebkitanimationstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwebkitanimationstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwebkitanimationstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwebkitanimationstart_557edc13741e5a61(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwebkitanimationstart_557edc13741e5a61(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwebkitanimationstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwebkitanimationstart_b1af2d07a8a16f13() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onwebkitanimationstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwebkitanimationstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwebkitanimationstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkitanimationstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwebkitanimationstart_b1af2d07a8a16f13(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwebkitanimationstart_b1af2d07a8a16f13(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwebkittransitionend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkittransitionend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwebkittransitionend_a877d00a737427fb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onwebkittransitionend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkittransitionend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwebkittransitionend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwebkittransitionend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkittransitionend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwebkittransitionend_a877d00a737427fb(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwebkittransitionend_a877d00a737427fb(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwebkittransitionend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkittransitionend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwebkittransitionend_840335b7f0b999ed() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onwebkittransitionend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkittransitionend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwebkittransitionend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwebkittransitionend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onwebkittransitionend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwebkittransitionend_840335b7f0b999ed(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwebkittransitionend_840335b7f0b999ed(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onerror)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onerror_2dc4cf3de15bbf54() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `onerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onerror)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onerror(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onerror)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onerror_2dc4cf3de15bbf54(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onerror_2dc4cf3de15bbf54(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onerror)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonerror_b91169e64312f1fa() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `onerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onerror)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onerror(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onerror)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonerror_b91169e64312f1fa(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonerror_b91169e64312f1fa(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontouchstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontouchstart_c75a7840598680bf() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ontouchstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontouchstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontouchstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontouchstart_c75a7840598680bf(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontouchstart_c75a7840598680bf(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontouchstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchstart)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontouchstart_c724c1ed8856a626() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ontouchstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchstart)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontouchstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontouchstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchstart)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontouchstart_c724c1ed8856a626(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontouchstart_c724c1ed8856a626(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontouchend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontouchend_100e0b1f8e1a4a43() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ontouchend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontouchend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontouchend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontouchend_100e0b1f8e1a4a43(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontouchend_100e0b1f8e1a4a43(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontouchend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchend)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontouchend_200abcd9a6e9ad78() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ontouchend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchend)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontouchend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontouchend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchend)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontouchend_200abcd9a6e9ad78(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontouchend_200abcd9a6e9ad78(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontouchmove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchmove)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontouchmove_6afd92245094f9ab() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ontouchmove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchmove)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontouchmove(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontouchmove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchmove)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontouchmove_6afd92245094f9ab(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontouchmove_6afd92245094f9ab(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontouchmove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchmove)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontouchmove_fe6d489b47d576fd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ontouchmove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchmove)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontouchmove(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontouchmove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchmove)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontouchmove_fe6d489b47d576fd(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontouchmove_fe6d489b47d576fd(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontouchcancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchcancel)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontouchcancel_7cc5a2d5e4686260() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Getter for the `ontouchcancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchcancel)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontouchcancel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontouchcancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchcancel)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontouchcancel_7cc5a2d5e4686260(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontouchcancel_7cc5a2d5e4686260(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontouchcancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchcancel)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontouchcancel_3d04b45dedf01f21() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&HtmlElement as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///Setter for the `ontouchcancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchcancel)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontouchcancel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontouchcancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/ontouchcancel)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontouchcancel_3d04b45dedf01f21(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontouchcancel_3d04b45dedf01f21(this, value)
                    };
                    ()
                }
            }
        }
        ///The `blur()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/blur)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_blur_ce911f2628ddbdd6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///The `blur()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/blur)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn blur(&self) -> Result<(), JsValue> {
                ///The `blur()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/blur)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_blur_ce911f2628ddbdd6(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_blur_ce911f2628ddbdd6(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `click()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_click_1e787c2777ec0972() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///The `click()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn click(&self) {
                ///The `click()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/click)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_click_1e787c2777ec0972(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_click_1e787c2777ec0972(this)
                    };
                    ()
                }
            }
        }
        ///The `focus()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus)
        ///
        ///*This API requires the following crate features to be activated: `HtmlElement`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_focus_5f74cb245be46131() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&HtmlElement as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl HtmlElement {
            ///The `focus()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus)
            ///
            ///*This API requires the following crate features to be activated: `HtmlElement`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn focus(&self) -> Result<(), JsValue> {
                ///The `focus()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/focus)
                ///
                ///*This API requires the following crate features to be activated: `HtmlElement`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_focus_5f74cb245be46131(
                        this: <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&HtmlElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_focus_5f74cb245be46131(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        #[allow(non_upper_case_globals)]
        #[cfg(target_arch = "wasm32")]
        #[link_section = "__wasm_bindgen_unstable"]
        #[doc(hidden)]
        #[allow(clippy::all)]
        pub static __WASM_BINDGEN_GENERATED_0819d36c14185acc: [u8; 20112usize] = {
            static _INCLUDED_FILES: &[&str] = &[];
            * b".\x00\x00\x00{\"schema_version\":\"0.2.68\",\"version\":\"0.2.68\"}ZN\x00\x00\x00\x00\xd5\x01\x00\x00\x02\x0bHTMLElement-__wbg_instanceof_HtmlElement_9cd64b297a10eb1e\x00\x00\x00\x00\x1c__wbg_title_ebf722f7ebc5b6a0\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x05title\x01\x01\x04this\x05title\x01\x00\x00\x00\x1f__wbg_settitle_9f554deab9873ff5\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x05title\x01\x02\x04this\x05value\tset_title\x01\x00\x00\x00\x1b__wbg_lang_b3108479a08dbf7f\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x04lang\x01\x01\x04this\x04lang\x01\x00\x00\x00\x1e__wbg_setlang_48f4f027ce0fb431\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x04lang\x01\x02\x04this\x05value\x08set_lang\x01\x00\x00\x00\x1a__wbg_dir_27be405bcd957e41\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x03dir\x01\x01\x04this\x03dir\x01\x00\x00\x00\x1d__wbg_setdir_71690acb002c8664\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x03dir\x01\x02\x04this\x05value\x07set_dir\x01\x00\x00\x00\x1e__wbg_dataset_a29a4fc9f3a276c6\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x07dataset\x01\x01\x04this\x07dataset\x01\x00\x00\x00 __wbg_innerText_cff90c487875523e\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\tinnerText\x01\x01\x04this\tinnerText\x01\x00\x00\x00#__wbg_setinnerText_f2b56447f815dc9e\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\tinnerText\x01\x02\x04this\x05value\rset_innerText\x01\x00\x00\x00\x1d__wbg_hidden_61449e189249c287\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x06hidden\x01\x01\x04this\x06hidden\x01\x00\x00\x00 __wbg_sethidden_912c0ab43cd6ed09\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x06hidden\x01\x02\x04this\x05value\nset_hidden\x01\x00\x00\x00\x1f__wbg_tabIndex_ed6baeff06afe143\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x08tabIndex\x01\x01\x04this\x08tabIndex\x01\x00\x00\x00\"__wbg_settabIndex_b3ed60b55f3ff661\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x08tabIndex\x01\x02\x04this\x05value\x0cset_tabIndex\x01\x00\x00\x00 __wbg_accessKey_71de7ac2edb5b19f\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\taccessKey\x01\x01\x04this\taccessKey\x01\x00\x00\x00#__wbg_setaccessKey_f0aeb6a015d7254c\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\taccessKey\x01\x02\x04this\x05value\rset_accessKey\x01\x00\x00\x00%__wbg_accessKeyLabel_193b56d6f23ff9d3\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0eaccessKeyLabel\x01\x01\x04this\x0eaccessKeyLabel\x01\x00\x00\x00 __wbg_draggable_a0808fbd4cae790c\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\tdraggable\x01\x01\x04this\tdraggable\x01\x00\x00\x00#__wbg_setdraggable_2628e5cbc13bd5ce\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\tdraggable\x01\x02\x04this\x05value\rset_draggable\x01\x00\x00\x00&__wbg_contentEditable_6e6d3c1ffe28f7ee\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0fcontentEditable\x01\x01\x04this\x0fcontentEditable\x01\x00\x00\x00)__wbg_setcontentEditable_94909fd81044a6fc\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0fcontentEditable\x01\x02\x04this\x05value\x13set_contentEditable\x01\x00\x00\x00(__wbg_isContentEditable_d9ae30f7ecb12fc5\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x11isContentEditable\x01\x01\x04this\x11isContentEditable\x01\x00\x00\x00!__wbg_spellcheck_0ba452ab33600433\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\nspellcheck\x01\x01\x04this\nspellcheck\x01\x00\x00\x00$__wbg_setspellcheck_9b22ed6da981d69a\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\nspellcheck\x01\x02\x04this\x05value\x0eset_spellcheck\x01\x00\x00\x00\x1c__wbg_style_9a41d46c005f7596\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x05style\x01\x01\x04this\x05style\x01\x00\x00\x00#__wbg_offsetParent_bcacab7989166f64\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0coffsetParent\x01\x01\x04this\x0coffsetParent\x01\x00\x00\x00 __wbg_offsetTop_1027e482ec905ab8\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\toffsetTop\x01\x01\x04this\toffsetTop\x01\x00\x00\x00!__wbg_offsetLeft_8b586e4a8357d02d\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\noffsetLeft\x01\x01\x04this\noffsetLeft\x01\x00\x00\x00\"__wbg_offsetWidth_23360c2e25b49ca5\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0boffsetWidth\x01\x01\x04this\x0boffsetWidth\x01\x00\x00\x00#__wbg_offsetHeight_12da3cbaaaaefe5d\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0coffsetHeight\x01\x01\x04this\x0coffsetHeight\x01\x00\x00\x00\x1d__wbg_oncopy_7b3a8ed17ab871ac\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x06oncopy\x01\x01\x04this\x06oncopy\x01\x00\x00\x00 __wbg_setoncopy_ca781cb0cefa386a\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x06oncopy\x01\x02\x04this\x05value\nset_oncopy\x01\x00\x00\x00\x1c__wbg_oncut_bdb85a99fa7c5f81\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x05oncut\x01\x01\x04this\x05oncut\x01\x00\x00\x00\x1f__wbg_setoncut_41bb2808635b1832\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x05oncut\x01\x02\x04this\x05value\tset_oncut\x01\x00\x00\x00\x1e__wbg_onpaste_0c62af1b8e7a11e1\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x07onpaste\x01\x01\x04this\x07onpaste\x01\x00\x00\x00!__wbg_setonpaste_e41dccebcd720fda\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x07onpaste\x01\x02\x04this\x05value\x0bset_onpaste\x01\x00\x00\x00\x1e__wbg_onabort_a925c1667f0b0aba\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x07onabort\x01\x01\x04this\x07onabort\x01\x00\x00\x00!__wbg_setonabort_f889511196a6d9e5\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x07onabort\x01\x02\x04this\x05value\x0bset_onabort\x01\x00\x00\x00\x1d__wbg_onblur_adbf09293bc01bad\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x06onblur\x01\x01\x04this\x06onblur\x01\x00\x00\x00 __wbg_setonblur_81997e499437d2a8\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x06onblur\x01\x02\x04this\x05value\nset_onblur\x01\x00\x00\x00\x1e__wbg_onfocus_c2dc5ed6ad1cd7bc\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x07onfocus\x01\x01\x04this\x07onfocus\x01\x00\x00\x00!__wbg_setonfocus_5c7d3a8231e78c14\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x07onfocus\x01\x02\x04this\x05value\x0bset_onfocus\x01\x00\x00\x00!__wbg_onauxclick_d9297fc2a5889380\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\nonauxclick\x01\x01\x04this\nonauxclick\x01\x00\x00\x00$__wbg_setonauxclick_635410e84c65050b\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\nonauxclick\x01\x02\x04this\x05value\x0eset_onauxclick\x01\x00\x00\x00 __wbg_oncanplay_a80e351279262511\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\toncanplay\x01\x01\x04this\toncanplay\x01\x00\x00\x00#__wbg_setoncanplay_c97aed271c9f3dc9\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\toncanplay\x01\x02\x04this\x05value\rset_oncanplay\x01\x00\x00\x00\'__wbg_oncanplaythrough_73231f77263f7e55\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x10oncanplaythrough\x01\x01\x04this\x10oncanplaythrough\x01\x00\x00\x00*__wbg_setoncanplaythrough_e93142d7814c4730\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x10oncanplaythrough\x01\x02\x04this\x05value\x14set_oncanplaythrough\x01\x00\x00\x00\x1f__wbg_onchange_07fe8fb12ecd8aac\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x08onchange\x01\x01\x04this\x08onchange\x01\x00\x00\x00\"__wbg_setonchange_6ba4af224eb77197\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x08onchange\x01\x02\x04this\x05value\x0cset_onchange\x01\x00\x00\x00\x1e__wbg_onclick_884dd4cb4b458b18\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x07onclick\x01\x01\x04this\x07onclick\x01\x00\x00\x00!__wbg_setonclick_5cb400945e687587\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x07onclick\x01\x02\x04this\x05value\x0bset_onclick\x01\x00\x00\x00\x1e__wbg_onclose_0ba513c6a0a14e4c\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x07onclose\x01\x01\x04this\x07onclose\x01\x00\x00\x00!__wbg_setonclose_b669e68396de32f6\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x07onclose\x01\x02\x04this\x05value\x0bset_onclose\x01\x00\x00\x00$__wbg_oncontextmenu_f032bf7d825c276e\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\roncontextmenu\x01\x01\x04this\roncontextmenu\x01\x00\x00\x00\'__wbg_setoncontextmenu_65f08938aa485207\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\roncontextmenu\x01\x02\x04this\x05value\x11set_oncontextmenu\x01\x00\x00\x00!__wbg_ondblclick_c2247c1ae74a478d\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\nondblclick\x01\x01\x04this\nondblclick\x01\x00\x00\x00$__wbg_setondblclick_a0f2700bfca980ce\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\nondblclick\x01\x02\x04this\x05value\x0eset_ondblclick\x01\x00\x00\x00\x1d__wbg_ondrag_fcece04f90d5a7a4\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x06ondrag\x01\x01\x04this\x06ondrag\x01\x00\x00\x00 __wbg_setondrag_080ad95ba48cb659\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x06ondrag\x01\x02\x04this\x05value\nset_ondrag\x01\x00\x00\x00 __wbg_ondragend_ae72dfb314dbc1fc\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\tondragend\x01\x01\x04this\tondragend\x01\x00\x00\x00#__wbg_setondragend_5fa4c19a72cdf3b8\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\tondragend\x01\x02\x04this\x05value\rset_ondragend\x01\x00\x00\x00\"__wbg_ondragenter_e902a97747968536\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0bondragenter\x01\x01\x04this\x0bondragenter\x01\x00\x00\x00%__wbg_setondragenter_2262162aaee5a260\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0bondragenter\x01\x02\x04this\x05value\x0fset_ondragenter\x01\x00\x00\x00!__wbg_ondragexit_44e1e894831005ad\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\nondragexit\x01\x01\x04this\nondragexit\x01\x00\x00\x00$__wbg_setondragexit_336a01c8867a8f9b\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\nondragexit\x01\x02\x04this\x05value\x0eset_ondragexit\x01\x00\x00\x00\"__wbg_ondragleave_1a2a72375ae961b6\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0bondragleave\x01\x01\x04this\x0bondragleave\x01\x00\x00\x00%__wbg_setondragleave_acfeb49f2391c5fc\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0bondragleave\x01\x02\x04this\x05value\x0fset_ondragleave\x01\x00\x00\x00!__wbg_ondragover_a61096049417238b\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\nondragover\x01\x01\x04this\nondragover\x01\x00\x00\x00$__wbg_setondragover_b6d6ff5a507bcf7e\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\nondragover\x01\x02\x04this\x05value\x0eset_ondragover\x01\x00\x00\x00\"__wbg_ondragstart_5eeabc73c5701963\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0bondragstart\x01\x01\x04this\x0bondragstart\x01\x00\x00\x00%__wbg_setondragstart_2c3de15ea9277cae\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0bondragstart\x01\x02\x04this\x05value\x0fset_ondragstart\x01\x00\x00\x00\x1d__wbg_ondrop_1dd0a5081ecf3f13\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x06ondrop\x01\x01\x04this\x06ondrop\x01\x00\x00\x00 __wbg_setondrop_3490e2e606255886\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x06ondrop\x01\x02\x04this\x05value\nset_ondrop\x01\x00\x00\x00\'__wbg_ondurationchange_a034a442cb8a3d9b\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x10ondurationchange\x01\x01\x04this\x10ondurationchange\x01\x00\x00\x00*__wbg_setondurationchange_b8c0b16ca3d2f28c\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x10ondurationchange\x01\x02\x04this\x05value\x14set_ondurationchange\x01\x00\x00\x00 __wbg_onemptied_37362c456185fa70\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\tonemptied\x01\x01\x04this\tonemptied\x01\x00\x00\x00#__wbg_setonemptied_a1647ee682123de0\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\tonemptied\x01\x02\x04this\x05value\rset_onemptied\x01\x00\x00\x00\x1e__wbg_onended_21cf50432e49f6e2\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x07onended\x01\x01\x04this\x07onended\x01\x00\x00\x00!__wbg_setonended_c968bba11bc35bc7\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x07onended\x01\x02\x04this\x05value\x0bset_onended\x01\x00\x00\x00\x1e__wbg_oninput_7fd41e8ea8811dc0\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x07oninput\x01\x01\x04this\x07oninput\x01\x00\x00\x00!__wbg_setoninput_cb5303c5eb0f44a1\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x07oninput\x01\x02\x04this\x05value\x0bset_oninput\x01\x00\x00\x00 __wbg_oninvalid_658e750a23425176\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\toninvalid\x01\x01\x04this\toninvalid\x01\x00\x00\x00#__wbg_setoninvalid_689e18476482cd67\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\toninvalid\x01\x02\x04this\x05value\rset_oninvalid\x01\x00\x00\x00 __wbg_onkeydown_c6b4982db55636af\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\tonkeydown\x01\x01\x04this\tonkeydown\x01\x00\x00\x00#__wbg_setonkeydown_55015c5e28333b3e\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\tonkeydown\x01\x02\x04this\x05value\rset_onkeydown\x01\x00\x00\x00!__wbg_onkeypress_2d39fdc8764e9d61\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\nonkeypress\x01\x01\x04this\nonkeypress\x01\x00\x00\x00$__wbg_setonkeypress_d10f89ce37b07035\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\nonkeypress\x01\x02\x04this\x05value\x0eset_onkeypress\x01\x00\x00\x00\x1e__wbg_onkeyup_ca7c60ed539670b8\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x07onkeyup\x01\x01\x04this\x07onkeyup\x01\x00\x00\x00!__wbg_setonkeyup_6baedad1631fa211\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x07onkeyup\x01\x02\x04this\x05value\x0bset_onkeyup\x01\x00\x00\x00\x1d__wbg_onload_755a0e5d93ffed76\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x06onload\x01\x01\x04this\x06onload\x01\x00\x00\x00 __wbg_setonload_ab35a7a2495b1678\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x06onload\x01\x02\x04this\x05value\nset_onload\x01\x00\x00\x00#__wbg_onloadeddata_6743cae5831003b7\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0conloadeddata\x01\x01\x04this\x0conloadeddata\x01\x00\x00\x00&__wbg_setonloadeddata_391c5f58135385bc\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0conloadeddata\x01\x02\x04this\x05value\x10set_onloadeddata\x01\x00\x00\x00\'__wbg_onloadedmetadata_ecfd8d2d8472cc9b\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x10onloadedmetadata\x01\x01\x04this\x10onloadedmetadata\x01\x00\x00\x00*__wbg_setonloadedmetadata_90a6cd45ac4228bc\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x10onloadedmetadata\x01\x02\x04this\x05value\x14set_onloadedmetadata\x01\x00\x00\x00 __wbg_onloadend_73fe5daa092b2055\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\tonloadend\x01\x01\x04this\tonloadend\x01\x00\x00\x00#__wbg_setonloadend_b815c33556eadae0\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\tonloadend\x01\x02\x04this\x05value\rset_onloadend\x01\x00\x00\x00\"__wbg_onloadstart_48c33b21b2269178\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0bonloadstart\x01\x01\x04this\x0bonloadstart\x01\x00\x00\x00%__wbg_setonloadstart_fcae8381445f2eac\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0bonloadstart\x01\x02\x04this\x05value\x0fset_onloadstart\x01\x00\x00\x00\"__wbg_onmousedown_797311051441244d\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0bonmousedown\x01\x01\x04this\x0bonmousedown\x01\x00\x00\x00%__wbg_setonmousedown_72a0e96a61e25156\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0bonmousedown\x01\x02\x04this\x05value\x0fset_onmousedown\x01\x00\x00\x00#__wbg_onmouseenter_73edfc6c51f0ea33\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0conmouseenter\x01\x01\x04this\x0conmouseenter\x01\x00\x00\x00&__wbg_setonmouseenter_a5531574ed49570b\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0conmouseenter\x01\x02\x04this\x05value\x10set_onmouseenter\x01\x00\x00\x00#__wbg_onmouseleave_0b45b92fb9cb94e7\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0conmouseleave\x01\x01\x04this\x0conmouseleave\x01\x00\x00\x00&__wbg_setonmouseleave_1fbd8f27decc0dfe\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0conmouseleave\x01\x02\x04this\x05value\x10set_onmouseleave\x01\x00\x00\x00\"__wbg_onmousemove_29ceea814619effc\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0bonmousemove\x01\x01\x04this\x0bonmousemove\x01\x00\x00\x00%__wbg_setonmousemove_f2a2b57f4365e56a\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0bonmousemove\x01\x02\x04this\x05value\x0fset_onmousemove\x01\x00\x00\x00!__wbg_onmouseout_5925a1742ab5e7ac\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\nonmouseout\x01\x01\x04this\nonmouseout\x01\x00\x00\x00$__wbg_setonmouseout_72f07c34d8b5baf5\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\nonmouseout\x01\x02\x04this\x05value\x0eset_onmouseout\x01\x00\x00\x00\"__wbg_onmouseover_a5532e72cd770c47\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0bonmouseover\x01\x01\x04this\x0bonmouseover\x01\x00\x00\x00%__wbg_setonmouseover_c6662721e2402d7c\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0bonmouseover\x01\x02\x04this\x05value\x0fset_onmouseover\x01\x00\x00\x00 __wbg_onmouseup_e8983bbd34f05c3e\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\tonmouseup\x01\x01\x04this\tonmouseup\x01\x00\x00\x00#__wbg_setonmouseup_359f8714c1843237\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\tonmouseup\x01\x02\x04this\x05value\rset_onmouseup\x01\x00\x00\x00\x1e__wbg_onwheel_da6a9a085d3021bb\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x07onwheel\x01\x01\x04this\x07onwheel\x01\x00\x00\x00!__wbg_setonwheel_4f37bbd452c3a83f\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x07onwheel\x01\x02\x04this\x05value\x0bset_onwheel\x01\x00\x00\x00\x1e__wbg_onpause_b5f59cb07c200809\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x07onpause\x01\x01\x04this\x07onpause\x01\x00\x00\x00!__wbg_setonpause_daf1e250ecdf98b4\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x07onpause\x01\x02\x04this\x05value\x0bset_onpause\x01\x00\x00\x00\x1d__wbg_onplay_9741d92e49486920\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x06onplay\x01\x01\x04this\x06onplay\x01\x00\x00\x00 __wbg_setonplay_a34bc01db864f186\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x06onplay\x01\x02\x04this\x05value\nset_onplay\x01\x00\x00\x00 __wbg_onplaying_36edd3c61c3352ce\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\tonplaying\x01\x01\x04this\tonplaying\x01\x00\x00\x00#__wbg_setonplaying_204bbebec88bcdfd\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\tonplaying\x01\x02\x04this\x05value\rset_onplaying\x01\x00\x00\x00!__wbg_onprogress_31c0d713586cf410\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\nonprogress\x01\x01\x04this\nonprogress\x01\x00\x00\x00$__wbg_setonprogress_88e4c59c42b4bf37\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\nonprogress\x01\x02\x04this\x05value\x0eset_onprogress\x01\x00\x00\x00#__wbg_onratechange_e1040f7494544102\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0conratechange\x01\x01\x04this\x0conratechange\x01\x00\x00\x00&__wbg_setonratechange_d3f1a15d6d770808\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0conratechange\x01\x02\x04this\x05value\x10set_onratechange\x01\x00\x00\x00\x1e__wbg_onreset_c4c3837b8c088db8\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x07onreset\x01\x01\x04this\x07onreset\x01\x00\x00\x00!__wbg_setonreset_8dd0bf66e27caa2f\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x07onreset\x01\x02\x04this\x05value\x0bset_onreset\x01\x00\x00\x00\x1f__wbg_onresize_fc93f4ef8bcb8d5a\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x08onresize\x01\x01\x04this\x08onresize\x01\x00\x00\x00\"__wbg_setonresize_509e0ddd6baaba0a\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x08onresize\x01\x02\x04this\x05value\x0cset_onresize\x01\x00\x00\x00\x1f__wbg_onscroll_febbd4e8a55fbaf1\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x08onscroll\x01\x01\x04this\x08onscroll\x01\x00\x00\x00\"__wbg_setonscroll_5430176e04b4824a\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x08onscroll\x01\x02\x04this\x05value\x0cset_onscroll\x01\x00\x00\x00\x1f__wbg_onseeked_4203cf2c58d9383d\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x08onseeked\x01\x01\x04this\x08onseeked\x01\x00\x00\x00\"__wbg_setonseeked_0d584fba8104941a\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x08onseeked\x01\x02\x04this\x05value\x0cset_onseeked\x01\x00\x00\x00 __wbg_onseeking_940d0e1de6949a43\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\tonseeking\x01\x01\x04this\tonseeking\x01\x00\x00\x00#__wbg_setonseeking_11a5aa351940199a\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\tonseeking\x01\x02\x04this\x05value\rset_onseeking\x01\x00\x00\x00\x1f__wbg_onselect_fb665d82282ac44a\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x08onselect\x01\x01\x04this\x08onselect\x01\x00\x00\x00\"__wbg_setonselect_ae3097a44ffcc0a1\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x08onselect\x01\x02\x04this\x05value\x0cset_onselect\x01\x00\x00\x00\x1d__wbg_onshow_d79aa4e815e1e41e\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x06onshow\x01\x01\x04this\x06onshow\x01\x00\x00\x00 __wbg_setonshow_9681bd8de4bbc8f5\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x06onshow\x01\x02\x04this\x05value\nset_onshow\x01\x00\x00\x00 __wbg_onstalled_753ec759fb439565\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\tonstalled\x01\x01\x04this\tonstalled\x01\x00\x00\x00#__wbg_setonstalled_a762e763c2ce45a7\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\tonstalled\x01\x02\x04this\x05value\rset_onstalled\x01\x00\x00\x00\x1f__wbg_onsubmit_31b2ed3bd295facb\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x08onsubmit\x01\x01\x04this\x08onsubmit\x01\x00\x00\x00\"__wbg_setonsubmit_7631a0aa9d75897c\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x08onsubmit\x01\x02\x04this\x05value\x0cset_onsubmit\x01\x00\x00\x00 __wbg_onsuspend_9287b7403fd57362\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\tonsuspend\x01\x01\x04this\tonsuspend\x01\x00\x00\x00#__wbg_setonsuspend_f9a3cc7425be6ef4\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\tonsuspend\x01\x02\x04this\x05value\rset_onsuspend\x01\x00\x00\x00#__wbg_ontimeupdate_d84d51e70d938340\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0contimeupdate\x01\x01\x04this\x0contimeupdate\x01\x00\x00\x00&__wbg_setontimeupdate_ce957038c6355ca6\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0contimeupdate\x01\x02\x04this\x05value\x10set_ontimeupdate\x01\x00\x00\x00%__wbg_onvolumechange_4dd4bded63276142\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0eonvolumechange\x01\x01\x04this\x0eonvolumechange\x01\x00\x00\x00(__wbg_setonvolumechange_ce55e044c6d9eca8\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0eonvolumechange\x01\x02\x04this\x05value\x12set_onvolumechange\x01\x00\x00\x00 __wbg_onwaiting_044667e38fe2d365\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\tonwaiting\x01\x01\x04this\tonwaiting\x01\x00\x00\x00#__wbg_setonwaiting_f178536c3c5f3bf2\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\tonwaiting\x01\x02\x04this\x05value\rset_onwaiting\x01\x00\x00\x00$__wbg_onselectstart_d76bebd0fa1e622f\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\ronselectstart\x01\x01\x04this\ronselectstart\x01\x00\x00\x00\'__wbg_setonselectstart_cdfdf38e371b2ef8\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\ronselectstart\x01\x02\x04this\x05value\x11set_onselectstart\x01\x00\x00\x00\x1f__wbg_ontoggle_7be8f1635435e0e1\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x08ontoggle\x01\x01\x04this\x08ontoggle\x01\x00\x00\x00\"__wbg_setontoggle_361182b0c60a73f2\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x08ontoggle\x01\x02\x04this\x05value\x0cset_ontoggle\x01\x00\x00\x00&__wbg_onpointercancel_7de3b706ff4ff9a4\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0fonpointercancel\x01\x01\x04this\x0fonpointercancel\x01\x00\x00\x00)__wbg_setonpointercancel_1bbfdcfefaf9663d\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0fonpointercancel\x01\x02\x04this\x05value\x13set_onpointercancel\x01\x00\x00\x00$__wbg_onpointerdown_f063959d473b71bd\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\ronpointerdown\x01\x01\x04this\ronpointerdown\x01\x00\x00\x00\'__wbg_setonpointerdown_a567f402e98e87ed\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\ronpointerdown\x01\x02\x04this\x05value\x11set_onpointerdown\x01\x00\x00\x00\"__wbg_onpointerup_506741faa6f86c0d\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0bonpointerup\x01\x01\x04this\x0bonpointerup\x01\x00\x00\x00%__wbg_setonpointerup_b3050dafc0dd3485\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0bonpointerup\x01\x02\x04this\x05value\x0fset_onpointerup\x01\x00\x00\x00$__wbg_onpointermove_1887987b8401c816\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\ronpointermove\x01\x01\x04this\ronpointermove\x01\x00\x00\x00\'__wbg_setonpointermove_22e0cb04c9e93a74\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\ronpointermove\x01\x02\x04this\x05value\x11set_onpointermove\x01\x00\x00\x00#__wbg_onpointerout_279d781fa6b399dc\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0conpointerout\x01\x01\x04this\x0conpointerout\x01\x00\x00\x00&__wbg_setonpointerout_c207f96f499500a0\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0conpointerout\x01\x02\x04this\x05value\x10set_onpointerout\x01\x00\x00\x00$__wbg_onpointerover_c1dfca438fbb8b45\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\ronpointerover\x01\x01\x04this\ronpointerover\x01\x00\x00\x00\'__wbg_setonpointerover_18927658a600731b\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\ronpointerover\x01\x02\x04this\x05value\x11set_onpointerover\x01\x00\x00\x00%__wbg_onpointerenter_08b0c83e2557b649\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0eonpointerenter\x01\x01\x04this\x0eonpointerenter\x01\x00\x00\x00(__wbg_setonpointerenter_fe36cc536fefacd2\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0eonpointerenter\x01\x02\x04this\x05value\x12set_onpointerenter\x01\x00\x00\x00%__wbg_onpointerleave_66c1bfefa1a2146d\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0eonpointerleave\x01\x01\x04this\x0eonpointerleave\x01\x00\x00\x00(__wbg_setonpointerleave_2e13d057ab4e0967\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0eonpointerleave\x01\x02\x04this\x05value\x12set_onpointerleave\x01\x00\x00\x00*__wbg_ongotpointercapture_f637cd62604b62fb\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x13ongotpointercapture\x01\x01\x04this\x13ongotpointercapture\x01\x00\x00\x00-__wbg_setongotpointercapture_13a2632d6c4fcca7\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x13ongotpointercapture\x01\x02\x04this\x05value\x17set_ongotpointercapture\x01\x00\x00\x00+__wbg_onlostpointercapture_bc6b08e8f5739fdb\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x14onlostpointercapture\x01\x01\x04this\x14onlostpointercapture\x01\x00\x00\x00.__wbg_setonlostpointercapture_f0855967a6b46b20\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x14onlostpointercapture\x01\x02\x04this\x05value\x18set_onlostpointercapture\x01\x00\x00\x00(__wbg_onanimationcancel_efe6d4f0f7f370ac\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x11onanimationcancel\x01\x01\x04this\x11onanimationcancel\x01\x00\x00\x00+__wbg_setonanimationcancel_60c79a6343bf10cd\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x11onanimationcancel\x01\x02\x04this\x05value\x15set_onanimationcancel\x01\x00\x00\x00%__wbg_onanimationend_b60dd8c2b9fdd7b2\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0eonanimationend\x01\x01\x04this\x0eonanimationend\x01\x00\x00\x00(__wbg_setonanimationend_9a452fca7b8169b9\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0eonanimationend\x01\x02\x04this\x05value\x12set_onanimationend\x01\x00\x00\x00+__wbg_onanimationiteration_cba8a02a28c468ab\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x14onanimationiteration\x01\x01\x04this\x14onanimationiteration\x01\x00\x00\x00.__wbg_setonanimationiteration_f890a2033e568628\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x14onanimationiteration\x01\x02\x04this\x05value\x18set_onanimationiteration\x01\x00\x00\x00\'__wbg_onanimationstart_50c5226a5e69c3d0\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x10onanimationstart\x01\x01\x04this\x10onanimationstart\x01\x00\x00\x00*__wbg_setonanimationstart_51763b10d4744c44\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x10onanimationstart\x01\x02\x04this\x05value\x14set_onanimationstart\x01\x00\x00\x00)__wbg_ontransitioncancel_403d2985b801c0e3\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x12ontransitioncancel\x01\x01\x04this\x12ontransitioncancel\x01\x00\x00\x00,__wbg_setontransitioncancel_966e1d73ecec26e3\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x12ontransitioncancel\x01\x02\x04this\x05value\x16set_ontransitioncancel\x01\x00\x00\x00&__wbg_ontransitionend_d29070046654f1ac\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0fontransitionend\x01\x01\x04this\x0fontransitionend\x01\x00\x00\x00)__wbg_setontransitionend_cbb29408d879e4a2\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0fontransitionend\x01\x02\x04this\x05value\x13set_ontransitionend\x01\x00\x00\x00&__wbg_ontransitionrun_0b1e8e6f0a95125a\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0fontransitionrun\x01\x01\x04this\x0fontransitionrun\x01\x00\x00\x00)__wbg_setontransitionrun_712e1871db1ee16e\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0fontransitionrun\x01\x02\x04this\x05value\x13set_ontransitionrun\x01\x00\x00\x00(__wbg_ontransitionstart_220125dc4e164d2c\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x11ontransitionstart\x01\x01\x04this\x11ontransitionstart\x01\x00\x00\x00+__wbg_setontransitionstart_b1fea978b499430e\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x11ontransitionstart\x01\x02\x04this\x05value\x15set_ontransitionstart\x01\x00\x00\x00+__wbg_onwebkitanimationend_9e274d6bb06f77a8\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x14onwebkitanimationend\x01\x01\x04this\x14onwebkitanimationend\x01\x00\x00\x00.__wbg_setonwebkitanimationend_e97b7c61708e3754\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x14onwebkitanimationend\x01\x02\x04this\x05value\x18set_onwebkitanimationend\x01\x00\x00\x001__wbg_onwebkitanimationiteration_bf54df27415ec972\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x1aonwebkitanimationiteration\x01\x01\x04this\x1aonwebkitanimationiteration\x01\x00\x00\x004__wbg_setonwebkitanimationiteration_fb32c0af5138972f\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x1aonwebkitanimationiteration\x01\x02\x04this\x05value\x1eset_onwebkitanimationiteration\x01\x00\x00\x00-__wbg_onwebkitanimationstart_557edc13741e5a61\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x16onwebkitanimationstart\x01\x01\x04this\x16onwebkitanimationstart\x01\x00\x00\x000__wbg_setonwebkitanimationstart_b1af2d07a8a16f13\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x16onwebkitanimationstart\x01\x02\x04this\x05value\x1aset_onwebkitanimationstart\x01\x00\x00\x00,__wbg_onwebkittransitionend_a877d00a737427fb\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x15onwebkittransitionend\x01\x01\x04this\x15onwebkittransitionend\x01\x00\x00\x00/__wbg_setonwebkittransitionend_840335b7f0b999ed\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x15onwebkittransitionend\x01\x02\x04this\x05value\x19set_onwebkittransitionend\x01\x00\x00\x00\x1e__wbg_onerror_2dc4cf3de15bbf54\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x07onerror\x01\x01\x04this\x07onerror\x01\x00\x00\x00!__wbg_setonerror_b91169e64312f1fa\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x07onerror\x01\x02\x04this\x05value\x0bset_onerror\x01\x00\x00\x00#__wbg_ontouchstart_c75a7840598680bf\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0contouchstart\x01\x01\x04this\x0contouchstart\x01\x00\x00\x00&__wbg_setontouchstart_c724c1ed8856a626\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0contouchstart\x01\x02\x04this\x05value\x10set_ontouchstart\x01\x00\x00\x00!__wbg_ontouchend_100e0b1f8e1a4a43\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\nontouchend\x01\x01\x04this\nontouchend\x01\x00\x00\x00$__wbg_setontouchend_200abcd9a6e9ad78\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\nontouchend\x01\x02\x04this\x05value\x0eset_ontouchend\x01\x00\x00\x00\"__wbg_ontouchmove_6afd92245094f9ab\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\x0bontouchmove\x01\x01\x04this\x0bontouchmove\x01\x00\x00\x00%__wbg_setontouchmove_fe6d489b47d576fd\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\x0bontouchmove\x01\x02\x04this\x05value\x0fset_ontouchmove\x01\x00\x00\x00$__wbg_ontouchcancel_7cc5a2d5e4686260\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x01\rontouchcancel\x01\x01\x04this\rontouchcancel\x01\x00\x00\x00\'__wbg_setontouchcancel_3d04b45dedf01f21\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x02\rontouchcancel\x01\x02\x04this\x05value\x11set_ontouchcancel\x01\x00\x00\x00\x1b__wbg_blur_ce911f2628ddbdd6\x01\x00\x00\x01\x0bHTMLElement\x01\x00\x00\x01\x01\x04this\x04blur\x01\x00\x00\x00\x1c__wbg_click_1e787c2777ec0972\x00\x00\x00\x01\x0bHTMLElement\x01\x00\x00\x01\x01\x04this\x05click\x01\x00\x00\x00\x1c__wbg_focus_5f74cb245be46131\x01\x00\x00\x01\x0bHTMLElement\x01\x00\x00\x01\x01\x04this\x05focus\x01\x00\x00\x00\x00\x18web-sys-2ffcad8c6dc62865\x00"
        };
    }
    #[cfg(feature = "HtmlElement")]
    pub use gen_HtmlElement::*;
    #[cfg(feature = "MessageEvent")]
    #[allow(non_snake_case)]
    mod gen_MessageEvent {
        #![allow(unused_imports)]
        use super::*;
        use wasm_bindgen::prelude::*;
        #[allow(bad_style)]
        ///The `MessageEvent` class.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`*
        ///
        #[repr(transparent)]
        #[allow(clippy::all)]
        pub struct MessageEvent {
            obj: Event,
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::fmt::Debug for MessageEvent {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    MessageEvent {
                        obj: ref __self_0_0,
                    } => {
                        let mut debug_trait_builder = f.debug_struct("MessageEvent");
                        let _ = debug_trait_builder.field("obj", &&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::clone::Clone for MessageEvent {
            #[inline]
            fn clone(&self) -> MessageEvent {
                match *self {
                    MessageEvent {
                        obj: ref __self_0_0,
                    } => MessageEvent {
                        obj: ::core::clone::Clone::clone(&(*__self_0_0)),
                    },
                }
            }
        }
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::marker::StructuralPartialEq for MessageEvent {}
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::PartialEq for MessageEvent {
            #[inline]
            fn eq(&self, other: &MessageEvent) -> bool {
                match *other {
                    MessageEvent {
                        obj: ref __self_1_0,
                    } => match *self {
                        MessageEvent {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) == (*__self_1_0),
                    },
                }
            }
            #[inline]
            fn ne(&self, other: &MessageEvent) -> bool {
                match *other {
                    MessageEvent {
                        obj: ref __self_1_0,
                    } => match *self {
                        MessageEvent {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) != (*__self_1_0),
                    },
                }
            }
        }
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::marker::StructuralEq for MessageEvent {}
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::Eq for MessageEvent {
            #[inline]
            #[doc(hidden)]
            fn assert_receiver_is_total_eq(&self) -> () {
                {
                    let _: ::core::cmp::AssertParamIsEq<Event>;
                }
            }
        }
        #[allow(bad_style)]
        #[allow(clippy::all)]
        const __wbg_generated_const_MessageEvent: () = {
            use wasm_bindgen::__rt::core;
            use wasm_bindgen::convert::RefFromWasmAbi;
            use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
            use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
            use wasm_bindgen::describe::WasmDescribe;
            use wasm_bindgen::{JsCast, JsValue};
            impl WasmDescribe for MessageEvent {
                fn describe() {
                    use wasm_bindgen::describe::*;
                    inform(NAMED_EXTERNREF);
                    inform(12u32);
                    inform(77u32);
                    inform(101u32);
                    inform(115u32);
                    inform(115u32);
                    inform(97u32);
                    inform(103u32);
                    inform(101u32);
                    inform(69u32);
                    inform(118u32);
                    inform(101u32);
                    inform(110u32);
                    inform(116u32);
                }
            }
            impl core::ops::Deref for MessageEvent {
                type Target = Event;
                #[inline]
                fn deref(&self) -> &Event {
                    &self.obj
                }
            }
            impl IntoWasmAbi for MessageEvent {
                type Abi = <JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    self.obj.into_abi()
                }
            }
            impl OptionIntoWasmAbi for MessageEvent {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl<'a> OptionIntoWasmAbi for &'a MessageEvent {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl FromWasmAbi for MessageEvent {
                type Abi = <JsValue as FromWasmAbi>::Abi;
                #[inline]
                unsafe fn from_abi(js: Self::Abi) -> Self {
                    MessageEvent {
                        obj: JsValue::from_abi(js).into(),
                    }
                }
            }
            impl OptionFromWasmAbi for MessageEvent {
                #[inline]
                fn is_none(abi: &Self::Abi) -> bool {
                    *abi == 0
                }
            }
            impl<'a> IntoWasmAbi for &'a MessageEvent {
                type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    (&self.obj).into_abi()
                }
            }
            impl RefFromWasmAbi for MessageEvent {
                type Abi = <JsValue as RefFromWasmAbi>::Abi;
                type Anchor = core::mem::ManuallyDrop<MessageEvent>;
                #[inline]
                unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
                    let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
                    core::mem::ManuallyDrop::new(MessageEvent {
                        obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
                    })
                }
            }
            impl From<JsValue> for MessageEvent {
                #[inline]
                fn from(obj: JsValue) -> MessageEvent {
                    MessageEvent { obj: obj.into() }
                }
            }
            impl AsRef<JsValue> for MessageEvent {
                #[inline]
                fn as_ref(&self) -> &JsValue {
                    self.obj.as_ref()
                }
            }
            impl AsRef<MessageEvent> for MessageEvent {
                #[inline]
                fn as_ref(&self) -> &MessageEvent {
                    self
                }
            }
            impl From<MessageEvent> for JsValue {
                #[inline]
                fn from(obj: MessageEvent) -> JsValue {
                    obj.obj.into()
                }
            }
            impl JsCast for MessageEvent {
                fn instanceof(val: &JsValue) -> bool {
                    #[link(wasm_import_module = "__wbindgen_placeholder__")]
                    #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                    extern "C" {
                        fn __wbg_instanceof_MessageEvent_bf1ff48fdc2c056a(val: u32) -> u32;
                    }
                    unsafe {
                        let idx = val.into_abi();
                        __wbg_instanceof_MessageEvent_bf1ff48fdc2c056a(idx) != 0
                    }
                }
                #[inline]
                fn unchecked_from_js(val: JsValue) -> Self {
                    MessageEvent { obj: val.into() }
                }
                #[inline]
                fn unchecked_from_js_ref(val: &JsValue) -> &Self {
                    unsafe { &*(val as *const JsValue as *const MessageEvent) }
                }
            }
            ()
        };
        #[allow(clippy::all)]
        impl From<MessageEvent> for Event {
            #[inline]
            fn from(obj: MessageEvent) -> Event {
                use wasm_bindgen::JsCast;
                Event::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<Event> for MessageEvent {
            #[inline]
            fn as_ref(&self) -> &Event {
                use wasm_bindgen::JsCast;
                Event::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<MessageEvent> for ::js_sys::Object {
            #[inline]
            fn from(obj: MessageEvent) -> ::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<::js_sys::Object> for MessageEvent {
            #[inline]
            fn as_ref(&self) -> &::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js_ref(self.as_ref())
            }
        }
        ///Getter for the `data` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_data_5202563349cacee4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&MessageEvent as WasmDescribe>::describe();
            <::wasm_bindgen::JsValue as WasmDescribe>::describe();
        }
        impl MessageEvent {
            ///Getter for the `data` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn data(&self) -> ::wasm_bindgen::JsValue {
                ///Getter for the `data` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/data)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_data_5202563349cacee4(
                        this: <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_data_5202563349cacee4(this)
                    };
                    <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `origin` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/origin)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_origin_60007577d2ad1fbc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&MessageEvent as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl MessageEvent {
            ///Getter for the `origin` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/origin)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn origin(&self) -> String {
                ///Getter for the `origin` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/origin)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_origin_60007577d2ad1fbc(
                        this: <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_origin_60007577d2ad1fbc(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `lastEventId` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/lastEventId)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lastEventId_57414df7eb51acd8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&MessageEvent as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl MessageEvent {
            ///Getter for the `lastEventId` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/lastEventId)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn last_event_id(&self) -> String {
                ///Getter for the `lastEventId` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/lastEventId)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lastEventId_57414df7eb51acd8(
                        this: <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_lastEventId_57414df7eb51acd8(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `source` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/source)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_source_65395cab8189f913() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&MessageEvent as WasmDescribe>::describe();
            <Option<::js_sys::Object> as WasmDescribe>::describe();
        }
        impl MessageEvent {
            ///Getter for the `source` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/source)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn source(&self) -> Option<::js_sys::Object> {
                ///Getter for the `source` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/source)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_source_65395cab8189f913(
                        this: <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_source_65395cab8189f913(this)
                    };
                    <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `ports` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/ports)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ports_866d492f90be73bb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&MessageEvent as WasmDescribe>::describe();
            <::js_sys::Array as WasmDescribe>::describe();
        }
        impl MessageEvent {
            ///Getter for the `ports` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/ports)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ports(&self) -> ::js_sys::Array {
                ///Getter for the `ports` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/ports)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ports_866d492f90be73bb(
                        this: <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ports_866d492f90be73bb(this)
                    };
                    <::js_sys::Array as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `new MessageEvent(..)` constructor, creating a new instance of `MessageEvent`.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/MessageEvent)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_new_a0ce1ed511806f54() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&str as WasmDescribe>::describe();
            <MessageEvent as WasmDescribe>::describe();
        }
        impl MessageEvent {
            ///The `new MessageEvent(..)` constructor, creating a new instance of `MessageEvent`.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/MessageEvent)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn new(type_: &str) -> Result<MessageEvent, JsValue> {
                ///The `new MessageEvent(..)` constructor, creating a new instance of `MessageEvent`.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/MessageEvent)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_new_a0ce1ed511806f54(
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <MessageEvent as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        __wbg_new_a0ce1ed511806f54(type_)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<MessageEvent as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl MessageEvent {}
        ///The `initMessageEvent()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_initMessageEvent_768c6bf1b85dd236() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&MessageEvent as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl MessageEvent {
            ///The `initMessageEvent()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn init_message_event(&self, type_: &str) {
                ///The `initMessageEvent()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_initMessageEvent_768c6bf1b85dd236(
                        this: <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        __wbg_initMessageEvent_768c6bf1b85dd236(this, type_)
                    };
                    ()
                }
            }
        }
        ///The `initMessageEvent()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_initMessageEvent_08fb6953406b1191() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&MessageEvent as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl MessageEvent {
            ///The `initMessageEvent()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn init_message_event_with_bubbles(&self, type_: &str, bubbles: bool) {
                ///The `initMessageEvent()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_initMessageEvent_08fb6953406b1191(
                        this: <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        bubbles: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let bubbles =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles);
                        __wbg_initMessageEvent_08fb6953406b1191(this, type_, bubbles)
                    };
                    ()
                }
            }
        }
        ///The `initMessageEvent()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_initMessageEvent_bbd6b37ef36210d2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&MessageEvent as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl MessageEvent {
            ///The `initMessageEvent()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn init_message_event_with_bubbles_and_cancelable(
                &self,
                type_: &str,
                bubbles: bool,
                cancelable: bool,
            ) {
                ///The `initMessageEvent()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_initMessageEvent_bbd6b37ef36210d2(
                        this: <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        bubbles: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        cancelable: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let bubbles =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles);
                        let cancelable =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable);
                        __wbg_initMessageEvent_bbd6b37ef36210d2(this, type_, bubbles, cancelable)
                    };
                    ()
                }
            }
        }
        ///The `initMessageEvent()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_initMessageEvent_2f5b84ffec325825() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&MessageEvent as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl MessageEvent {
            ///The `initMessageEvent()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn init_message_event_with_bubbles_and_cancelable_and_data(
                &self,
                type_: &str,
                bubbles: bool,
                cancelable: bool,
                data: &::wasm_bindgen::JsValue,
            ) {
                ///The `initMessageEvent()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_initMessageEvent_2f5b84ffec325825(
                        this: <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        bubbles: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        cancelable: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let bubbles =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles);
                        let cancelable =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable);
                        let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data) ;
                        __wbg_initMessageEvent_2f5b84ffec325825(
                            this, type_, bubbles, cancelable, data,
                        )
                    };
                    ()
                }
            }
        }
        ///The `initMessageEvent()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_initMessageEvent_489f8618bbc5bdc1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&MessageEvent as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl MessageEvent {
            ///The `initMessageEvent()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn init_message_event_with_bubbles_and_cancelable_and_data_and_origin(
                &self,
                type_: &str,
                bubbles: bool,
                cancelable: bool,
                data: &::wasm_bindgen::JsValue,
                origin: &str,
            ) {
                ///The `initMessageEvent()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_initMessageEvent_489f8618bbc5bdc1(
                        this: <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        bubbles: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        cancelable: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let bubbles =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles);
                        let cancelable =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable);
                        let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data) ;
                        let origin = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(origin);
                        __wbg_initMessageEvent_489f8618bbc5bdc1(
                            this, type_, bubbles, cancelable, data, origin,
                        )
                    };
                    ()
                }
            }
        }
        ///The `initMessageEvent()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_initMessageEvent_b3573738654c0631() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&MessageEvent as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl MessageEvent {
            ///The `initMessageEvent()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id(
                &self,
                type_: &str,
                bubbles: bool,
                cancelable: bool,
                data: &::wasm_bindgen::JsValue,
                origin: &str,
                last_event_id: &str,
            ) {
                ///The `initMessageEvent()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_initMessageEvent_b3573738654c0631(
                        this: <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        bubbles: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        cancelable: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        last_event_id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let bubbles =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles);
                        let cancelable =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable);
                        let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data) ;
                        let origin = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(origin);
                        let last_event_id =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(last_event_id);
                        __wbg_initMessageEvent_b3573738654c0631(
                            this,
                            type_,
                            bubbles,
                            cancelable,
                            data,
                            origin,
                            last_event_id,
                        )
                    };
                    ()
                }
            }
        }
        #[cfg(feature = "Window")]
        ///The `initMessageEvent()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`, `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_initMessageEvent_9043a3c67d8cca6d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&MessageEvent as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<&Window> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl MessageEvent {
            #[cfg(feature = "Window")]
            ///The `initMessageEvent()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`, `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window(
                &self,
                type_: &str,
                bubbles: bool,
                cancelable: bool,
                data: &::wasm_bindgen::JsValue,
                origin: &str,
                last_event_id: &str,
                source: Option<&Window>,
            ) {
                #[cfg(feature = "Window")]
                ///The `initMessageEvent()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`, `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_initMessageEvent_9043a3c67d8cca6d(
                        this: <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        bubbles: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        cancelable: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        last_event_id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        source: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let bubbles =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles);
                        let cancelable =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable);
                        let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data) ;
                        let origin = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(origin);
                        let last_event_id =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(last_event_id);
                        let source =
                            <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                source,
                            );
                        __wbg_initMessageEvent_9043a3c67d8cca6d(
                            this,
                            type_,
                            bubbles,
                            cancelable,
                            data,
                            origin,
                            last_event_id,
                            source,
                        )
                    };
                    ()
                }
            }
        }
        impl MessageEvent {}
        impl MessageEvent {}
        #[cfg(feature = "Window")]
        ///The `initMessageEvent()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
        ///
        ///*This API requires the following crate features to be activated: `MessageEvent`, `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_initMessageEvent_bfaef3578b8cd350() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(9u32);
            <&MessageEvent as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<&Window> as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl MessageEvent {
            #[cfg(feature = "Window")]
            ///The `initMessageEvent()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
            ///
            ///*This API requires the following crate features to be activated: `MessageEvent`, `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn init_message_event_with_bubbles_and_cancelable_and_data_and_origin_and_last_event_id_and_opt_window_and_ports(
                &self,
                type_: &str,
                bubbles: bool,
                cancelable: bool,
                data: &::wasm_bindgen::JsValue,
                origin: &str,
                last_event_id: &str,
                source: Option<&Window>,
                ports: &::wasm_bindgen::JsValue,
            ) {
                #[cfg(feature = "Window")]
                ///The `initMessageEvent()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/MessageEvent/initMessageEvent)
                ///
                ///*This API requires the following crate features to be activated: `MessageEvent`, `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_initMessageEvent_bfaef3578b8cd350(
                        this: <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        type_: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        bubbles: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        cancelable: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        last_event_id: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        source: <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        ports : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this =
                            <&MessageEvent as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let type_ = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(type_);
                        let bubbles =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(bubbles);
                        let cancelable =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(cancelable);
                        let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data) ;
                        let origin = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(origin);
                        let last_event_id =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(last_event_id);
                        let source =
                            <Option<&Window> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                source,
                            );
                        let ports = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (ports) ;
                        __wbg_initMessageEvent_bfaef3578b8cd350(
                            this,
                            type_,
                            bubbles,
                            cancelable,
                            data,
                            origin,
                            last_event_id,
                            source,
                            ports,
                        )
                    };
                    ()
                }
            }
        }
        impl MessageEvent {}
        impl MessageEvent {}
        #[allow(non_upper_case_globals)]
        #[cfg(target_arch = "wasm32")]
        #[link_section = "__wasm_bindgen_unstable"]
        #[doc(hidden)]
        #[allow(clippy::all)]
        pub static __WASM_BINDGEN_GENERATED_f7ae1fa1a722e54f: [u8; 2293usize] = {
            static _INCLUDED_FILES: &[&str] = &[];
            * b".\x00\x00\x00{\"schema_version\":\"0.2.68\",\"version\":\"0.2.68\"}\xbf\x08\x00\x00\x00\x00\x14\x00\x00\x02\x0cMessageEvent.__wbg_instanceof_MessageEvent_bf1ff48fdc2c056a\x00\x00\x00\x00\x1b__wbg_data_5202563349cacee4\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x01\x04data\x01\x01\x04this\x04data\x01\x00\x00\x00\x1d__wbg_origin_60007577d2ad1fbc\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x01\x06origin\x01\x01\x04this\x06origin\x01\x00\x00\x00\"__wbg_lastEventId_57414df7eb51acd8\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x01\x0blastEventId\x01\x01\x04this\x0blastEventId\x01\x00\x00\x00\x1d__wbg_source_65395cab8189f913\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x01\x06source\x01\x01\x04this\x06source\x01\x00\x00\x00\x1c__wbg_ports_866d492f90be73bb\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x01\x05ports\x01\x01\x04this\x05ports\x01\x00\x00\x00\x1a__wbg_new_a0ce1ed511806f54\x01\x00\x00\x01\x0cMessageEvent\x00\x01\x01\x05type_\x03new\x01\x00\x00\x00+__wbg_newwitheventinitdict_9075015d1342d8bf\x01\x00\x00\x01\x0cMessageEvent\x00\x01\x02\x05type_\x0fevent_init_dict\x18new_with_event_init_dict\x01\x00\x00\x00\'__wbg_initMessageEvent_768c6bf1b85dd236\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x00\x01\x02\x04this\x05type_\x10initMessageEvent\x01\x00\x00\x00\'__wbg_initMessageEvent_08fb6953406b1191\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x00\x01\x03\x04this\x05type_\x07bubbles\x10initMessageEvent\x01\x00\x00\x00\'__wbg_initMessageEvent_bbd6b37ef36210d2\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x00\x01\x04\x04this\x05type_\x07bubbles\ncancelable\x10initMessageEvent\x01\x00\x00\x00\'__wbg_initMessageEvent_2f5b84ffec325825\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x00\x01\x05\x04this\x05type_\x07bubbles\ncancelable\x04data\x10initMessageEvent\x01\x00\x00\x00\'__wbg_initMessageEvent_489f8618bbc5bdc1\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x00\x01\x06\x04this\x05type_\x07bubbles\ncancelable\x04data\x06origin\x10initMessageEvent\x01\x00\x00\x00\'__wbg_initMessageEvent_b3573738654c0631\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x00\x01\x07\x04this\x05type_\x07bubbles\ncancelable\x04data\x06origin\rlast_event_id\x10initMessageEvent\x01\x00\x00\x00\'__wbg_initMessageEvent_9043a3c67d8cca6d\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x00\x01\x08\x04this\x05type_\x07bubbles\ncancelable\x04data\x06origin\rlast_event_id\x06source\x10initMessageEvent\x01\x00\x00\x00\'__wbg_initMessageEvent_4c87355f42656fbb\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x00\x01\x08\x04this\x05type_\x07bubbles\ncancelable\x04data\x06origin\rlast_event_id\x06source\x10initMessageEvent\x01\x00\x00\x00\'__wbg_initMessageEvent_0b274729d574cbe3\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x00\x01\x08\x04this\x05type_\x07bubbles\ncancelable\x04data\x06origin\rlast_event_id\x06source\x10initMessageEvent\x01\x00\x00\x00\'__wbg_initMessageEvent_bfaef3578b8cd350\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x00\x01\t\x04this\x05type_\x07bubbles\ncancelable\x04data\x06origin\rlast_event_id\x06source\x05ports\x10initMessageEvent\x01\x00\x00\x00\'__wbg_initMessageEvent_e0582550ed95095f\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x00\x01\t\x04this\x05type_\x07bubbles\ncancelable\x04data\x06origin\rlast_event_id\x06source\x05ports\x10initMessageEvent\x01\x00\x00\x00\'__wbg_initMessageEvent_03d84143425a85a0\x00\x00\x00\x01\x0cMessageEvent\x01\x00\x00\x01\t\x04this\x05type_\x07bubbles\ncancelable\x04data\x06origin\rlast_event_id\x06source\x05ports\x10initMessageEvent\x01\x00\x00\x00\x00\x18web-sys-2ffcad8c6dc62865\x00"
        };
    }
    #[cfg(feature = "MessageEvent")]
    pub use gen_MessageEvent::*;
    #[cfg(feature = "Node")]
    #[allow(non_snake_case)]
    mod gen_Node {
        #![allow(unused_imports)]
        use super::*;
        use wasm_bindgen::prelude::*;
        #[allow(bad_style)]
        ///The `Node` class.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        ///
        #[repr(transparent)]
        #[allow(clippy::all)]
        pub struct Node {
            obj: EventTarget,
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::fmt::Debug for Node {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    Node {
                        obj: ref __self_0_0,
                    } => {
                        let mut debug_trait_builder = f.debug_struct("Node");
                        let _ = debug_trait_builder.field("obj", &&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::clone::Clone for Node {
            #[inline]
            fn clone(&self) -> Node {
                match *self {
                    Node {
                        obj: ref __self_0_0,
                    } => Node {
                        obj: ::core::clone::Clone::clone(&(*__self_0_0)),
                    },
                }
            }
        }

        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::PartialEq for Node {
            #[inline]
            fn eq(&self, other: &Node) -> bool {
                match *other {
                    Node {
                        obj: ref __self_1_0,
                    } => match *self {
                        Node {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) == (*__self_1_0),
                    },
                }
            }
            #[inline]
            fn ne(&self, other: &Node) -> bool {
                match *other {
                    Node {
                        obj: ref __self_1_0,
                    } => match *self {
                        Node {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) != (*__self_1_0),
                    },
                }
            }
        }
        #[allow(bad_style)]
        #[allow(clippy::all)]
        const __wbg_generated_const_Node: () = {
            use wasm_bindgen::__rt::core;
            use wasm_bindgen::convert::RefFromWasmAbi;
            use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
            use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
            use wasm_bindgen::describe::WasmDescribe;
            use wasm_bindgen::{JsCast, JsValue};
            impl WasmDescribe for Node {
                fn describe() {
                    use wasm_bindgen::describe::*;
                    inform(NAMED_EXTERNREF);
                    inform(4u32);
                    inform(78u32);
                    inform(111u32);
                    inform(100u32);
                    inform(101u32);
                }
            }
            impl core::ops::Deref for Node {
                type Target = EventTarget;
                #[inline]
                fn deref(&self) -> &EventTarget {
                    &self.obj
                }
            }
            impl IntoWasmAbi for Node {
                type Abi = <JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    self.obj.into_abi()
                }
            }
            impl OptionIntoWasmAbi for Node {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl<'a> OptionIntoWasmAbi for &'a Node {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl FromWasmAbi for Node {
                type Abi = <JsValue as FromWasmAbi>::Abi;
                #[inline]
                unsafe fn from_abi(js: Self::Abi) -> Self {
                    Node {
                        obj: JsValue::from_abi(js).into(),
                    }
                }
            }
            impl OptionFromWasmAbi for Node {
                #[inline]
                fn is_none(abi: &Self::Abi) -> bool {
                    *abi == 0
                }
            }
            impl<'a> IntoWasmAbi for &'a Node {
                type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    (&self.obj).into_abi()
                }
            }
            impl RefFromWasmAbi for Node {
                type Abi = <JsValue as RefFromWasmAbi>::Abi;
                type Anchor = core::mem::ManuallyDrop<Node>;
                #[inline]
                unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
                    let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
                    core::mem::ManuallyDrop::new(Node {
                        obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
                    })
                }
            }
            impl From<JsValue> for Node {
                #[inline]
                fn from(obj: JsValue) -> Node {
                    Node { obj: obj.into() }
                }
            }
            impl AsRef<JsValue> for Node {
                #[inline]
                fn as_ref(&self) -> &JsValue {
                    self.obj.as_ref()
                }
            }
            impl AsRef<Node> for Node {
                #[inline]
                fn as_ref(&self) -> &Node {
                    self
                }
            }
            impl From<Node> for JsValue {
                #[inline]
                fn from(obj: Node) -> JsValue {
                    obj.obj.into()
                }
            }
            impl JsCast for Node {
                fn instanceof(val: &JsValue) -> bool {
                    #[link(wasm_import_module = "__wbindgen_placeholder__")]
                    #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                    extern "C" {
                        fn __wbg_instanceof_Node_27d89f84f47512bc(val: u32) -> u32;
                    }
                    unsafe {
                        let idx = val.into_abi();
                        __wbg_instanceof_Node_27d89f84f47512bc(idx) != 0
                    }
                }
                #[inline]
                fn unchecked_from_js(val: JsValue) -> Self {
                    Node { obj: val.into() }
                }
                #[inline]
                fn unchecked_from_js_ref(val: &JsValue) -> &Self {
                    unsafe { &*(val as *const JsValue as *const Node) }
                }
            }
            ()
        };
        #[allow(clippy::all)]
        impl From<Node> for EventTarget {
            #[inline]
            fn from(obj: Node) -> EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<EventTarget> for Node {
            #[inline]
            fn as_ref(&self) -> &EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<Node> for ::js_sys::Object {
            #[inline]
            fn from(obj: Node) -> ::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<::js_sys::Object> for Node {
            #[inline]
            fn as_ref(&self) -> &::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js_ref(self.as_ref())
            }
        }
        ///Getter for the `nodeType` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_nodeType_ff9a5fdbb9596b36() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <u16 as WasmDescribe>::describe();
        }
        impl Node {
            ///Getter for the `nodeType` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn node_type(&self) -> u16 {
                ///Getter for the `nodeType` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_nodeType_ff9a5fdbb9596b36(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <u16 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_nodeType_ff9a5fdbb9596b36(this)
                    };
                    <u16 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `nodeName` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_nodeName_9a08366fd64d163f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Node {
            ///Getter for the `nodeName` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn node_name(&self) -> String {
                ///Getter for the `nodeName` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_nodeName_9a08366fd64d163f(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_nodeName_9a08366fd64d163f(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `baseURI` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_baseURI_647884e97d486882() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Node {
            ///Getter for the `baseURI` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn base_uri(&self) -> Result<Option<String>, JsValue> {
                ///Getter for the `baseURI` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_baseURI_647884e97d486882(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_baseURI_647884e97d486882(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///Getter for the `isConnected` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_isConnected_26f5514f4a4bdf62() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Node {
            ///Getter for the `isConnected` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn is_connected(&self) -> bool {
                ///Getter for the `isConnected` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_isConnected_26f5514f4a4bdf62(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_isConnected_26f5514f4a4bdf62(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        #[cfg(feature = "Document")]
        ///Getter for the `ownerDocument` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ownerDocument_aef64e3119aef8de() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <Option<Document> as WasmDescribe>::describe();
        }
        impl Node {
            #[cfg(feature = "Document")]
            ///Getter for the `ownerDocument` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn owner_document(&self) -> Option<Document> {
                #[cfg(feature = "Document")]
                ///Getter for the `ownerDocument` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ownerDocument_aef64e3119aef8de(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Document> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ownerDocument_aef64e3119aef8de(this)
                    };
                    <Option<Document> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `parentNode` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_parentNode_db05ccf650c91ca7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <Option<Node> as WasmDescribe>::describe();
        }
        impl Node {
            ///Getter for the `parentNode` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn parent_node(&self) -> Option<Node> {
                ///Getter for the `parentNode` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_parentNode_db05ccf650c91ca7(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_parentNode_db05ccf650c91ca7(this)
                    };
                    <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        #[cfg(feature = "Element")]
        ///Getter for the `parentElement` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement)
        ///
        ///*This API requires the following crate features to be activated: `Element`, `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_parentElement_41bda1ad58a631b1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Node {
            #[cfg(feature = "Element")]
            ///Getter for the `parentElement` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement)
            ///
            ///*This API requires the following crate features to be activated: `Element`, `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn parent_element(&self) -> Option<Element> {
                #[cfg(feature = "Element")]
                ///Getter for the `parentElement` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement)
                ///
                ///*This API requires the following crate features to be activated: `Element`, `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_parentElement_41bda1ad58a631b1(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_parentElement_41bda1ad58a631b1(this)
                    };
                    <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Node {}
        ///Getter for the `firstChild` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_firstChild_da572db3c494324b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <Option<Node> as WasmDescribe>::describe();
        }
        impl Node {
            ///Getter for the `firstChild` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn first_child(&self) -> Option<Node> {
                ///Getter for the `firstChild` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_firstChild_da572db3c494324b(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_firstChild_da572db3c494324b(this)
                    };
                    <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `lastChild` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lastChild_4a41600911ce94c7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <Option<Node> as WasmDescribe>::describe();
        }
        impl Node {
            ///Getter for the `lastChild` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn last_child(&self) -> Option<Node> {
                ///Getter for the `lastChild` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lastChild_4a41600911ce94c7(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_lastChild_4a41600911ce94c7(this)
                    };
                    <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `previousSibling` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_previousSibling_b0d402941b802279() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <Option<Node> as WasmDescribe>::describe();
        }
        impl Node {
            ///Getter for the `previousSibling` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn previous_sibling(&self) -> Option<Node> {
                ///Getter for the `previousSibling` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_previousSibling_b0d402941b802279(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_previousSibling_b0d402941b802279(this)
                    };
                    <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `nextSibling` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_nextSibling_91d4e5504e422251() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <Option<Node> as WasmDescribe>::describe();
        }
        impl Node {
            ///Getter for the `nextSibling` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn next_sibling(&self) -> Option<Node> {
                ///Getter for the `nextSibling` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_nextSibling_91d4e5504e422251(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_nextSibling_91d4e5504e422251(this)
                    };
                    <Option<Node> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `nodeValue` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_nodeValue_81acb290f85a1025() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Node {
            ///Getter for the `nodeValue` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn node_value(&self) -> Option<String> {
                ///Getter for the `nodeValue` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_nodeValue_81acb290f85a1025(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_nodeValue_81acb290f85a1025(this)
                    };
                    <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `nodeValue` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setnodeValue_ec452cd3716fee72() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Node as WasmDescribe>::describe();
            <Option<&str> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Node {
            ///Setter for the `nodeValue` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_node_value(&self, value: Option<&str>) {
                ///Setter for the `nodeValue` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setnodeValue_ec452cd3716fee72(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value =
                            <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setnodeValue_ec452cd3716fee72(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `textContent` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_textContent_26582d13b9c5ea07() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Node {
            ///Getter for the `textContent` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn text_content(&self) -> Option<String> {
                ///Getter for the `textContent` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_textContent_26582d13b9c5ea07(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_textContent_26582d13b9c5ea07(this)
                    };
                    <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Setter for the `textContent` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_settextContent_9ac5ef9163ad40d0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Node as WasmDescribe>::describe();
            <Option<&str> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Node {
            ///Setter for the `textContent` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_text_content(&self, value: Option<&str>) {
                ///Setter for the `textContent` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_settextContent_9ac5ef9163ad40d0(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value =
                            <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_settextContent_9ac5ef9163ad40d0(this, value)
                    };
                    ()
                }
            }
        }
        ///The `appendChild()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_appendChild_77215fd672b162c5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <Node as WasmDescribe>::describe();
        }
        impl Node {
            ///The `appendChild()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn append_child(&self, node: &Node) -> Result<Node, JsValue> {
                ///The `appendChild()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_appendChild_77215fd672b162c5(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let node = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                        __wbg_appendChild_77215fd672b162c5(this, node)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `cloneNode()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_cloneNode_80c55f6f86f0ca5c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <Node as WasmDescribe>::describe();
        }
        impl Node {
            ///The `cloneNode()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn clone_node(&self) -> Result<Node, JsValue> {
                ///The `cloneNode()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_cloneNode_80c55f6f86f0ca5c(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_cloneNode_80c55f6f86f0ca5c(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `cloneNode()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_cloneNode_1db72f2b069d47b9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Node as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
            <Node as WasmDescribe>::describe();
        }
        impl Node {
            ///The `cloneNode()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn clone_node_with_deep(&self, deep: bool) -> Result<Node, JsValue> {
                ///The `cloneNode()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_cloneNode_1db72f2b069d47b9(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        deep: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let deep = <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(deep);
                        __wbg_cloneNode_1db72f2b069d47b9(this, deep)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `compareDocumentPosition()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_compareDocumentPosition_a2ab3a72e8d3991c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <u16 as WasmDescribe>::describe();
        }
        impl Node {
            ///The `compareDocumentPosition()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn compare_document_position(&self, other: &Node) -> u16 {
                ///The `compareDocumentPosition()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_compareDocumentPosition_a2ab3a72e8d3991c(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        other: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <u16 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let other = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(other);
                        __wbg_compareDocumentPosition_a2ab3a72e8d3991c(this, other)
                    };
                    <u16 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `contains()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/contains)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_contains_296e58d3d248ddb6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Node as WasmDescribe>::describe();
            <Option<&Node> as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Node {
            ///The `contains()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/contains)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn contains(&self, other: Option<&Node>) -> bool {
                ///The `contains()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/contains)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_contains_296e58d3d248ddb6(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        other: <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let other =
                            <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(other);
                        __wbg_contains_296e58d3d248ddb6(this, other)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `getRootNode()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_getRootNode_df54becde9cdfc1c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <Node as WasmDescribe>::describe();
        }
        impl Node {
            ///The `getRootNode()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn get_root_node(&self) -> Node {
                ///The `getRootNode()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_getRootNode_df54becde9cdfc1c(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_getRootNode_df54becde9cdfc1c(this)
                    };
                    <Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Node {}
        ///The `hasChildNodes()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_hasChildNodes_94c7ff4bcadb1984() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Node {
            ///The `hasChildNodes()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn has_child_nodes(&self) -> bool {
                ///The `hasChildNodes()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_hasChildNodes_94c7ff4bcadb1984(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_hasChildNodes_94c7ff4bcadb1984(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `insertBefore()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_insertBefore_ea385f1d7ec76e50() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <Option<&Node> as WasmDescribe>::describe();
            <Node as WasmDescribe>::describe();
        }
        impl Node {
            ///The `insertBefore()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn insert_before(
                &self,
                node: &Node,
                child: Option<&Node>,
            ) -> Result<Node, JsValue> {
                ///The `insertBefore()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_insertBefore_ea385f1d7ec76e50(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        child: <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let node = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                        let child =
                            <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(child);
                        __wbg_insertBefore_ea385f1d7ec76e50(this, node, child)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `isDefaultNamespace()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_isDefaultNamespace_c27ac555e375e981() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Node as WasmDescribe>::describe();
            <Option<&str> as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Node {
            ///The `isDefaultNamespace()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn is_default_namespace(&self, namespace: Option<&str>) -> bool {
                ///The `isDefaultNamespace()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_isDefaultNamespace_c27ac555e375e981(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let namespace =
                            <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                namespace,
                            );
                        __wbg_isDefaultNamespace_c27ac555e375e981(this, namespace)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `isEqualNode()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_isEqualNode_e01ca05058264820() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Node as WasmDescribe>::describe();
            <Option<&Node> as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Node {
            ///The `isEqualNode()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn is_equal_node(&self, node: Option<&Node>) -> bool {
                ///The `isEqualNode()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_isEqualNode_e01ca05058264820(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        node: <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let node =
                            <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                        __wbg_isEqualNode_e01ca05058264820(this, node)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `isSameNode()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_isSameNode_914a214090c65b8d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Node as WasmDescribe>::describe();
            <Option<&Node> as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Node {
            ///The `isSameNode()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn is_same_node(&self, node: Option<&Node>) -> bool {
                ///The `isSameNode()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_isSameNode_914a214090c65b8d(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        node: <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let node =
                            <Option<&Node> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                        __wbg_isSameNode_914a214090c65b8d(this, node)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `lookupNamespaceURI()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lookupNamespaceURI_5332727c114a9544() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Node as WasmDescribe>::describe();
            <Option<&str> as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Node {
            ///The `lookupNamespaceURI()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn lookup_namespace_uri(&self, prefix: Option<&str>) -> Option<String> {
                ///The `lookupNamespaceURI()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lookupNamespaceURI_5332727c114a9544(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        prefix: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let prefix =
                            <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(prefix);
                        __wbg_lookupNamespaceURI_5332727c114a9544(this, prefix)
                    };
                    <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `lookupPrefix()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_lookupPrefix_190f43a01a0b5bfc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Node as WasmDescribe>::describe();
            <Option<&str> as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Node {
            ///The `lookupPrefix()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn lookup_prefix(&self, namespace: Option<&str>) -> Option<String> {
                ///The `lookupPrefix()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_lookupPrefix_190f43a01a0b5bfc(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        namespace: <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let namespace =
                            <Option<&str> as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                namespace,
                            );
                        __wbg_lookupPrefix_190f43a01a0b5bfc(this, namespace)
                    };
                    <Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `normalize()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_normalize_f50df932d439217f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Node as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Node {
            ///The `normalize()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn normalize(&self) {
                ///The `normalize()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_normalize_f50df932d439217f(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_normalize_f50df932d439217f(this)
                    };
                    ()
                }
            }
        }
        ///The `removeChild()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_removeChild_f4829fcd2e376e1b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <Node as WasmDescribe>::describe();
        }
        impl Node {
            ///The `removeChild()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn remove_child(&self, child: &Node) -> Result<Node, JsValue> {
                ///The `removeChild()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_removeChild_f4829fcd2e376e1b(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        child: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let child = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(child);
                        __wbg_removeChild_f4829fcd2e376e1b(this, child)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `replaceChild()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild)
        ///
        ///*This API requires the following crate features to be activated: `Node`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_replaceChild_a97c4b16a9298934() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <&Node as WasmDescribe>::describe();
            <Node as WasmDescribe>::describe();
        }
        impl Node {
            ///The `replaceChild()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild)
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn replace_child(&self, node: &Node, child: &Node) -> Result<Node, JsValue> {
                ///The `replaceChild()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild)
                ///
                ///*This API requires the following crate features to be activated: `Node`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_replaceChild_a97c4b16a9298934(
                        this: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        node: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        child: <&Node as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Node as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let node = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(node);
                        let child = <&Node as wasm_bindgen::convert::IntoWasmAbi>::into_abi(child);
                        __wbg_replaceChild_a97c4b16a9298934(this, node, child)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Node as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        #[allow(non_upper_case_globals)]
        #[cfg(target_arch = "wasm32")]
        #[link_section = "__wasm_bindgen_unstable"]
        #[doc(hidden)]
        #[allow(clippy::all)]
        pub static __WASM_BINDGEN_GENERATED_4093248a0cd9b45a: [u8; 2767usize] = {
            static _INCLUDED_FILES: &[&str] = &[];
            * b".\x00\x00\x00{\"schema_version\":\"0.2.68\",\"version\":\"0.2.68\"}\x99\n\x00\x00\x00\x00\"\x00\x00\x02\x04Node&__wbg_instanceof_Node_27d89f84f47512bc\x00\x00\x00\x00\x1f__wbg_nodeType_ff9a5fdbb9596b36\x00\x00\x00\x01\x04Node\x01\x00\x01\x08nodeType\x01\x01\x04this\x08nodeType\x01\x00\x00\x00\x1f__wbg_nodeName_9a08366fd64d163f\x00\x00\x00\x01\x04Node\x01\x00\x01\x08nodeName\x01\x01\x04this\x08nodeName\x01\x00\x00\x00\x1e__wbg_baseURI_647884e97d486882\x01\x00\x00\x01\x04Node\x01\x00\x01\x07baseURI\x01\x01\x04this\x07baseURI\x01\x00\x00\x00\"__wbg_isConnected_26f5514f4a4bdf62\x00\x00\x00\x01\x04Node\x01\x00\x01\x0bisConnected\x01\x01\x04this\x0bisConnected\x01\x00\x00\x00$__wbg_ownerDocument_aef64e3119aef8de\x00\x00\x00\x01\x04Node\x01\x00\x01\rownerDocument\x01\x01\x04this\rownerDocument\x01\x00\x00\x00!__wbg_parentNode_db05ccf650c91ca7\x00\x00\x00\x01\x04Node\x01\x00\x01\nparentNode\x01\x01\x04this\nparentNode\x01\x00\x00\x00$__wbg_parentElement_41bda1ad58a631b1\x00\x00\x00\x01\x04Node\x01\x00\x01\rparentElement\x01\x01\x04this\rparentElement\x01\x00\x00\x00!__wbg_childNodes_1dec4dedb079dff2\x00\x00\x00\x01\x04Node\x01\x00\x01\nchildNodes\x01\x01\x04this\nchildNodes\x01\x00\x00\x00!__wbg_firstChild_da572db3c494324b\x00\x00\x00\x01\x04Node\x01\x00\x01\nfirstChild\x01\x01\x04this\nfirstChild\x01\x00\x00\x00 __wbg_lastChild_4a41600911ce94c7\x00\x00\x00\x01\x04Node\x01\x00\x01\tlastChild\x01\x01\x04this\tlastChild\x01\x00\x00\x00&__wbg_previousSibling_b0d402941b802279\x00\x00\x00\x01\x04Node\x01\x00\x01\x0fpreviousSibling\x01\x01\x04this\x0fpreviousSibling\x01\x00\x00\x00\"__wbg_nextSibling_91d4e5504e422251\x00\x00\x00\x01\x04Node\x01\x00\x01\x0bnextSibling\x01\x01\x04this\x0bnextSibling\x01\x00\x00\x00 __wbg_nodeValue_81acb290f85a1025\x00\x00\x00\x01\x04Node\x01\x00\x01\tnodeValue\x01\x01\x04this\tnodeValue\x01\x00\x00\x00#__wbg_setnodeValue_ec452cd3716fee72\x00\x00\x00\x01\x04Node\x01\x00\x02\tnodeValue\x01\x02\x04this\x05value\rset_nodeValue\x01\x00\x00\x00\"__wbg_textContent_26582d13b9c5ea07\x00\x00\x00\x01\x04Node\x01\x00\x01\x0btextContent\x01\x01\x04this\x0btextContent\x01\x00\x00\x00%__wbg_settextContent_9ac5ef9163ad40d0\x00\x00\x00\x01\x04Node\x01\x00\x02\x0btextContent\x01\x02\x04this\x05value\x0fset_textContent\x01\x00\x00\x00\"__wbg_appendChild_77215fd672b162c5\x01\x00\x00\x01\x04Node\x01\x00\x00\x01\x02\x04this\x04node\x0bappendChild\x01\x00\x00\x00 __wbg_cloneNode_80c55f6f86f0ca5c\x01\x00\x00\x01\x04Node\x01\x00\x00\x01\x01\x04this\tcloneNode\x01\x00\x00\x00 __wbg_cloneNode_1db72f2b069d47b9\x01\x00\x00\x01\x04Node\x01\x00\x00\x01\x02\x04this\x04deep\tcloneNode\x01\x00\x00\x00.__wbg_compareDocumentPosition_a2ab3a72e8d3991c\x00\x00\x00\x01\x04Node\x01\x00\x00\x01\x02\x04this\x05other\x17compareDocumentPosition\x01\x00\x00\x00\x1f__wbg_contains_296e58d3d248ddb6\x00\x00\x00\x01\x04Node\x01\x00\x00\x01\x02\x04this\x05other\x08contains\x01\x00\x00\x00\"__wbg_getRootNode_df54becde9cdfc1c\x00\x00\x00\x01\x04Node\x01\x00\x00\x01\x01\x04this\x0bgetRootNode\x01\x00\x00\x00\"__wbg_getRootNode_e3712d01013acde2\x00\x00\x00\x01\x04Node\x01\x00\x00\x01\x02\x04this\x07options\x0bgetRootNode\x01\x00\x00\x00$__wbg_hasChildNodes_94c7ff4bcadb1984\x00\x00\x00\x01\x04Node\x01\x00\x00\x01\x01\x04this\rhasChildNodes\x01\x00\x00\x00#__wbg_insertBefore_ea385f1d7ec76e50\x01\x00\x00\x01\x04Node\x01\x00\x00\x01\x03\x04this\x04node\x05child\x0cinsertBefore\x01\x00\x00\x00)__wbg_isDefaultNamespace_c27ac555e375e981\x00\x00\x00\x01\x04Node\x01\x00\x00\x01\x02\x04this\tnamespace\x12isDefaultNamespace\x01\x00\x00\x00\"__wbg_isEqualNode_e01ca05058264820\x00\x00\x00\x01\x04Node\x01\x00\x00\x01\x02\x04this\x04node\x0bisEqualNode\x01\x00\x00\x00!__wbg_isSameNode_914a214090c65b8d\x00\x00\x00\x01\x04Node\x01\x00\x00\x01\x02\x04this\x04node\nisSameNode\x01\x00\x00\x00)__wbg_lookupNamespaceURI_5332727c114a9544\x00\x00\x00\x01\x04Node\x01\x00\x00\x01\x02\x04this\x06prefix\x12lookupNamespaceURI\x01\x00\x00\x00#__wbg_lookupPrefix_190f43a01a0b5bfc\x00\x00\x00\x01\x04Node\x01\x00\x00\x01\x02\x04this\tnamespace\x0clookupPrefix\x01\x00\x00\x00 __wbg_normalize_f50df932d439217f\x00\x00\x00\x01\x04Node\x01\x00\x00\x01\x01\x04this\tnormalize\x01\x00\x00\x00\"__wbg_removeChild_f4829fcd2e376e1b\x01\x00\x00\x01\x04Node\x01\x00\x00\x01\x02\x04this\x05child\x0bremoveChild\x01\x00\x00\x00#__wbg_replaceChild_a97c4b16a9298934\x01\x00\x00\x01\x04Node\x01\x00\x00\x01\x03\x04this\x04node\x05child\x0creplaceChild\x01\x00\x00\x00\x00\x18web-sys-2ffcad8c6dc62865\x00"
        };
        impl Node {
            ///The `Node.ELEMENT_NODE` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const ELEMENT_NODE: u16 = 1u64 as u16;
            ///The `Node.ATTRIBUTE_NODE` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const ATTRIBUTE_NODE: u16 = 2u64 as u16;
            ///The `Node.TEXT_NODE` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const TEXT_NODE: u16 = 3u64 as u16;
            ///The `Node.CDATA_SECTION_NODE` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const CDATA_SECTION_NODE: u16 = 4u64 as u16;
            ///The `Node.ENTITY_REFERENCE_NODE` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const ENTITY_REFERENCE_NODE: u16 = 5u64 as u16;
            ///The `Node.ENTITY_NODE` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const ENTITY_NODE: u16 = 6u64 as u16;
            ///The `Node.PROCESSING_INSTRUCTION_NODE` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const PROCESSING_INSTRUCTION_NODE: u16 = 7u64 as u16;
            ///The `Node.COMMENT_NODE` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const COMMENT_NODE: u16 = 8u64 as u16;
            ///The `Node.DOCUMENT_NODE` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const DOCUMENT_NODE: u16 = 9u64 as u16;
            ///The `Node.DOCUMENT_TYPE_NODE` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const DOCUMENT_TYPE_NODE: u16 = 10u64 as u16;
            ///The `Node.DOCUMENT_FRAGMENT_NODE` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const DOCUMENT_FRAGMENT_NODE: u16 = 11u64 as u16;
            ///The `Node.NOTATION_NODE` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const NOTATION_NODE: u16 = 12u64 as u16;
            ///The `Node.DOCUMENT_POSITION_DISCONNECTED` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const DOCUMENT_POSITION_DISCONNECTED: u16 = 1u64 as u16;
            ///The `Node.DOCUMENT_POSITION_PRECEDING` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const DOCUMENT_POSITION_PRECEDING: u16 = 2u64 as u16;
            ///The `Node.DOCUMENT_POSITION_FOLLOWING` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const DOCUMENT_POSITION_FOLLOWING: u16 = 4u64 as u16;
            ///The `Node.DOCUMENT_POSITION_CONTAINS` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const DOCUMENT_POSITION_CONTAINS: u16 = 8u64 as u16;
            ///The `Node.DOCUMENT_POSITION_CONTAINED_BY` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const DOCUMENT_POSITION_CONTAINED_BY: u16 = 16u64 as u16;
            ///The `Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC` const.
            ///
            ///*This API requires the following crate features to be activated: `Node`*
            pub const DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: u16 = 32u64 as u16;
        }
    }
    #[cfg(feature = "Node")]
    pub use gen_Node::*;
    #[cfg(feature = "Window")]
    #[allow(non_snake_case)]
    mod gen_Window {
        #![allow(unused_imports)]
        use super::*;
        use wasm_bindgen::prelude::*;
        #[allow(bad_style)]
        ///The `Window` class.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        ///
        #[repr(transparent)]
        #[allow(clippy::all)]
        pub struct Window {
            obj: EventTarget,
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::fmt::Debug for Window {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    Window {
                        obj: ref __self_0_0,
                    } => {
                        let mut debug_trait_builder = f.debug_struct("Window");
                        let _ = debug_trait_builder.field("obj", &&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::clone::Clone for Window {
            #[inline]
            fn clone(&self) -> Window {
                match *self {
                    Window {
                        obj: ref __self_0_0,
                    } => Window {
                        obj: ::core::clone::Clone::clone(&(*__self_0_0)),
                    },
                }
            }
        }

        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::PartialEq for Window {
            #[inline]
            fn eq(&self, other: &Window) -> bool {
                match *other {
                    Window {
                        obj: ref __self_1_0,
                    } => match *self {
                        Window {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) == (*__self_1_0),
                    },
                }
            }
            #[inline]
            fn ne(&self, other: &Window) -> bool {
                match *other {
                    Window {
                        obj: ref __self_1_0,
                    } => match *self {
                        Window {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) != (*__self_1_0),
                    },
                }
            }
        }
        #[allow(bad_style)]
        #[allow(clippy::all)]
        const __wbg_generated_const_Window: () = {
            use wasm_bindgen::__rt::core;
            use wasm_bindgen::convert::RefFromWasmAbi;
            use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
            use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
            use wasm_bindgen::describe::WasmDescribe;
            use wasm_bindgen::{JsCast, JsValue};
            impl WasmDescribe for Window {
                fn describe() {
                    use wasm_bindgen::describe::*;
                    inform(NAMED_EXTERNREF);
                    inform(6u32);
                    inform(87u32);
                    inform(105u32);
                    inform(110u32);
                    inform(100u32);
                    inform(111u32);
                    inform(119u32);
                }
            }
            impl core::ops::Deref for Window {
                type Target = EventTarget;
                #[inline]
                fn deref(&self) -> &EventTarget {
                    &self.obj
                }
            }
            impl IntoWasmAbi for Window {
                type Abi = <JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    self.obj.into_abi()
                }
            }
            impl OptionIntoWasmAbi for Window {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl<'a> OptionIntoWasmAbi for &'a Window {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl FromWasmAbi for Window {
                type Abi = <JsValue as FromWasmAbi>::Abi;
                #[inline]
                unsafe fn from_abi(js: Self::Abi) -> Self {
                    Window {
                        obj: JsValue::from_abi(js).into(),
                    }
                }
            }
            impl OptionFromWasmAbi for Window {
                #[inline]
                fn is_none(abi: &Self::Abi) -> bool {
                    *abi == 0
                }
            }
            impl<'a> IntoWasmAbi for &'a Window {
                type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    (&self.obj).into_abi()
                }
            }
            impl RefFromWasmAbi for Window {
                type Abi = <JsValue as RefFromWasmAbi>::Abi;
                type Anchor = core::mem::ManuallyDrop<Window>;
                #[inline]
                unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
                    let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
                    core::mem::ManuallyDrop::new(Window {
                        obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
                    })
                }
            }
            impl From<JsValue> for Window {
                #[inline]
                fn from(obj: JsValue) -> Window {
                    Window { obj: obj.into() }
                }
            }
            impl AsRef<JsValue> for Window {
                #[inline]
                fn as_ref(&self) -> &JsValue {
                    self.obj.as_ref()
                }
            }
            impl AsRef<Window> for Window {
                #[inline]
                fn as_ref(&self) -> &Window {
                    self
                }
            }
            impl From<Window> for JsValue {
                #[inline]
                fn from(obj: Window) -> JsValue {
                    obj.obj.into()
                }
            }
            impl JsCast for Window {
                fn instanceof(val: &JsValue) -> bool {
                    #[link(wasm_import_module = "__wbindgen_placeholder__")]
                    #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                    extern "C" {
                        fn __wbg_instanceof_Window_adf3196bdc02b386(val: u32) -> u32;
                    }
                    unsafe {
                        let idx = val.into_abi();
                        __wbg_instanceof_Window_adf3196bdc02b386(idx) != 0
                    }
                }
                #[inline]
                fn unchecked_from_js(val: JsValue) -> Self {
                    Window { obj: val.into() }
                }
                #[inline]
                fn unchecked_from_js_ref(val: &JsValue) -> &Self {
                    unsafe { &*(val as *const JsValue as *const Window) }
                }
            }
            ()
        };
        #[allow(clippy::all)]
        impl From<Window> for EventTarget {
            #[inline]
            fn from(obj: Window) -> EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<EventTarget> for Window {
            #[inline]
            fn as_ref(&self) -> &EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<Window> for ::js_sys::Object {
            #[inline]
            fn from(obj: Window) -> ::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<::js_sys::Object> for Window {
            #[inline]
            fn as_ref(&self) -> &::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js_ref(self.as_ref())
            }
        }
        ///Getter for the `window` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/window)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_window_7cd572a85bde5c10() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Window as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `window` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/window)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn window(&self) -> Window {
                ///Getter for the `window` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/window)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_window_7cd572a85bde5c10(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_window_7cd572a85bde5c10(this)
                    };
                    <Window as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `self` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/self)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_self_94b837ff0a5b3540() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Window as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `self` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/self)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn self_(&self) -> Window {
                ///Getter for the `self` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/self)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_self_94b837ff0a5b3540(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_self_94b837ff0a5b3540(this)
                    };
                    <Window as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        #[cfg(feature = "Document")]
        ///Getter for the `document` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/document)
        ///
        ///*This API requires the following crate features to be activated: `Document`, `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_document_6cc8d0b87c0a99b9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<Document> as WasmDescribe>::describe();
        }
        impl Window {
            #[cfg(feature = "Document")]
            ///Getter for the `document` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/document)
            ///
            ///*This API requires the following crate features to be activated: `Document`, `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn document(&self) -> Option<Document> {
                #[cfg(feature = "Document")]
                ///Getter for the `document` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/document)
                ///
                ///*This API requires the following crate features to be activated: `Document`, `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_document_6cc8d0b87c0a99b9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Document> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_document_6cc8d0b87c0a99b9(this)
                    };
                    <Option<Document> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `name` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_name_c5044837e0c5a56e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `name` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn name(&self) -> Result<String, JsValue> {
                ///Getter for the `name` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_name_c5044837e0c5a56e(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_name_c5044837e0c5a56e(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        ///Setter for the `name` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setname_5643889f37f3158d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `name` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_name(&self, value: &str) -> Result<(), JsValue> {
                ///Setter for the `name` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/name)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setname_5643889f37f3158d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setname_5643889f37f3158d(this, value)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl Window {}
        impl Window {}
        impl Window {}
        impl Window {}
        impl Window {}
        impl Window {}
        impl Window {}
        impl Window {}
        impl Window {}
        ///Getter for the `status` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_status_a8034d7f2606425a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `status` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn status(&self) -> Result<String, JsValue> {
                ///Getter for the `status` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_status_a8034d7f2606425a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_status_a8034d7f2606425a(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        ///Setter for the `status` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setstatus_28707921dddc26c5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `status` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_status(&self, value: &str) -> Result<(), JsValue> {
                ///Setter for the `status` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/status)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setstatus_28707921dddc26c5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(value);
                        __wbg_setstatus_28707921dddc26c5(this, value)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///Getter for the `closed` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/closed)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_closed_8d6204248db16824() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `closed` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/closed)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn closed(&self) -> Result<bool, JsValue> {
                ///Getter for the `closed` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/closed)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_closed_8d6204248db16824(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_closed_8d6204248db16824(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///Getter for the `event` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/event)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_event_881a0706afc0daa0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <::wasm_bindgen::JsValue as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `event` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/event)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn event(&self) -> ::wasm_bindgen::JsValue {
                ///Getter for the `event` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/event)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_event_881a0706afc0daa0(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_event_881a0706afc0daa0(this)
                    };
                    <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `frames` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frames)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_frames_888d92d6b62b19c1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Window as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `frames` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frames)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn frames(&self) -> Result<Window, JsValue> {
                ///Getter for the `frames` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frames)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_frames_888d92d6b62b19c1(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Window as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_frames_888d92d6b62b19c1(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Window as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        ///Getter for the `length` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/length)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_length_6220444a9f7f7851() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <u32 as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `length` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/length)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn length(&self) -> u32 {
                ///Getter for the `length` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/length)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_length_6220444a9f7f7851(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_length_6220444a9f7f7851(this)
                    };
                    <u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `top` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/top)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_top_b5da4f9a8ea6b2a9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<Window> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `top` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/top)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn top(&self) -> Result<Option<Window>, JsValue> {
                ///Getter for the `top` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/top)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_top_b5da4f9a8ea6b2a9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_top_b5da4f9a8ea6b2a9(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///Getter for the `opener` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_opener_c69d8fee6e99ab28() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <::wasm_bindgen::JsValue as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `opener` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn opener(&self) -> Result<::wasm_bindgen::JsValue, JsValue> {
                ///Getter for the `opener` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_opener_c69d8fee6e99ab28(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_opener_c69d8fee6e99ab28(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(
                        <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                            _ret,
                        ),
                    )
                }
            }
        }
        ///Setter for the `opener` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setopener_273b6e887a828bb9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `opener` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_opener(&self, value: &::wasm_bindgen::JsValue) -> Result<(), JsValue> {
                ///Setter for the `opener` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/opener)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setopener_273b6e887a828bb9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setopener_273b6e887a828bb9(this, value)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///Getter for the `parent` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/parent)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_parent_8314fbd89a939c2f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<Window> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `parent` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/parent)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn parent(&self) -> Result<Option<Window>, JsValue> {
                ///Getter for the `parent` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/parent)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_parent_8314fbd89a939c2f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_parent_8314fbd89a939c2f(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        #[cfg(feature = "Element")]
        ///Getter for the `frameElement` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement)
        ///
        ///*This API requires the following crate features to be activated: `Element`, `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_frameElement_d71123ac90b6c189() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<Element> as WasmDescribe>::describe();
        }
        impl Window {
            #[cfg(feature = "Element")]
            ///Getter for the `frameElement` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement)
            ///
            ///*This API requires the following crate features to be activated: `Element`, `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn frame_element(&self) -> Result<Option<Element>, JsValue> {
                #[cfg(feature = "Element")]
                ///Getter for the `frameElement` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/frameElement)
                ///
                ///*This API requires the following crate features to be activated: `Element`, `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_frameElement_d71123ac90b6c189(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Element> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_frameElement_d71123ac90b6c189(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<Element> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl Window {}
        impl Window {}
        ///Getter for the `onappinstalled` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onappinstalled_69a64c9b9c4aa3f7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onappinstalled` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onappinstalled(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onappinstalled` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onappinstalled_69a64c9b9c4aa3f7(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onappinstalled_69a64c9b9c4aa3f7(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onappinstalled` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonappinstalled_8774eed383da6ff5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onappinstalled` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onappinstalled(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onappinstalled` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonappinstalled_8774eed383da6ff5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonappinstalled_8774eed383da6ff5(this, value)
                    };
                    ()
                }
            }
        }
        impl Window {}
        ///Getter for the `innerWidth` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_innerWidth_60241abd729ed26f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <::wasm_bindgen::JsValue as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `innerWidth` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn inner_width(&self) -> Result<::wasm_bindgen::JsValue, JsValue> {
                ///Getter for the `innerWidth` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_innerWidth_60241abd729ed26f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_innerWidth_60241abd729ed26f(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(
                        <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                            _ret,
                        ),
                    )
                }
            }
        }
        ///Setter for the `innerWidth` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setinnerWidth_f58033ae989c8657() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `innerWidth` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_inner_width(&self, value: &::wasm_bindgen::JsValue) -> Result<(), JsValue> {
                ///Setter for the `innerWidth` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setinnerWidth_f58033ae989c8657(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setinnerWidth_f58033ae989c8657(this, value)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///Getter for the `innerHeight` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_innerHeight_2f860a67225f1fbd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <::wasm_bindgen::JsValue as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `innerHeight` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn inner_height(&self) -> Result<::wasm_bindgen::JsValue, JsValue> {
                ///Getter for the `innerHeight` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_innerHeight_2f860a67225f1fbd(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_innerHeight_2f860a67225f1fbd(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(
                        <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                            _ret,
                        ),
                    )
                }
            }
        }
        ///Setter for the `innerHeight` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setinnerHeight_262576c4240ddfc4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `innerHeight` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_inner_height(&self, value: &::wasm_bindgen::JsValue) -> Result<(), JsValue> {
                ///Setter for the `innerHeight` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setinnerHeight_262576c4240ddfc4(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setinnerHeight_262576c4240ddfc4(this, value)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///Getter for the `scrollX` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollX_6072fadebcc36d03() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `scrollX` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_x(&self) -> Result<f64, JsValue> {
                ///Getter for the `scrollX` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollX)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollX_6072fadebcc36d03(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scrollX_6072fadebcc36d03(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///Getter for the `pageXOffset` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_pageXOffset_9e23342502f1ff6a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `pageXOffset` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn page_x_offset(&self) -> Result<f64, JsValue> {
                ///Getter for the `pageXOffset` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_pageXOffset_9e23342502f1ff6a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_pageXOffset_9e23342502f1ff6a(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///Getter for the `scrollY` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollY_849a7c5699d1e1af() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `scrollY` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_y(&self) -> Result<f64, JsValue> {
                ///Getter for the `scrollY` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollY)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollY_849a7c5699d1e1af(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scrollY_849a7c5699d1e1af(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///Getter for the `pageYOffset` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_pageYOffset_1859e8f766e9bea7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `pageYOffset` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn page_y_offset(&self) -> Result<f64, JsValue> {
                ///Getter for the `pageYOffset` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/pageYOffset)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_pageYOffset_1859e8f766e9bea7(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_pageYOffset_1859e8f766e9bea7(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///Getter for the `screenX` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_screenX_b9ea162dc53c5ddb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <::wasm_bindgen::JsValue as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `screenX` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn screen_x(&self) -> Result<::wasm_bindgen::JsValue, JsValue> {
                ///Getter for the `screenX` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_screenX_b9ea162dc53c5ddb(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_screenX_b9ea162dc53c5ddb(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(
                        <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                            _ret,
                        ),
                    )
                }
            }
        }
        ///Setter for the `screenX` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setscreenX_de90f1516d38ec0f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `screenX` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_screen_x(&self, value: &::wasm_bindgen::JsValue) -> Result<(), JsValue> {
                ///Setter for the `screenX` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenX)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setscreenX_de90f1516d38ec0f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setscreenX_de90f1516d38ec0f(this, value)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///Getter for the `screenY` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_screenY_26508ab64e927d60() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <::wasm_bindgen::JsValue as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `screenY` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn screen_y(&self) -> Result<::wasm_bindgen::JsValue, JsValue> {
                ///Getter for the `screenY` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_screenY_26508ab64e927d60(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_screenY_26508ab64e927d60(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(
                        <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                            _ret,
                        ),
                    )
                }
            }
        }
        ///Setter for the `screenY` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setscreenY_daef012e9196f6e3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `screenY` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_screen_y(&self, value: &::wasm_bindgen::JsValue) -> Result<(), JsValue> {
                ///Setter for the `screenY` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setscreenY_daef012e9196f6e3(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setscreenY_daef012e9196f6e3(this, value)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///Getter for the `outerWidth` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_outerWidth_f8511258d86520d9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <::wasm_bindgen::JsValue as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `outerWidth` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn outer_width(&self) -> Result<::wasm_bindgen::JsValue, JsValue> {
                ///Getter for the `outerWidth` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_outerWidth_f8511258d86520d9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_outerWidth_f8511258d86520d9(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(
                        <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                            _ret,
                        ),
                    )
                }
            }
        }
        ///Setter for the `outerWidth` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setouterWidth_706f3b0c2dfa1ad6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `outerWidth` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_outer_width(&self, value: &::wasm_bindgen::JsValue) -> Result<(), JsValue> {
                ///Setter for the `outerWidth` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerWidth)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setouterWidth_706f3b0c2dfa1ad6(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setouterWidth_706f3b0c2dfa1ad6(this, value)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///Getter for the `outerHeight` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_outerHeight_9af04c44e3b6ceb8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <::wasm_bindgen::JsValue as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `outerHeight` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn outer_height(&self) -> Result<::wasm_bindgen::JsValue, JsValue> {
                ///Getter for the `outerHeight` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_outerHeight_9af04c44e3b6ceb8(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_outerHeight_9af04c44e3b6ceb8(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(
                        <::wasm_bindgen::JsValue as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                            _ret,
                        ),
                    )
                }
            }
        }
        ///Setter for the `outerHeight` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setouterHeight_18258320ef76faee() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `outerHeight` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_outer_height(&self, value: &::wasm_bindgen::JsValue) -> Result<(), JsValue> {
                ///Setter for the `outerHeight` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setouterHeight_18258320ef76faee(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setouterHeight_18258320ef76faee(this, value)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///Getter for the `devicePixelRatio` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_devicePixelRatio_599d41a9267fa1ca() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `devicePixelRatio` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn device_pixel_ratio(&self) -> f64 {
                ///Getter for the `devicePixelRatio` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_devicePixelRatio_599d41a9267fa1ca(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <f64 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_devicePixelRatio_599d41a9267fa1ca(this)
                    };
                    <f64 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Window {}
        ///Getter for the `orientation` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_orientation_6d58717407266f51() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <i16 as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `orientation` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn orientation(&self) -> i16 {
                ///Getter for the `orientation` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_orientation_6d58717407266f51(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i16 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_orientation_6d58717407266f51(this)
                    };
                    <i16 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `onorientationchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onorientationchange_d19dfb6264379e50() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onorientationchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onorientationchange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onorientationchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onorientationchange_d19dfb6264379e50(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onorientationchange_d19dfb6264379e50(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onorientationchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonorientationchange_0e6d0ff43f3cd665() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onorientationchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onorientationchange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onorientationchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onorientationchange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonorientationchange_0e6d0ff43f3cd665(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonorientationchange_0e6d0ff43f3cd665(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onvrdisplayconnect` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onvrdisplayconnect_8c3dedc68daa2b52() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onvrdisplayconnect` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onvrdisplayconnect(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onvrdisplayconnect` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onvrdisplayconnect_8c3dedc68daa2b52(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onvrdisplayconnect_8c3dedc68daa2b52(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onvrdisplayconnect` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonvrdisplayconnect_6bc618d8c7361e9a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onvrdisplayconnect` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onvrdisplayconnect(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onvrdisplayconnect` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonvrdisplayconnect_6bc618d8c7361e9a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonvrdisplayconnect_6bc618d8c7361e9a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onvrdisplaydisconnect` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onvrdisplaydisconnect_64af30344cd77421() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onvrdisplaydisconnect` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onvrdisplaydisconnect(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onvrdisplaydisconnect` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onvrdisplaydisconnect_64af30344cd77421(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onvrdisplaydisconnect_64af30344cd77421(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onvrdisplaydisconnect` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonvrdisplaydisconnect_260d2beb0ecccba1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onvrdisplaydisconnect` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onvrdisplaydisconnect(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onvrdisplaydisconnect` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydisconnect)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonvrdisplaydisconnect_260d2beb0ecccba1(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonvrdisplaydisconnect_260d2beb0ecccba1(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onvrdisplayactivate` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onvrdisplayactivate_adb3342e2b859ad8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onvrdisplayactivate` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onvrdisplayactivate(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onvrdisplayactivate` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onvrdisplayactivate_adb3342e2b859ad8(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onvrdisplayactivate_adb3342e2b859ad8(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onvrdisplayactivate` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonvrdisplayactivate_c33f0e75ae2538de() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onvrdisplayactivate` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onvrdisplayactivate(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onvrdisplayactivate` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonvrdisplayactivate_c33f0e75ae2538de(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonvrdisplayactivate_c33f0e75ae2538de(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onvrdisplaydeactivate` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onvrdisplaydeactivate_e928d5ceb0e3ce11() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onvrdisplaydeactivate` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onvrdisplaydeactivate(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onvrdisplaydeactivate` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onvrdisplaydeactivate_e928d5ceb0e3ce11(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onvrdisplaydeactivate_e928d5ceb0e3ce11(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onvrdisplaydeactivate` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonvrdisplaydeactivate_43c58f6ba789a2d6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onvrdisplaydeactivate` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onvrdisplaydeactivate(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onvrdisplaydeactivate` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaydeactivate)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonvrdisplaydeactivate_43c58f6ba789a2d6(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonvrdisplaydeactivate_43c58f6ba789a2d6(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onvrdisplaypresentchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onvrdisplaypresentchange_7eb766ddd34f3c7f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onvrdisplaypresentchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onvrdisplaypresentchange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onvrdisplaypresentchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onvrdisplaypresentchange_7eb766ddd34f3c7f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onvrdisplaypresentchange_7eb766ddd34f3c7f(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onvrdisplaypresentchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonvrdisplaypresentchange_8cee10581372a1db() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onvrdisplaypresentchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onvrdisplaypresentchange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onvrdisplaypresentchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypresentchange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonvrdisplaypresentchange_8cee10581372a1db(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonvrdisplaypresentchange_8cee10581372a1db(this, value)
                    };
                    ()
                }
            }
        }
        impl Window {}
        impl Window {}
        ///Getter for the `onabort` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onabort_e8110be6aa3d5468() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onabort` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onabort(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onabort` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onabort_e8110be6aa3d5468(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onabort_e8110be6aa3d5468(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onabort` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonabort_6bb31ae293d3d508() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onabort` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onabort(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onabort` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onabort)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonabort_6bb31ae293d3d508(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonabort_6bb31ae293d3d508(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onblur` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onblur_c5f657653c8824b7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onblur` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onblur(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onblur` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onblur_c5f657653c8824b7(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onblur_c5f657653c8824b7(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onblur` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonblur_8f2d83cb32e3a378() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onblur` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onblur(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onblur` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onblur)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonblur_8f2d83cb32e3a378(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonblur_8f2d83cb32e3a378(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onfocus` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onfocus_b5750fe29d9144ed() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onfocus` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onfocus(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onfocus` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onfocus_b5750fe29d9144ed(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onfocus_b5750fe29d9144ed(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onfocus` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonfocus_1497d2479cae2d9c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onfocus` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onfocus(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onfocus` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onfocus)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonfocus_1497d2479cae2d9c(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonfocus_1497d2479cae2d9c(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onauxclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onauxclick_2fdc368fb6e87608() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onauxclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onauxclick(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onauxclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onauxclick_2fdc368fb6e87608(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onauxclick_2fdc368fb6e87608(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onauxclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonauxclick_48b2b63df8538e51() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onauxclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onauxclick(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onauxclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onauxclick)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonauxclick_48b2b63df8538e51(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonauxclick_48b2b63df8538e51(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oncanplay` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oncanplay_ec03af575c36dc06() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `oncanplay` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oncanplay(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oncanplay` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oncanplay_ec03af575c36dc06(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oncanplay_ec03af575c36dc06(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oncanplay` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoncanplay_331488f23aaad516() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `oncanplay` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oncanplay(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oncanplay` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplay)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoncanplay_331488f23aaad516(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoncanplay_331488f23aaad516(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oncanplaythrough` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oncanplaythrough_2e5d2e9a74eeb9a7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `oncanplaythrough` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oncanplaythrough(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oncanplaythrough` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oncanplaythrough_2e5d2e9a74eeb9a7(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oncanplaythrough_2e5d2e9a74eeb9a7(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oncanplaythrough` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoncanplaythrough_ab03cc0c0805bcad() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `oncanplaythrough` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oncanplaythrough(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oncanplaythrough` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncanplaythrough)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoncanplaythrough_ab03cc0c0805bcad(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoncanplaythrough_ab03cc0c0805bcad(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onchange_47f2595b30e7362d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onchange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onchange_47f2595b30e7362d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onchange_47f2595b30e7362d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonchange_42128b45a5845f33() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onchange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onchange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonchange_42128b45a5845f33(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonchange_42128b45a5845f33(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onclick_96dc4f80f585fc97() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onclick(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onclick_96dc4f80f585fc97(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onclick_96dc4f80f585fc97(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonclick_8ea2687903454363() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onclick(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclick)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonclick_8ea2687903454363(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonclick_8ea2687903454363(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onclose` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onclose_327d687210e80901() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onclose` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onclose(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onclose` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onclose_327d687210e80901(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onclose_327d687210e80901(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onclose` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonclose_129049fcfaf6cb35() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onclose` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onclose(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onclose` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onclose)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonclose_129049fcfaf6cb35(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonclose_129049fcfaf6cb35(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oncontextmenu` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oncontextmenu_30ba5ffc66e5a2b1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `oncontextmenu` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oncontextmenu(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oncontextmenu` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oncontextmenu_30ba5ffc66e5a2b1(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oncontextmenu_30ba5ffc66e5a2b1(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oncontextmenu` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoncontextmenu_4fe13aecc2f69c79() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `oncontextmenu` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oncontextmenu(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oncontextmenu` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oncontextmenu)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoncontextmenu_4fe13aecc2f69c79(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoncontextmenu_4fe13aecc2f69c79(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondblclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondblclick_32b091daad5d87ff() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ondblclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondblclick(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondblclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondblclick_32b091daad5d87ff(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondblclick_32b091daad5d87ff(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondblclick` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondblclick_4576142251949d64() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ondblclick` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondblclick(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondblclick` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondblclick)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondblclick_4576142251949d64(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondblclick_4576142251949d64(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondrag` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondrag_838e2cc1280b4820() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ondrag` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondrag(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondrag` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondrag_838e2cc1280b4820(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondrag_838e2cc1280b4820(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondrag` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondrag_0d2e4900cba118ff() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ondrag` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondrag(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondrag` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrag)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondrag_0d2e4900cba118ff(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondrag_0d2e4900cba118ff(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragend_ef2ab8f8890c5d0d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ondragend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragend_ef2ab8f8890c5d0d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragend_ef2ab8f8890c5d0d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragend_ba081a7eeb4b3575() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ondragend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragend_ba081a7eeb4b3575(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragend_ba081a7eeb4b3575(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragenter_1d2cf0b03ca84540() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ondragenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragenter(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragenter_1d2cf0b03ca84540(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragenter_1d2cf0b03ca84540(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragenter_aa7260d17821fb12() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ondragenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragenter(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragenter)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragenter_aa7260d17821fb12(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragenter_aa7260d17821fb12(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragexit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragexit_24e2570820d4f16a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ondragexit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragexit(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragexit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragexit_24e2570820d4f16a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragexit_24e2570820d4f16a(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragexit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragexit_08ca08b43e0a3f78() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ondragexit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragexit(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragexit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragexit)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragexit_08ca08b43e0a3f78(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragexit_08ca08b43e0a3f78(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragleave_cb59aac406f23d22() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ondragleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragleave(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragleave_cb59aac406f23d22(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragleave_cb59aac406f23d22(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragleave_126d56bb70ee805d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ondragleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragleave(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragleave)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragleave_126d56bb70ee805d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragleave_126d56bb70ee805d(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragover_78e11020ed201e41() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ondragover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragover(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragover_78e11020ed201e41(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragover_78e11020ed201e41(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragover_399b61e2607788dd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ondragover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragover(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragover)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragover_399b61e2607788dd(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragover_399b61e2607788dd(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondragstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondragstart_58fe79728df375fa() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ondragstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondragstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondragstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondragstart_58fe79728df375fa(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondragstart_58fe79728df375fa(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondragstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondragstart_895a0a08265ebb41() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ondragstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondragstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondragstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondragstart_895a0a08265ebb41(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondragstart_895a0a08265ebb41(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondrop` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondrop_b93f445b4e0949c3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ondrop` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondrop(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondrop` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondrop_b93f445b4e0949c3(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondrop_b93f445b4e0949c3(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondrop` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondrop_824a96354bcab8a1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ondrop` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondrop(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondrop` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondrop)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondrop_824a96354bcab8a1(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondrop_824a96354bcab8a1(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ondurationchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ondurationchange_68609f10bbea0d0f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ondurationchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ondurationchange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ondurationchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ondurationchange_68609f10bbea0d0f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ondurationchange_68609f10bbea0d0f(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ondurationchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setondurationchange_381e9851f98a8f03() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ondurationchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ondurationchange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ondurationchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ondurationchange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setondurationchange_381e9851f98a8f03(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setondurationchange_381e9851f98a8f03(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onemptied` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onemptied_ccdbfa1409fadc99() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onemptied` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onemptied(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onemptied` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onemptied_ccdbfa1409fadc99(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onemptied_ccdbfa1409fadc99(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onemptied` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonemptied_c5b495d00cb135f9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onemptied` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onemptied(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onemptied` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onemptied)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonemptied_c5b495d00cb135f9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonemptied_c5b495d00cb135f9(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onended` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onended_9f9259ef4059cc30() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onended` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onended(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onended` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onended_9f9259ef4059cc30(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onended_9f9259ef4059cc30(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onended` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonended_4eba87781181e843() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onended` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onended(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onended` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onended)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonended_4eba87781181e843(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonended_4eba87781181e843(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oninput` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oninput_de4f3257f9c5b759() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `oninput` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oninput(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oninput` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oninput_de4f3257f9c5b759(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oninput_de4f3257f9c5b759(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oninput` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoninput_571527eb82035f6d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `oninput` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oninput(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oninput` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninput)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoninput_571527eb82035f6d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoninput_571527eb82035f6d(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `oninvalid` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_oninvalid_753af226874ebef7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `oninvalid` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn oninvalid(&self) -> Option<::js_sys::Function> {
                ///Getter for the `oninvalid` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_oninvalid_753af226874ebef7(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_oninvalid_753af226874ebef7(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `oninvalid` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setoninvalid_18048bb4fd460afc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `oninvalid` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_oninvalid(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `oninvalid` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/oninvalid)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setoninvalid_18048bb4fd460afc(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setoninvalid_18048bb4fd460afc(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onkeydown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onkeydown_cbf63679f9c28d4b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onkeydown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onkeydown(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onkeydown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onkeydown_cbf63679f9c28d4b(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onkeydown_cbf63679f9c28d4b(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onkeydown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonkeydown_2a5e7c8e08c7dc1f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onkeydown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onkeydown(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onkeydown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeydown)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonkeydown_2a5e7c8e08c7dc1f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonkeydown_2a5e7c8e08c7dc1f(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onkeypress` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onkeypress_071c64562ac3797a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onkeypress` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onkeypress(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onkeypress` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onkeypress_071c64562ac3797a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onkeypress_071c64562ac3797a(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onkeypress` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonkeypress_12be0d6ace3af7d0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onkeypress` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onkeypress(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onkeypress` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeypress)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonkeypress_12be0d6ace3af7d0(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonkeypress_12be0d6ace3af7d0(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onkeyup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onkeyup_d75331c83d0efc24() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onkeyup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onkeyup(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onkeyup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onkeyup_d75331c83d0efc24(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onkeyup_d75331c83d0efc24(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onkeyup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonkeyup_8d52e09060ee4883() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onkeyup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onkeyup(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onkeyup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onkeyup)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonkeyup_8d52e09060ee4883(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonkeyup_8d52e09060ee4883(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onload` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onload_232c63dae462462a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onload` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onload(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onload` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onload_232c63dae462462a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onload_232c63dae462462a(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onload` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonload_faca5fa463e29791() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onload` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onload(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onload` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onload)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonload_faca5fa463e29791(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonload_faca5fa463e29791(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onloadeddata` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onloadeddata_e08ee6845a6483c9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onloadeddata` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onloadeddata(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onloadeddata` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onloadeddata_e08ee6845a6483c9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onloadeddata_e08ee6845a6483c9(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onloadeddata` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonloadeddata_92910c7c8cfd78f4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onloadeddata` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onloadeddata(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onloadeddata` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadeddata)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonloadeddata_92910c7c8cfd78f4(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonloadeddata_92910c7c8cfd78f4(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onloadedmetadata` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onloadedmetadata_165e2eff11f6f382() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onloadedmetadata` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onloadedmetadata(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onloadedmetadata` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onloadedmetadata_165e2eff11f6f382(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onloadedmetadata_165e2eff11f6f382(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onloadedmetadata` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonloadedmetadata_1fc248870c694ef7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onloadedmetadata` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onloadedmetadata(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onloadedmetadata` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadedmetadata)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonloadedmetadata_1fc248870c694ef7(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonloadedmetadata_1fc248870c694ef7(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onloadend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onloadend_9f51dc07627ded0e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onloadend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onloadend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onloadend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onloadend_9f51dc07627ded0e(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onloadend_9f51dc07627ded0e(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onloadend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonloadend_85a2574c8f018cf4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onloadend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onloadend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onloadend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonloadend_85a2574c8f018cf4(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonloadend_85a2574c8f018cf4(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onloadstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onloadstart_d084462619478708() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onloadstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onloadstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onloadstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onloadstart_d084462619478708(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onloadstart_d084462619478708(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onloadstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonloadstart_37f7ecea217a6313() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onloadstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onloadstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onloadstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onloadstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonloadstart_37f7ecea217a6313(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonloadstart_37f7ecea217a6313(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmousedown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmousedown_c373e66791027e96() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onmousedown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmousedown(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmousedown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmousedown_c373e66791027e96(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmousedown_c373e66791027e96(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmousedown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmousedown_5a6120b48ccd35e2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onmousedown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmousedown(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmousedown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousedown)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmousedown_5a6120b48ccd35e2(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmousedown_5a6120b48ccd35e2(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseenter_1a5f3b6167db430f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onmouseenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseenter(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseenter_1a5f3b6167db430f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseenter_1a5f3b6167db430f(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseenter_1a1035aa78bebce5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onmouseenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseenter(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseenter)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseenter_1a1035aa78bebce5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseenter_1a1035aa78bebce5(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseleave_e3420a9cfb9920c0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onmouseleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseleave(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseleave_e3420a9cfb9920c0(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseleave_e3420a9cfb9920c0(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseleave_71e2a0854f1e5d22() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onmouseleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseleave(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseleave)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseleave_71e2a0854f1e5d22(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseleave_71e2a0854f1e5d22(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmousemove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmousemove_b865ba6fe456f981() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onmousemove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmousemove(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmousemove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmousemove_b865ba6fe456f981(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmousemove_b865ba6fe456f981(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmousemove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmousemove_e6b2916546f6d553() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onmousemove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmousemove(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmousemove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmousemove)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmousemove_e6b2916546f6d553(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmousemove_e6b2916546f6d553(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseout` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseout_fc2784e4f66161ff() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onmouseout` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseout(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseout` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseout_fc2784e4f66161ff(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseout_fc2784e4f66161ff(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseout` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseout_d2558bf94aa0c996() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onmouseout` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseout(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseout` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseout_d2558bf94aa0c996(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseout_d2558bf94aa0c996(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseover_0f47ea55d0473e10() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onmouseover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseover(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseover_0f47ea55d0473e10(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseover_0f47ea55d0473e10(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseover_33ae573d64b4fc74() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onmouseover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseover(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseover)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseover_33ae573d64b4fc74(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseover_33ae573d64b4fc74(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmouseup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmouseup_d4732f23f771e43a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onmouseup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmouseup(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmouseup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmouseup_d4732f23f771e43a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmouseup_d4732f23f771e43a(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmouseup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmouseup_7286d0bbdbae67bb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onmouseup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmouseup(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmouseup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmouseup)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmouseup_7286d0bbdbae67bb(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmouseup_7286d0bbdbae67bb(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwheel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwheel_3c2f95373c74819d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onwheel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwheel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwheel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwheel_3c2f95373c74819d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwheel_3c2f95373c74819d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwheel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwheel_15c05fdca04629b7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onwheel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwheel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwheel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwheel)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwheel_15c05fdca04629b7(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwheel_15c05fdca04629b7(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpause` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpause_884f1f7e62215752() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onpause` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpause(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpause` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpause_884f1f7e62215752(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpause_884f1f7e62215752(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpause` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpause_c58af9e160c55c2a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onpause` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpause(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpause` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpause)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpause_c58af9e160c55c2a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpause_c58af9e160c55c2a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onplay` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onplay_178ba860344ac905() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onplay` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onplay(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onplay` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onplay_178ba860344ac905(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onplay_178ba860344ac905(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onplay` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonplay_58fe3f9118f29c57() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onplay` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onplay(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onplay` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplay)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonplay_58fe3f9118f29c57(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonplay_58fe3f9118f29c57(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onplaying` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onplaying_0ed43ec889fb1c90() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onplaying` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onplaying(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onplaying` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onplaying_0ed43ec889fb1c90(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onplaying_0ed43ec889fb1c90(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onplaying` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonplaying_2d4831215445206c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onplaying` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onplaying(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onplaying` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onplaying)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonplaying_2d4831215445206c(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonplaying_2d4831215445206c(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onprogress` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onprogress_9964951b09df26f5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onprogress` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onprogress(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onprogress` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onprogress_9964951b09df26f5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onprogress_9964951b09df26f5(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onprogress` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonprogress_1993f40d98c2a3ee() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onprogress` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onprogress(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onprogress` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onprogress)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonprogress_1993f40d98c2a3ee(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonprogress_1993f40d98c2a3ee(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onratechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onratechange_086533d039e0f20c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onratechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onratechange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onratechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onratechange_086533d039e0f20c(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onratechange_086533d039e0f20c(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onratechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonratechange_f52c91666b6c8156() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onratechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onratechange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onratechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onratechange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonratechange_f52c91666b6c8156(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonratechange_f52c91666b6c8156(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onreset` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onreset_06d942e9742d79e8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onreset` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onreset(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onreset` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onreset_06d942e9742d79e8(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onreset_06d942e9742d79e8(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onreset` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonreset_2fb5733290baa580() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onreset` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onreset(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onreset` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onreset)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonreset_2fb5733290baa580(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonreset_2fb5733290baa580(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onresize` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onresize_1ae65134773e3601() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onresize` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onresize(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onresize` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onresize_1ae65134773e3601(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onresize_1ae65134773e3601(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onresize` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonresize_3889a82ad4ba3095() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onresize` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onresize(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onresize` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onresize)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonresize_3889a82ad4ba3095(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonresize_3889a82ad4ba3095(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onscroll` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onscroll_b7ce74253f61e8d5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onscroll` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onscroll(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onscroll` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onscroll_b7ce74253f61e8d5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onscroll_b7ce74253f61e8d5(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onscroll` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonscroll_3e8cd5061602ccbd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onscroll` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onscroll(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onscroll` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onscroll)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonscroll_3e8cd5061602ccbd(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonscroll_3e8cd5061602ccbd(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onseeked` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onseeked_5952118f6c42bf2a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onseeked` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onseeked(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onseeked` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onseeked_5952118f6c42bf2a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onseeked_5952118f6c42bf2a(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onseeked` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonseeked_2b143410c676ac67() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onseeked` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onseeked(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onseeked` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeked)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonseeked_2b143410c676ac67(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonseeked_2b143410c676ac67(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onseeking` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onseeking_1f71ec11fbffdaa5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onseeking` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onseeking(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onseeking` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onseeking_1f71ec11fbffdaa5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onseeking_1f71ec11fbffdaa5(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onseeking` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonseeking_ac099567e770f012() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onseeking` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onseeking(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onseeking` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onseeking)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonseeking_ac099567e770f012(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonseeking_ac099567e770f012(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onselect` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onselect_ac780234a74a79c5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onselect` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onselect(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onselect` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onselect_ac780234a74a79c5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onselect_ac780234a74a79c5(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onselect` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonselect_15187fafb2aaeb42() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onselect` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onselect(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onselect` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselect)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonselect_15187fafb2aaeb42(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonselect_15187fafb2aaeb42(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onshow` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onshow_c4affc8b14f5da1d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onshow` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onshow(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onshow` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onshow_c4affc8b14f5da1d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onshow_c4affc8b14f5da1d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onshow` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonshow_2c1c6f7ff38b4eb3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onshow` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onshow(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onshow` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onshow)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonshow_2c1c6f7ff38b4eb3(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonshow_2c1c6f7ff38b4eb3(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onstalled` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onstalled_0bb6df6c62646e70() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onstalled` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onstalled(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onstalled` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onstalled_0bb6df6c62646e70(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onstalled_0bb6df6c62646e70(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onstalled` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonstalled_867ee7f4eb91fa0a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onstalled` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onstalled(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onstalled` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstalled)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonstalled_867ee7f4eb91fa0a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonstalled_867ee7f4eb91fa0a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onsubmit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onsubmit_85af6cdd6b0fd5e4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onsubmit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onsubmit(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onsubmit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onsubmit_85af6cdd6b0fd5e4(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onsubmit_85af6cdd6b0fd5e4(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onsubmit` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonsubmit_166988b9002f5ffd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onsubmit` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onsubmit(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onsubmit` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsubmit)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonsubmit_166988b9002f5ffd(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonsubmit_166988b9002f5ffd(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onsuspend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onsuspend_36e6ce45499906e0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onsuspend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onsuspend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onsuspend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onsuspend_36e6ce45499906e0(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onsuspend_36e6ce45499906e0(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onsuspend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonsuspend_0e99517fb5a2dd9e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onsuspend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onsuspend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onsuspend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onsuspend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonsuspend_0e99517fb5a2dd9e(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonsuspend_0e99517fb5a2dd9e(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontimeupdate` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontimeupdate_5652594889d3f3a4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ontimeupdate` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontimeupdate(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontimeupdate` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontimeupdate_5652594889d3f3a4(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontimeupdate_5652594889d3f3a4(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontimeupdate` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontimeupdate_64d11d101d9e3424() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ontimeupdate` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontimeupdate(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontimeupdate` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontimeupdate)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontimeupdate_64d11d101d9e3424(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontimeupdate_64d11d101d9e3424(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onvolumechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onvolumechange_86bd03af0ff62951() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onvolumechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onvolumechange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onvolumechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onvolumechange_86bd03af0ff62951(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onvolumechange_86bd03af0ff62951(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onvolumechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonvolumechange_fe8e3419c0bedc90() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onvolumechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onvolumechange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onvolumechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onvolumechange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonvolumechange_fe8e3419c0bedc90(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonvolumechange_fe8e3419c0bedc90(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwaiting` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwaiting_7d50ec67111788dc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onwaiting` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwaiting(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwaiting` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwaiting_7d50ec67111788dc(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwaiting_7d50ec67111788dc(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwaiting` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwaiting_7e9df4782e20d4f9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onwaiting` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwaiting(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwaiting` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwaiting)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwaiting_7e9df4782e20d4f9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwaiting_7e9df4782e20d4f9(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onselectstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onselectstart_f2737418e8600c5e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onselectstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onselectstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onselectstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onselectstart_f2737418e8600c5e(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onselectstart_f2737418e8600c5e(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onselectstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonselectstart_14be45ce2be8dfa2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onselectstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onselectstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onselectstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onselectstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonselectstart_14be45ce2be8dfa2(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonselectstart_14be45ce2be8dfa2(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontoggle` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontoggle_fd2d826c826d7078() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ontoggle` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontoggle(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontoggle` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontoggle_fd2d826c826d7078(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontoggle_fd2d826c826d7078(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontoggle` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontoggle_549d5b78ef790be5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ontoggle` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontoggle(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontoggle` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontoggle)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontoggle_549d5b78ef790be5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontoggle_549d5b78ef790be5(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointercancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointercancel_8211b7fd2a24d5e6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onpointercancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointercancel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointercancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointercancel_8211b7fd2a24d5e6(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointercancel_8211b7fd2a24d5e6(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointercancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointercancel_ae158793a8b84927() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onpointercancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointercancel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointercancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointercancel)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointercancel_ae158793a8b84927(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointercancel_ae158793a8b84927(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerdown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerdown_34e6107ba0103ecd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onpointerdown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerdown(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerdown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerdown_34e6107ba0103ecd(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerdown_34e6107ba0103ecd(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerdown` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerdown_3300c3714417978d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onpointerdown` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerdown(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerdown` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerdown)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerdown_3300c3714417978d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerdown_3300c3714417978d(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerup_0d2b9176699c1aee() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onpointerup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerup(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerup_0d2b9176699c1aee(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerup_0d2b9176699c1aee(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerup` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerup_ec244c8f4e9a919a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onpointerup` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerup(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerup` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerup)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerup_ec244c8f4e9a919a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerup_ec244c8f4e9a919a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointermove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointermove_193dff1bedd3d278() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onpointermove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointermove(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointermove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointermove_193dff1bedd3d278(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointermove_193dff1bedd3d278(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointermove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointermove_9e8471aa3aa82ee8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onpointermove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointermove(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointermove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointermove)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointermove_9e8471aa3aa82ee8(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointermove_9e8471aa3aa82ee8(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerout` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerout_6e6e2f48b7272e60() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onpointerout` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerout(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerout` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerout_6e6e2f48b7272e60(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerout_6e6e2f48b7272e60(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerout` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerout_18f9350ff0a0a456() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onpointerout` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerout(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerout` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerout_18f9350ff0a0a456(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerout_18f9350ff0a0a456(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerover_0f215b8b60aa2185() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onpointerover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerover(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerover_0f215b8b60aa2185(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerover_0f215b8b60aa2185(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerover` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerover_8a234e4f9a4fdaaf() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onpointerover` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerover(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerover` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerover)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerover_8a234e4f9a4fdaaf(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerover_8a234e4f9a4fdaaf(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerenter_7e9f9b937ae1f8b9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onpointerenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerenter(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerenter_7e9f9b937ae1f8b9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerenter_7e9f9b937ae1f8b9(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerenter` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerenter_59a4f4256320d26a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onpointerenter` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerenter(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerenter` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerenter)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerenter_59a4f4256320d26a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerenter_59a4f4256320d26a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpointerleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpointerleave_adcca80a2546860d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onpointerleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpointerleave(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpointerleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpointerleave_adcca80a2546860d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpointerleave_adcca80a2546860d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpointerleave` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpointerleave_69f5c14e05d790d8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onpointerleave` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpointerleave(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpointerleave` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpointerleave)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpointerleave_69f5c14e05d790d8(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpointerleave_69f5c14e05d790d8(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ongotpointercapture` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ongotpointercapture_e90aee8636f22fb3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ongotpointercapture` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ongotpointercapture(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ongotpointercapture` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ongotpointercapture_e90aee8636f22fb3(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ongotpointercapture_e90aee8636f22fb3(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ongotpointercapture` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setongotpointercapture_c855a02f63112682() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ongotpointercapture` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ongotpointercapture(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ongotpointercapture` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ongotpointercapture)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setongotpointercapture_c855a02f63112682(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setongotpointercapture_c855a02f63112682(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onlostpointercapture` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onlostpointercapture_4a9304a204a7ceaf() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onlostpointercapture` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onlostpointercapture(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onlostpointercapture` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onlostpointercapture_4a9304a204a7ceaf(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onlostpointercapture_4a9304a204a7ceaf(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onlostpointercapture` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonlostpointercapture_3f8db6461f736299() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onlostpointercapture` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onlostpointercapture(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onlostpointercapture` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlostpointercapture)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonlostpointercapture_3f8db6461f736299(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonlostpointercapture_3f8db6461f736299(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onanimationcancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onanimationcancel_1b56a1a946cfa0c6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onanimationcancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onanimationcancel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onanimationcancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onanimationcancel_1b56a1a946cfa0c6(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onanimationcancel_1b56a1a946cfa0c6(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onanimationcancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonanimationcancel_2364ac63ff4d33a7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onanimationcancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onanimationcancel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onanimationcancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationcancel)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonanimationcancel_2364ac63ff4d33a7(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonanimationcancel_2364ac63ff4d33a7(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onanimationend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onanimationend_f357fdac45250f40() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onanimationend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onanimationend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onanimationend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onanimationend_f357fdac45250f40(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onanimationend_f357fdac45250f40(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onanimationend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonanimationend_3bc9bc59264c0da9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onanimationend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onanimationend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onanimationend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonanimationend_3bc9bc59264c0da9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonanimationend_3bc9bc59264c0da9(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onanimationiteration` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onanimationiteration_e477ab3d2c9382f4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onanimationiteration` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onanimationiteration(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onanimationiteration` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onanimationiteration_e477ab3d2c9382f4(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onanimationiteration_e477ab3d2c9382f4(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onanimationiteration` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonanimationiteration_d1f9454fa659777d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onanimationiteration` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onanimationiteration(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onanimationiteration` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationiteration)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonanimationiteration_d1f9454fa659777d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonanimationiteration_d1f9454fa659777d(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onanimationstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onanimationstart_e7407f4860d46e50() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onanimationstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onanimationstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onanimationstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onanimationstart_e7407f4860d46e50(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onanimationstart_e7407f4860d46e50(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onanimationstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonanimationstart_dd4f1c22a8190b10() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onanimationstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onanimationstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onanimationstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onanimationstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonanimationstart_dd4f1c22a8190b10(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonanimationstart_dd4f1c22a8190b10(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontransitioncancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontransitioncancel_ec6f7f21baca429c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ontransitioncancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontransitioncancel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontransitioncancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontransitioncancel_ec6f7f21baca429c(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontransitioncancel_ec6f7f21baca429c(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontransitioncancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontransitioncancel_7f9427d03bd9d168() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ontransitioncancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontransitioncancel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontransitioncancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitioncancel)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontransitioncancel_7f9427d03bd9d168(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontransitioncancel_7f9427d03bd9d168(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontransitionend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontransitionend_e9cb426bbc66ba35() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ontransitionend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontransitionend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontransitionend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontransitionend_e9cb426bbc66ba35(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontransitionend_e9cb426bbc66ba35(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontransitionend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontransitionend_732b39c1b5325bec() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ontransitionend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontransitionend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontransitionend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontransitionend_732b39c1b5325bec(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontransitionend_732b39c1b5325bec(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontransitionrun` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontransitionrun_a9e57e2a2256166b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ontransitionrun` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontransitionrun(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontransitionrun` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontransitionrun_a9e57e2a2256166b(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontransitionrun_a9e57e2a2256166b(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontransitionrun` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontransitionrun_6994c050a57655ee() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ontransitionrun` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontransitionrun(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontransitionrun` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionrun)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontransitionrun_6994c050a57655ee(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontransitionrun_6994c050a57655ee(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontransitionstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontransitionstart_5592ff010aa8b5ac() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ontransitionstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontransitionstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontransitionstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontransitionstart_5592ff010aa8b5ac(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontransitionstart_5592ff010aa8b5ac(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontransitionstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontransitionstart_4dbe1b25fdcdc636() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ontransitionstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontransitionstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontransitionstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontransitionstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontransitionstart_4dbe1b25fdcdc636(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontransitionstart_4dbe1b25fdcdc636(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwebkitanimationend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwebkitanimationend_9bbd719d871b28a5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onwebkitanimationend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwebkitanimationend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwebkitanimationend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwebkitanimationend_9bbd719d871b28a5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwebkitanimationend_9bbd719d871b28a5(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwebkitanimationend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwebkitanimationend_ef5b1217d78900c1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onwebkitanimationend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwebkitanimationend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwebkitanimationend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwebkitanimationend_ef5b1217d78900c1(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwebkitanimationend_ef5b1217d78900c1(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwebkitanimationiteration` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwebkitanimationiteration_8f15d8336b69faab() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onwebkitanimationiteration` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwebkitanimationiteration(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwebkitanimationiteration` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwebkitanimationiteration_8f15d8336b69faab(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwebkitanimationiteration_8f15d8336b69faab(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwebkitanimationiteration` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwebkitanimationiteration_dcffed5fb60c2731()
        {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onwebkitanimationiteration` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwebkitanimationiteration(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwebkitanimationiteration` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationiteration)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwebkitanimationiteration_dcffed5fb60c2731(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwebkitanimationiteration_dcffed5fb60c2731(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwebkitanimationstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwebkitanimationstart_146d1038b1bdc77b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onwebkitanimationstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwebkitanimationstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwebkitanimationstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwebkitanimationstart_146d1038b1bdc77b(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwebkitanimationstart_146d1038b1bdc77b(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwebkitanimationstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwebkitanimationstart_412a6217023624eb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onwebkitanimationstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwebkitanimationstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwebkitanimationstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkitanimationstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwebkitanimationstart_412a6217023624eb(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwebkitanimationstart_412a6217023624eb(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onwebkittransitionend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onwebkittransitionend_a29522e3ba3903ca() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onwebkittransitionend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onwebkittransitionend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onwebkittransitionend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onwebkittransitionend_a29522e3ba3903ca(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onwebkittransitionend_a29522e3ba3903ca(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onwebkittransitionend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonwebkittransitionend_405064debbbe8e4b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onwebkittransitionend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onwebkittransitionend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onwebkittransitionend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onwebkittransitionend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonwebkittransitionend_405064debbbe8e4b(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonwebkittransitionend_405064debbbe8e4b(this, value)
                    };
                    ()
                }
            }
        }
        impl Window {}
        ///Getter for the `onerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onerror_3e645c862fd06b49() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onerror(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onerror_3e645c862fd06b49(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onerror_3e645c862fd06b49(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonerror_e42d7c1201e4cf00() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onerror(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onerror)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonerror_e42d7c1201e4cf00(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonerror_e42d7c1201e4cf00(this, value)
                    };
                    ()
                }
            }
        }
        impl Window {}
        ///Getter for the `ontouchstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontouchstart_67af0e0b213ac823() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ontouchstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontouchstart(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontouchstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontouchstart_67af0e0b213ac823(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontouchstart_67af0e0b213ac823(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontouchstart` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontouchstart_2c7ffe33cd16d883() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ontouchstart` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontouchstart(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontouchstart` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchstart)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontouchstart_2c7ffe33cd16d883(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontouchstart_2c7ffe33cd16d883(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontouchend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontouchend_5125a1c1b2dca7f7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ontouchend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontouchend(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontouchend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontouchend_5125a1c1b2dca7f7(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontouchend_5125a1c1b2dca7f7(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontouchend` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontouchend_fbbd78d2a0d9387b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ontouchend` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontouchend(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontouchend` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchend)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontouchend_fbbd78d2a0d9387b(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontouchend_fbbd78d2a0d9387b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontouchmove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontouchmove_dcb194ccb0b92b71() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ontouchmove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontouchmove(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontouchmove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontouchmove_dcb194ccb0b92b71(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontouchmove_dcb194ccb0b92b71(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontouchmove` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontouchmove_0347d8e0a938f286() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ontouchmove` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontouchmove(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontouchmove` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchmove)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontouchmove_0347d8e0a938f286(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontouchmove_0347d8e0a938f286(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ontouchcancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ontouchcancel_076dbe719d442331() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ontouchcancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ontouchcancel(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ontouchcancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ontouchcancel_076dbe719d442331(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ontouchcancel_076dbe719d442331(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ontouchcancel` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setontouchcancel_59be4497962f06bb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ontouchcancel` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ontouchcancel(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ontouchcancel` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ontouchcancel)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setontouchcancel_59be4497962f06bb(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setontouchcancel_59be4497962f06bb(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onafterprint` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onafterprint_dad16a3fd5aa1f00() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onafterprint` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onafterprint(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onafterprint` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onafterprint_dad16a3fd5aa1f00(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onafterprint_dad16a3fd5aa1f00(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onafterprint` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonafterprint_cd7ae90d35c13a63() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onafterprint` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onafterprint(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onafterprint` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onafterprint)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonafterprint_cd7ae90d35c13a63(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonafterprint_cd7ae90d35c13a63(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onbeforeprint` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onbeforeprint_8f1c1e33def628c7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onbeforeprint` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onbeforeprint(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onbeforeprint` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onbeforeprint_8f1c1e33def628c7(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onbeforeprint_8f1c1e33def628c7(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onbeforeprint` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonbeforeprint_ac0b79e7951f386b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onbeforeprint` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onbeforeprint(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onbeforeprint` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeprint)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonbeforeprint_ac0b79e7951f386b(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonbeforeprint_ac0b79e7951f386b(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onbeforeunload` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onbeforeunload_f094f9443983b8ec() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onbeforeunload` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onbeforeunload(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onbeforeunload` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onbeforeunload_f094f9443983b8ec(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onbeforeunload_f094f9443983b8ec(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onbeforeunload` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonbeforeunload_99850b1db8427a03() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onbeforeunload` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onbeforeunload(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onbeforeunload` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onbeforeunload)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonbeforeunload_99850b1db8427a03(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonbeforeunload_99850b1db8427a03(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onhashchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onhashchange_6d504e38d4c0e10d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onhashchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onhashchange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onhashchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onhashchange_6d504e38d4c0e10d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onhashchange_6d504e38d4c0e10d(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onhashchange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonhashchange_a47321cc804ae5cb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onhashchange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onhashchange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onhashchange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onhashchange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonhashchange_a47321cc804ae5cb(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonhashchange_a47321cc804ae5cb(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onlanguagechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onlanguagechange_85b424ac14dd7b9b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onlanguagechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onlanguagechange(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onlanguagechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onlanguagechange_85b424ac14dd7b9b(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onlanguagechange_85b424ac14dd7b9b(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onlanguagechange` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonlanguagechange_37fb246449939e3e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onlanguagechange` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onlanguagechange(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onlanguagechange` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onlanguagechange)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonlanguagechange_37fb246449939e3e(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonlanguagechange_37fb246449939e3e(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmessage` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmessage_b18fb84f8b8433d1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onmessage` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmessage(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmessage` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmessage_b18fb84f8b8433d1(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmessage_b18fb84f8b8433d1(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmessage` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmessage_c189fbe55a1255bd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onmessage` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmessage(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmessage` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessage)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmessage_c189fbe55a1255bd(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmessage_c189fbe55a1255bd(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmessageerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmessageerror_0c28e495f3eb58ce() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onmessageerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmessageerror(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmessageerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmessageerror_0c28e495f3eb58ce(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmessageerror_0c28e495f3eb58ce(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmessageerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmessageerror_adcdc1f547e7b100() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onmessageerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmessageerror(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmessageerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onmessageerror)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmessageerror_adcdc1f547e7b100(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmessageerror_adcdc1f547e7b100(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onoffline` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onoffline_7ac1b778736fea09() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onoffline` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onoffline(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onoffline` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onoffline_7ac1b778736fea09(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onoffline_7ac1b778736fea09(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onoffline` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonoffline_80c49fd208be03f3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onoffline` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onoffline(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onoffline` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onoffline)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonoffline_80c49fd208be03f3(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonoffline_80c49fd208be03f3(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `ononline` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_ononline_88833ed60029f546() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `ononline` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn ononline(&self) -> Option<::js_sys::Function> {
                ///Getter for the `ononline` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_ononline_88833ed60029f546(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_ononline_88833ed60029f546(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `ononline` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setononline_0a1d4268fe9cc0dc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `ononline` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_ononline(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `ononline` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/ononline)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setononline_0a1d4268fe9cc0dc(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setononline_0a1d4268fe9cc0dc(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpagehide` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpagehide_37d6997c7d404771() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onpagehide` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpagehide(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpagehide` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpagehide_37d6997c7d404771(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpagehide_37d6997c7d404771(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpagehide` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpagehide_d2c38ce7ffc2860c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onpagehide` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpagehide(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpagehide` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpagehide)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpagehide_d2c38ce7ffc2860c(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpagehide_d2c38ce7ffc2860c(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpageshow` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpageshow_69ff6c3904d80eeb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onpageshow` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpageshow(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpageshow` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpageshow_69ff6c3904d80eeb(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpageshow_69ff6c3904d80eeb(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpageshow` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpageshow_574699a323d2abcc() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onpageshow` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpageshow(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpageshow` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpageshow)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpageshow_574699a323d2abcc(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpageshow_574699a323d2abcc(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onpopstate` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onpopstate_716bfa4c11e4c085() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onpopstate` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onpopstate(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onpopstate` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onpopstate_716bfa4c11e4c085(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onpopstate_716bfa4c11e4c085(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onpopstate` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonpopstate_9309fcfe3458b54f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onpopstate` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onpopstate(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onpopstate` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onpopstate)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonpopstate_9309fcfe3458b54f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonpopstate_9309fcfe3458b54f(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onstorage` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onstorage_ec406d7f0a2a8de9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onstorage` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onstorage(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onstorage` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onstorage_ec406d7f0a2a8de9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onstorage_ec406d7f0a2a8de9(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onstorage` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonstorage_ef17305d94bbf49a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onstorage` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onstorage(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onstorage` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onstorage)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonstorage_ef17305d94bbf49a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonstorage_ef17305d94bbf49a(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onunload` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onunload_f18a09696b415bc7() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `onunload` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onunload(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onunload` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onunload_f18a09696b415bc7(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onunload_f18a09696b415bc7(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onunload` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonunload_c9b04ea0b307318d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///Setter for the `onunload` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onunload(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onunload` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/onunload)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonunload_c9b04ea0b307318d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonunload_c9b04ea0b307318d(this, value)
                    };
                    ()
                }
            }
        }
        impl Window {}
        ///Getter for the `origin` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/origin)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_origin_80924dfb5249f5c2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `origin` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/origin)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn origin(&self) -> String {
                ///Getter for the `origin` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/origin)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_origin_80924dfb5249f5c2(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_origin_80924dfb5249f5c2(this)
                    };
                    <String as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///Getter for the `isSecureContext` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_isSecureContext_833f32593829f8eb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Window {
            ///Getter for the `isSecureContext` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn is_secure_context(&self) -> bool {
                ///Getter for the `isSecureContext` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_isSecureContext_833f32593829f8eb(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_isSecureContext_833f32593829f8eb(this)
                    };
                    <bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Window {}
        impl Window {}
        impl Window {}
        ///The `alert()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_alert_584d0347f449eff5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `alert()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn alert(&self) -> Result<(), JsValue> {
                ///The `alert()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_alert_584d0347f449eff5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_alert_584d0347f449eff5(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `alert()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_alert_af5c272d926011d5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `alert()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn alert_with_message(&self, message: &str) -> Result<(), JsValue> {
                ///The `alert()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/alert)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_alert_af5c272d926011d5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let message =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(message);
                        __wbg_alert_af5c272d926011d5(this, message)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `blur()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/blur)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_blur_5b50b7559a13dd98() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `blur()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/blur)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn blur(&self) -> Result<(), JsValue> {
                ///The `blur()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/blur)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_blur_5b50b7559a13dd98(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_blur_5b50b7559a13dd98(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `cancelAnimationFrame()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_cancelAnimationFrame_7f3ba4191e67c86b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `cancelAnimationFrame()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn cancel_animation_frame(&self, handle: i32) -> Result<(), JsValue> {
                ///The `cancelAnimationFrame()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelAnimationFrame)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_cancelAnimationFrame_7f3ba4191e67c86b(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handle = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handle);
                        __wbg_cancelAnimationFrame_7f3ba4191e67c86b(this, handle)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `cancelIdleCallback()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_cancelIdleCallback_1ce9633521379034() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <u32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `cancelIdleCallback()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn cancel_idle_callback(&self, handle: u32) {
                ///The `cancelIdleCallback()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/cancelIdleCallback)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_cancelIdleCallback_1ce9633521379034(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handle: <u32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handle = <u32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handle);
                        __wbg_cancelIdleCallback_1ce9633521379034(this, handle)
                    };
                    ()
                }
            }
        }
        ///The `captureEvents()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_captureEvents_8cf40e7989c73f61() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `captureEvents()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn capture_events(&self) {
                ///The `captureEvents()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/captureEvents)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_captureEvents_8cf40e7989c73f61(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_captureEvents_8cf40e7989c73f61(this)
                    };
                    ()
                }
            }
        }
        ///The `close()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/close)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_close_2baebb8bff6efaf9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `close()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/close)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn close(&self) -> Result<(), JsValue> {
                ///The `close()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/close)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_close_2baebb8bff6efaf9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_close_2baebb8bff6efaf9(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `confirm()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_confirm_b955a6333d3bda90() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Window {
            ///The `confirm()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn confirm(&self) -> Result<bool, JsValue> {
                ///The `confirm()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_confirm_b955a6333d3bda90(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_confirm_b955a6333d3bda90(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `confirm()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_confirm_cdc54611344aacc8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <bool as WasmDescribe>::describe();
        }
        impl Window {
            ///The `confirm()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn confirm_with_message(&self, message: &str) -> Result<bool, JsValue> {
                ///The `confirm()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_confirm_cdc54611344aacc8(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <bool as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let message =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(message);
                        __wbg_confirm_cdc54611344aacc8(this, message)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<bool as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `focus()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/focus)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_focus_fe2f1d350bdd9422() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `focus()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/focus)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn focus(&self) -> Result<(), JsValue> {
                ///The `focus()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/focus)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_focus_fe2f1d350bdd9422(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_focus_fe2f1d350bdd9422(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        impl Window {}
        impl Window {}
        impl Window {}
        impl Window {}
        ///The `moveBy()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_moveBy_3500cbae7114095b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `moveBy()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn move_by(&self, x: i32, y: i32) -> Result<(), JsValue> {
                ///The `moveBy()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_moveBy_3500cbae7114095b(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_moveBy_3500cbae7114095b(this, x, y)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `moveTo()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_moveTo_64ad22f2e5703a21() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `moveTo()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn move_to(&self, x: i32, y: i32) -> Result<(), JsValue> {
                ///The `moveTo()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/moveTo)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_moveTo_64ad22f2e5703a21(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_moveTo_64ad22f2e5703a21(this, x, y)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `open()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_open_84004ec63425ef7d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<Window> as WasmDescribe>::describe();
        }
        impl Window {
            ///The `open()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn open(&self) -> Result<Option<Window>, JsValue> {
                ///The `open()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_open_84004ec63425ef7d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_open_84004ec63425ef7d(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `open()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_open_016e1ce96cc27f6a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<Window> as WasmDescribe>::describe();
        }
        impl Window {
            ///The `open()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn open_with_url(&self, url: &str) -> Result<Option<Window>, JsValue> {
                ///The `open()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_open_016e1ce96cc27f6a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let url = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(url);
                        __wbg_open_016e1ce96cc27f6a(this, url)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `open()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_open_7e3a4789bd559091() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<Window> as WasmDescribe>::describe();
        }
        impl Window {
            ///The `open()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn open_with_url_and_target(
                &self,
                url: &str,
                target: &str,
            ) -> Result<Option<Window>, JsValue> {
                ///The `open()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_open_7e3a4789bd559091(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        target: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let url = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(url);
                        let target = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                        __wbg_open_7e3a4789bd559091(this, url, target)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `open()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_open_16a395afdb178dc0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<Window> as WasmDescribe>::describe();
        }
        impl Window {
            ///The `open()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn open_with_url_and_target_and_features(
                &self,
                url: &str,
                target: &str,
                features: &str,
            ) -> Result<Option<Window>, JsValue> {
                ///The `open()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_open_16a395afdb178dc0(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        target: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        features: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<Window> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let url = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(url);
                        let target = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target);
                        let features =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(features);
                        __wbg_open_16a395afdb178dc0(this, url, target, features)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<Window> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `postMessage()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_postMessage_7319523ac47b4e27() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `postMessage()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn post_message(
                &self,
                message: &::wasm_bindgen::JsValue,
                target_origin: &str,
            ) -> Result<(), JsValue> {
                ///The `postMessage()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_postMessage_7319523ac47b4e27(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        target_origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let message = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (message) ;
                        let target_origin =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target_origin);
                        __wbg_postMessage_7319523ac47b4e27(this, message, target_origin)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `postMessage()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_postMessage_d359a575e751d45a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Window as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `postMessage()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn post_message_with_transfer(
                &self,
                message: &::wasm_bindgen::JsValue,
                target_origin: &str,
                transfer: &::wasm_bindgen::JsValue,
            ) -> Result<(), JsValue> {
                ///The `postMessage()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_postMessage_d359a575e751d45a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        target_origin: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        transfer : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let message = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (message) ;
                        let target_origin =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(target_origin);
                        let transfer = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (transfer) ;
                        __wbg_postMessage_d359a575e751d45a(this, message, target_origin, transfer)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `print()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/print)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_print_8720de99b7e4b449() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `print()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/print)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn print(&self) -> Result<(), JsValue> {
                ///The `print()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/print)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_print_8720de99b7e4b449(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_print_8720de99b7e4b449(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `prompt()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prompt_e8fd2e2a9ea65726() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Window {
            ///The `prompt()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prompt(&self) -> Result<Option<String>, JsValue> {
                ///The `prompt()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prompt_e8fd2e2a9ea65726(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_prompt_e8fd2e2a9ea65726(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `prompt()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prompt_8272ea4bbe92eabd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Window {
            ///The `prompt()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prompt_with_message(&self, message: &str) -> Result<Option<String>, JsValue> {
                ///The `prompt()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prompt_8272ea4bbe92eabd(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let message =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(message);
                        __wbg_prompt_8272ea4bbe92eabd(this, message)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `prompt()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_prompt_322a77694725dedb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<String> as WasmDescribe>::describe();
        }
        impl Window {
            ///The `prompt()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn prompt_with_message_and_default(
                &self,
                message: &str,
                default: &str,
            ) -> Result<Option<String>, JsValue> {
                ///The `prompt()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_prompt_322a77694725dedb(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        message: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        default: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<String> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let message =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(message);
                        let default =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(default);
                        __wbg_prompt_322a77694725dedb(this, message, default)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Option<String> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `releaseEvents()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_releaseEvents_2a4c5daa819441b8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `releaseEvents()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn release_events(&self) {
                ///The `releaseEvents()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_releaseEvents_2a4c5daa819441b8(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_releaseEvents_2a4c5daa819441b8(this)
                    };
                    ()
                }
            }
        }
        ///The `requestAnimationFrame()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_requestAnimationFrame_89935c9d6ac25d2f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `requestAnimationFrame()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn request_animation_frame(
                &self,
                callback: &::js_sys::Function,
            ) -> Result<i32, JsValue> {
                ///The `requestAnimationFrame()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestAnimationFrame)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_requestAnimationFrame_89935c9d6ac25d2f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let callback =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                callback,
                            );
                        __wbg_requestAnimationFrame_89935c9d6ac25d2f(this, callback)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `requestIdleCallback()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_requestIdleCallback_fcb35723f6b97a5a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <u32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `requestIdleCallback()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn request_idle_callback(
                &self,
                callback: &::js_sys::Function,
            ) -> Result<u32, JsValue> {
                ///The `requestIdleCallback()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/requestIdleCallback)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_requestIdleCallback_fcb35723f6b97a5a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        callback: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <u32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let callback =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                callback,
                            );
                        __wbg_requestIdleCallback_fcb35723f6b97a5a(this, callback)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<u32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl Window {}
        ///The `resizeBy()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_resizeBy_8d7b7837385d956d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `resizeBy()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn resize_by(&self, x: i32, y: i32) -> Result<(), JsValue> {
                ///The `resizeBy()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_resizeBy_8d7b7837385d956d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_resizeBy_8d7b7837385d956d(this, x, y)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `resizeTo()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_resizeTo_65be5869202d6324() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `resizeTo()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn resize_to(&self, x: i32, y: i32) -> Result<(), JsValue> {
                ///The `resizeTo()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeTo)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_resizeTo_65be5869202d6324(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let x = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_resizeTo_65be5869202d6324(this, x, y)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `scroll()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scroll_a5bc66f646a97318() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `scroll()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_with_x_and_y(&self, x: f64, y: f64) {
                ///The `scroll()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scroll_a5bc66f646a97318(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_scroll_a5bc66f646a97318(this, x, y)
                    };
                    ()
                }
            }
        }
        ///The `scroll()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scroll_1c713af62fbd7b2e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `scroll()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll(&self) {
                ///The `scroll()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scroll)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scroll_1c713af62fbd7b2e(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scroll_1c713af62fbd7b2e(this)
                    };
                    ()
                }
            }
        }
        impl Window {}
        ///The `scrollBy()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollBy_e172b416dd2abe29() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `scrollBy()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_by_with_x_and_y(&self, x: f64, y: f64) {
                ///The `scrollBy()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollBy_e172b416dd2abe29(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_scrollBy_e172b416dd2abe29(this, x, y)
                    };
                    ()
                }
            }
        }
        ///The `scrollBy()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollBy_49f0d02bdf8002d5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `scrollBy()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_by(&self) {
                ///The `scrollBy()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollBy)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollBy_49f0d02bdf8002d5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scrollBy_49f0d02bdf8002d5(this)
                    };
                    ()
                }
            }
        }
        impl Window {}
        ///The `scrollTo()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollTo_519a8115957d6180() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <f64 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `scrollTo()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_to_with_x_and_y(&self, x: f64, y: f64) {
                ///The `scrollTo()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollTo_519a8115957d6180(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        x: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        y: <f64 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let x = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(x);
                        let y = <f64 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(y);
                        __wbg_scrollTo_519a8115957d6180(this, x, y)
                    };
                    ()
                }
            }
        }
        ///The `scrollTo()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_scrollTo_63bb33309f505fba() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `scrollTo()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn scroll_to(&self) {
                ///The `scrollTo()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_scrollTo_63bb33309f505fba(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_scrollTo_63bb33309f505fba(this)
                    };
                    ()
                }
            }
        }
        impl Window {}
        ///The `stop()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/stop)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_stop_93be791ddb715470() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `stop()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/stop)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn stop(&self) -> Result<(), JsValue> {
                ///The `stop()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/stop)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_stop_93be791ddb715470(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_stop_93be791ddb715470(this)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///Indexing getter.
        ///
        ///
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_get_a0f7f23dc0b8d32b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <Option<::js_sys::Object> as WasmDescribe>::describe();
        }
        impl Window {
            ///Indexing getter.
            ///
            ///
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn get(&self, name: &str) -> Option<::js_sys::Object> {
                ///Indexing getter.
                ///
                ///
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_get_a0f7f23dc0b8d32b(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        name: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let name = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(name);
                        __wbg_get_a0f7f23dc0b8d32b(this, name)
                    };
                    <Option<::js_sys::Object> as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        ///The `atob()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/atob)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_atob_e50206dd8db7c7a9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Window {
            ///The `atob()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/atob)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn atob(&self, atob: &str) -> Result<String, JsValue> {
                ///The `atob()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/atob)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_atob_e50206dd8db7c7a9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        atob: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let atob = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(atob);
                        __wbg_atob_e50206dd8db7c7a9(this, atob)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        ///The `btoa()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/btoa)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_btoa_cea818dd237c91eb() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <String as WasmDescribe>::describe();
        }
        impl Window {
            ///The `btoa()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/btoa)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn btoa(&self, btoa: &str) -> Result<String, JsValue> {
                ///The `btoa()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/btoa)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_btoa_cea818dd237c91eb(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        btoa: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <String as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let btoa = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(btoa);
                        __wbg_btoa_cea818dd237c91eb(this, btoa)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<String as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        ///The `clearInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_clearInterval_07000d9d7cba9ad9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `clearInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn clear_interval(&self) {
                ///The `clearInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_clearInterval_07000d9d7cba9ad9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_clearInterval_07000d9d7cba9ad9(this)
                    };
                    ()
                }
            }
        }
        ///The `clearInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_clearInterval_d3ba4be25e4c21a4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `clearInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn clear_interval_with_handle(&self, handle: i32) {
                ///The `clearInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_clearInterval_d3ba4be25e4c21a4(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handle = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handle);
                        __wbg_clearInterval_d3ba4be25e4c21a4(this, handle)
                    };
                    ()
                }
            }
        }
        ///The `clearTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_clearTimeout_4b8d9c7bfc171a27() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Window as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `clearTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn clear_timeout(&self) {
                ///The `clearTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_clearTimeout_4b8d9c7bfc171a27(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_clearTimeout_4b8d9c7bfc171a27(this)
                    };
                    ()
                }
            }
        }
        ///The `clearTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_clearTimeout_dd3fc8919742efa0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Window {
            ///The `clearTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn clear_timeout_with_handle(&self, handle: i32) {
                ///The `clearTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/clearTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_clearTimeout_dd3fc8919742efa0(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handle: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handle = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handle);
                        __wbg_clearTimeout_dd3fc8919742efa0(this, handle)
                    };
                    ()
                }
            }
        }
        impl Window {}
        impl Window {}
        #[cfg(feature = "HtmlCanvasElement")]
        ///The `createImageBitmap()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createImageBitmap_616d6cf36c6cba32() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <::js_sys::Promise as WasmDescribe>::describe();
        }
        impl Window {
            #[cfg(feature = "HtmlCanvasElement")]
            ///The `createImageBitmap()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_image_bitmap_with_html_canvas_element(
                &self,
                a_image: &HtmlCanvasElement,
            ) -> Result<::js_sys::Promise, JsValue> {
                #[cfg(feature = "HtmlCanvasElement")]
                ///The `createImageBitmap()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createImageBitmap_616d6cf36c6cba32(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_image: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let a_image =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                a_image,
                            );
                        __wbg_createImageBitmap_616d6cf36c6cba32(this, a_image)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl Window {}
        impl Window {}
        #[cfg(feature = "CanvasRenderingContext2d")]
        ///The `createImageBitmap()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createImageBitmap_cb8c09f61058072b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <::js_sys::Promise as WasmDescribe>::describe();
        }
        impl Window {
            #[cfg(feature = "CanvasRenderingContext2d")]
            ///The `createImageBitmap()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_image_bitmap_with_canvas_rendering_context_2d(
                &self,
                a_image: &CanvasRenderingContext2d,
            ) -> Result<::js_sys::Promise, JsValue> {
                #[cfg(feature = "CanvasRenderingContext2d")]
                ///The `createImageBitmap()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createImageBitmap_cb8c09f61058072b(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_image : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let a_image = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (a_image) ;
                        __wbg_createImageBitmap_cb8c09f61058072b(this, a_image)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl Window {}
        ///The `createImageBitmap()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createImageBitmap_7f1ac3595741dc4c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Object as WasmDescribe>::describe();
            <::js_sys::Promise as WasmDescribe>::describe();
        }
        impl Window {
            ///The `createImageBitmap()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_image_bitmap_with_buffer_source(
                &self,
                a_image: &::js_sys::Object,
            ) -> Result<::js_sys::Promise, JsValue> {
                ///The `createImageBitmap()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createImageBitmap_7f1ac3595741dc4c(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_image: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let a_image =
                            <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                a_image,
                            );
                        __wbg_createImageBitmap_7f1ac3595741dc4c(this, a_image)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `createImageBitmap()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createImageBitmap_85989c1b665dfb57() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&mut [u8] as WasmDescribe>::describe();
            <::js_sys::Promise as WasmDescribe>::describe();
        }
        impl Window {
            ///The `createImageBitmap()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_image_bitmap_with_u8_array(
                &self,
                a_image: &mut [u8],
            ) -> Result<::js_sys::Promise, JsValue> {
                ///The `createImageBitmap()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createImageBitmap_85989c1b665dfb57(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_image: <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let a_image =
                            <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                        __wbg_createImageBitmap_85989c1b665dfb57(this, a_image)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl Window {}
        impl Window {}
        #[cfg(feature = "HtmlCanvasElement")]
        ///The `createImageBitmap()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
        ///
        ///*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createImageBitmap_da0c1d02cf4f387c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Window as WasmDescribe>::describe();
            <&HtmlCanvasElement as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <::js_sys::Promise as WasmDescribe>::describe();
        }
        impl Window {
            #[cfg(feature = "HtmlCanvasElement")]
            ///The `createImageBitmap()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
            ///
            ///*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_image_bitmap_with_html_canvas_element_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
                &self,
                a_image: &HtmlCanvasElement,
                a_sx: i32,
                a_sy: i32,
                a_sw: i32,
                a_sh: i32,
            ) -> Result<::js_sys::Promise, JsValue> {
                #[cfg(feature = "HtmlCanvasElement")]
                ///The `createImageBitmap()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
                ///
                ///*This API requires the following crate features to be activated: `HtmlCanvasElement`, `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createImageBitmap_da0c1d02cf4f387c(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_image: <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let a_image =
                            <&HtmlCanvasElement as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                a_image,
                            );
                        let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                        let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                        let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                        let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                        __wbg_createImageBitmap_da0c1d02cf4f387c(
                            this, a_image, a_sx, a_sy, a_sw, a_sh,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl Window {}
        impl Window {}
        #[cfg(feature = "CanvasRenderingContext2d")]
        ///The `createImageBitmap()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
        ///
        ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createImageBitmap_d4743113315a6ce1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Window as WasmDescribe>::describe();
            <&CanvasRenderingContext2d as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <::js_sys::Promise as WasmDescribe>::describe();
        }
        impl Window {
            #[cfg(feature = "CanvasRenderingContext2d")]
            ///The `createImageBitmap()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
            ///
            ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_image_bitmap_with_canvas_rendering_context_2d_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
                &self,
                a_image: &CanvasRenderingContext2d,
                a_sx: i32,
                a_sy: i32,
                a_sw: i32,
                a_sh: i32,
            ) -> Result<::js_sys::Promise, JsValue> {
                #[cfg(feature = "CanvasRenderingContext2d")]
                ///The `createImageBitmap()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
                ///
                ///*This API requires the following crate features to be activated: `CanvasRenderingContext2d`, `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createImageBitmap_d4743113315a6ce1(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_image : < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let a_image = < & CanvasRenderingContext2d as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (a_image) ;
                        let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                        let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                        let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                        let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                        __wbg_createImageBitmap_d4743113315a6ce1(
                            this, a_image, a_sx, a_sy, a_sw, a_sh,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl Window {}
        ///The `createImageBitmap()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createImageBitmap_c8b64d932240df67() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Object as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <::js_sys::Promise as WasmDescribe>::describe();
        }
        impl Window {
            ///The `createImageBitmap()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_image_bitmap_with_buffer_source_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
                &self,
                a_image: &::js_sys::Object,
                a_sx: i32,
                a_sy: i32,
                a_sw: i32,
                a_sh: i32,
            ) -> Result<::js_sys::Promise, JsValue> {
                ///The `createImageBitmap()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createImageBitmap_c8b64d932240df67(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_image: <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let a_image =
                            <&::js_sys::Object as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                a_image,
                            );
                        let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                        let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                        let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                        let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                        __wbg_createImageBitmap_c8b64d932240df67(
                            this, a_image, a_sx, a_sy, a_sw, a_sh,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `createImageBitmap()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_createImageBitmap_d58852b9afd9b4e1() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Window as WasmDescribe>::describe();
            <&mut [u8] as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <::js_sys::Promise as WasmDescribe>::describe();
        }
        impl Window {
            ///The `createImageBitmap()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn create_image_bitmap_with_u8_array_and_a_sx_and_a_sy_and_a_sw_and_a_sh(
                &self,
                a_image: &mut [u8],
                a_sx: i32,
                a_sy: i32,
                a_sw: i32,
                a_sh: i32,
            ) -> Result<::js_sys::Promise, JsValue> {
                ///The `createImageBitmap()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_createImageBitmap_d58852b9afd9b4e1(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_image: <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sx: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sy: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sw: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        a_sh: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let a_image =
                            <&mut [u8] as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_image);
                        let a_sx = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sx);
                        let a_sy = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sy);
                        let a_sw = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sw);
                        let a_sh = <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(a_sh);
                        __wbg_createImageBitmap_d58852b9afd9b4e1(
                            this, a_image, a_sx, a_sy, a_sw, a_sh,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        impl Window {}
        ///The `fetch()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_fetch_8fd2e4322bb8dc59() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <::js_sys::Promise as WasmDescribe>::describe();
        }
        impl Window {
            ///The `fetch()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn fetch_with_str(&self, input: &str) -> ::js_sys::Promise {
                ///The `fetch()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_fetch_8fd2e4322bb8dc59(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        input: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let input = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(input);
                        __wbg_fetch_8fd2e4322bb8dc59(this, input)
                    };
                    <::js_sys::Promise as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret)
                }
            }
        }
        impl Window {}
        impl Window {}
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_03ef3322e62df16c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_callback(
                &self,
                handler: &::js_sys::Function,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_03ef3322e62df16c(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        __wbg_setInterval_03ef3322e62df16c(this, handler)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_09738813ff0efd4d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_callback_and_timeout_and_arguments(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments: &::js_sys::Array,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_09738813ff0efd4d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                arguments,
                            );
                        __wbg_setInterval_09738813ff0efd4d(this, handler, timeout, arguments)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_06df6f1ebeafd66f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_callback_and_timeout_and_arguments_0(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_06df6f1ebeafd66f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        __wbg_setInterval_06df6f1ebeafd66f(this, handler, timeout)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_c6f2783e48211f1d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_callback_and_timeout_and_arguments_1(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_c6f2783e48211f1d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        __wbg_setInterval_c6f2783e48211f1d(this, handler, timeout, arguments_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_2f3602dcc88268e5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_callback_and_timeout_and_arguments_2(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
                arguments_2: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_2f3602dcc88268e5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_2) ;
                        __wbg_setInterval_2f3602dcc88268e5(
                            this,
                            handler,
                            timeout,
                            arguments_1,
                            arguments_2,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_70d9a40e71cef5b6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_callback_and_timeout_and_arguments_3(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
                arguments_2: &::wasm_bindgen::JsValue,
                arguments_3: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_70d9a40e71cef5b6(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_2) ;
                        let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_3) ;
                        __wbg_setInterval_70d9a40e71cef5b6(
                            this,
                            handler,
                            timeout,
                            arguments_1,
                            arguments_2,
                            arguments_3,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_3cca8b2641a6a487() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_callback_and_timeout_and_arguments_4(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
                arguments_2: &::wasm_bindgen::JsValue,
                arguments_3: &::wasm_bindgen::JsValue,
                arguments_4: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_3cca8b2641a6a487(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_2) ;
                        let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_3) ;
                        let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_4) ;
                        __wbg_setInterval_3cca8b2641a6a487(
                            this,
                            handler,
                            timeout,
                            arguments_1,
                            arguments_2,
                            arguments_3,
                            arguments_4,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_63148819ca312730() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_callback_and_timeout_and_arguments_5(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
                arguments_2: &::wasm_bindgen::JsValue,
                arguments_3: &::wasm_bindgen::JsValue,
                arguments_4: &::wasm_bindgen::JsValue,
                arguments_5: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_63148819ca312730(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_2) ;
                        let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_3) ;
                        let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_4) ;
                        let arguments_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_5) ;
                        __wbg_setInterval_63148819ca312730(
                            this,
                            handler,
                            timeout,
                            arguments_1,
                            arguments_2,
                            arguments_3,
                            arguments_4,
                            arguments_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_8a6eb622b53d0db0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(9u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_callback_and_timeout_and_arguments_6(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
                arguments_2: &::wasm_bindgen::JsValue,
                arguments_3: &::wasm_bindgen::JsValue,
                arguments_4: &::wasm_bindgen::JsValue,
                arguments_5: &::wasm_bindgen::JsValue,
                arguments_6: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_8a6eb622b53d0db0(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_2) ;
                        let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_3) ;
                        let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_4) ;
                        let arguments_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_5) ;
                        let arguments_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_6) ;
                        __wbg_setInterval_8a6eb622b53d0db0(
                            this,
                            handler,
                            timeout,
                            arguments_1,
                            arguments_2,
                            arguments_3,
                            arguments_4,
                            arguments_5,
                            arguments_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_6e930af0c117b03f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(10u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_callback_and_timeout_and_arguments_7(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
                arguments_2: &::wasm_bindgen::JsValue,
                arguments_3: &::wasm_bindgen::JsValue,
                arguments_4: &::wasm_bindgen::JsValue,
                arguments_5: &::wasm_bindgen::JsValue,
                arguments_6: &::wasm_bindgen::JsValue,
                arguments_7: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_6e930af0c117b03f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_2) ;
                        let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_3) ;
                        let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_4) ;
                        let arguments_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_5) ;
                        let arguments_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_6) ;
                        let arguments_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_7) ;
                        __wbg_setInterval_6e930af0c117b03f(
                            this,
                            handler,
                            timeout,
                            arguments_1,
                            arguments_2,
                            arguments_3,
                            arguments_4,
                            arguments_5,
                            arguments_6,
                            arguments_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_97f4df12d65cd3f9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_str(&self, handler: &str) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_97f4df12d65cd3f9(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        __wbg_setInterval_97f4df12d65cd3f9(this, handler)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_a67ad10140581607() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_str_and_timeout_and_unused(
                &self,
                handler: &str,
                timeout: i32,
                unused: &::js_sys::Array,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_a67ad10140581607(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                unused,
                            );
                        __wbg_setInterval_a67ad10140581607(this, handler, timeout, unused)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_856db3f8668e4b7d() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_str_and_timeout_and_unused_0(
                &self,
                handler: &str,
                timeout: i32,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_856db3f8668e4b7d(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        __wbg_setInterval_856db3f8668e4b7d(this, handler, timeout)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_bd04bfcfdaa88d0b() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_str_and_timeout_and_unused_1(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_bd04bfcfdaa88d0b(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        __wbg_setInterval_bd04bfcfdaa88d0b(this, handler, timeout, unused_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_1c3dd78e70eecb7a() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_str_and_timeout_and_unused_2(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
                unused_2: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_1c3dd78e70eecb7a(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_2) ;
                        __wbg_setInterval_1c3dd78e70eecb7a(
                            this, handler, timeout, unused_1, unused_2,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_37f6328206aac311() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_str_and_timeout_and_unused_3(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
                unused_2: &::wasm_bindgen::JsValue,
                unused_3: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_37f6328206aac311(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_2) ;
                        let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_3) ;
                        __wbg_setInterval_37f6328206aac311(
                            this, handler, timeout, unused_1, unused_2, unused_3,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_a6f6c0b298133177() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_str_and_timeout_and_unused_4(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
                unused_2: &::wasm_bindgen::JsValue,
                unused_3: &::wasm_bindgen::JsValue,
                unused_4: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_a6f6c0b298133177(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_2) ;
                        let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_3) ;
                        let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_4) ;
                        __wbg_setInterval_a6f6c0b298133177(
                            this, handler, timeout, unused_1, unused_2, unused_3, unused_4,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_a3c9f2438b3604c5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_str_and_timeout_and_unused_5(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
                unused_2: &::wasm_bindgen::JsValue,
                unused_3: &::wasm_bindgen::JsValue,
                unused_4: &::wasm_bindgen::JsValue,
                unused_5: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_a3c9f2438b3604c5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_2) ;
                        let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_3) ;
                        let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_4) ;
                        let unused_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_5) ;
                        __wbg_setInterval_a3c9f2438b3604c5(
                            this, handler, timeout, unused_1, unused_2, unused_3, unused_4,
                            unused_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_19282184f0dc278f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(9u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_str_and_timeout_and_unused_6(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
                unused_2: &::wasm_bindgen::JsValue,
                unused_3: &::wasm_bindgen::JsValue,
                unused_4: &::wasm_bindgen::JsValue,
                unused_5: &::wasm_bindgen::JsValue,
                unused_6: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_19282184f0dc278f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_2) ;
                        let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_3) ;
                        let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_4) ;
                        let unused_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_5) ;
                        let unused_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_6) ;
                        __wbg_setInterval_19282184f0dc278f(
                            this, handler, timeout, unused_1, unused_2, unused_3, unused_4,
                            unused_5, unused_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setInterval()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setInterval_d492b6e43b4320fe() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(10u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setInterval()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_interval_with_str_and_timeout_and_unused_7(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
                unused_2: &::wasm_bindgen::JsValue,
                unused_3: &::wasm_bindgen::JsValue,
                unused_4: &::wasm_bindgen::JsValue,
                unused_5: &::wasm_bindgen::JsValue,
                unused_6: &::wasm_bindgen::JsValue,
                unused_7: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setInterval()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setInterval)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setInterval_d492b6e43b4320fe(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_2) ;
                        let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_3) ;
                        let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_4) ;
                        let unused_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_5) ;
                        let unused_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_6) ;
                        let unused_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_7) ;
                        __wbg_setInterval_d492b6e43b4320fe(
                            this, handler, timeout, unused_1, unused_2, unused_3, unused_4,
                            unused_5, unused_6, unused_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_248993910cb2beac() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_callback(
                &self,
                handler: &::js_sys::Function,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_248993910cb2beac(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        __wbg_setTimeout_248993910cb2beac(this, handler)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_085278125bf2ac5f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_callback_and_timeout_and_arguments(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments: &::js_sys::Array,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_085278125bf2ac5f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                arguments,
                            );
                        __wbg_setTimeout_085278125bf2ac5f(this, handler, timeout, arguments)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_eaf00c9296a6ab88() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_callback_and_timeout_and_arguments_0(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_eaf00c9296a6ab88(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        __wbg_setTimeout_eaf00c9296a6ab88(this, handler, timeout)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_15399ae17fbf61e8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_callback_and_timeout_and_arguments_1(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_15399ae17fbf61e8(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        __wbg_setTimeout_15399ae17fbf61e8(this, handler, timeout, arguments_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_b3078607e9dc29f0() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_callback_and_timeout_and_arguments_2(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
                arguments_2: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_b3078607e9dc29f0(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_2) ;
                        __wbg_setTimeout_b3078607e9dc29f0(
                            this,
                            handler,
                            timeout,
                            arguments_1,
                            arguments_2,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_75275208af58454f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_callback_and_timeout_and_arguments_3(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
                arguments_2: &::wasm_bindgen::JsValue,
                arguments_3: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_75275208af58454f(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_2) ;
                        let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_3) ;
                        __wbg_setTimeout_75275208af58454f(
                            this,
                            handler,
                            timeout,
                            arguments_1,
                            arguments_2,
                            arguments_3,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_edfabf1a11f25de3() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_callback_and_timeout_and_arguments_4(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
                arguments_2: &::wasm_bindgen::JsValue,
                arguments_3: &::wasm_bindgen::JsValue,
                arguments_4: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_edfabf1a11f25de3(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_2) ;
                        let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_3) ;
                        let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_4) ;
                        __wbg_setTimeout_edfabf1a11f25de3(
                            this,
                            handler,
                            timeout,
                            arguments_1,
                            arguments_2,
                            arguments_3,
                            arguments_4,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_84cbd8f3e32f71d8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_callback_and_timeout_and_arguments_5(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
                arguments_2: &::wasm_bindgen::JsValue,
                arguments_3: &::wasm_bindgen::JsValue,
                arguments_4: &::wasm_bindgen::JsValue,
                arguments_5: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_84cbd8f3e32f71d8(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_2) ;
                        let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_3) ;
                        let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_4) ;
                        let arguments_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_5) ;
                        __wbg_setTimeout_84cbd8f3e32f71d8(
                            this,
                            handler,
                            timeout,
                            arguments_1,
                            arguments_2,
                            arguments_3,
                            arguments_4,
                            arguments_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_49ee34212e59c5e5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(9u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_callback_and_timeout_and_arguments_6(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
                arguments_2: &::wasm_bindgen::JsValue,
                arguments_3: &::wasm_bindgen::JsValue,
                arguments_4: &::wasm_bindgen::JsValue,
                arguments_5: &::wasm_bindgen::JsValue,
                arguments_6: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_49ee34212e59c5e5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_2) ;
                        let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_3) ;
                        let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_4) ;
                        let arguments_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_5) ;
                        let arguments_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_6) ;
                        __wbg_setTimeout_49ee34212e59c5e5(
                            this,
                            handler,
                            timeout,
                            arguments_1,
                            arguments_2,
                            arguments_3,
                            arguments_4,
                            arguments_5,
                            arguments_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_dd8e39cbf33ee08c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(10u32);
            <&Window as WasmDescribe>::describe();
            <&::js_sys::Function as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_callback_and_timeout_and_arguments_7(
                &self,
                handler: &::js_sys::Function,
                timeout: i32,
                arguments_1: &::wasm_bindgen::JsValue,
                arguments_2: &::wasm_bindgen::JsValue,
                arguments_3: &::wasm_bindgen::JsValue,
                arguments_4: &::wasm_bindgen::JsValue,
                arguments_5: &::wasm_bindgen::JsValue,
                arguments_6: &::wasm_bindgen::JsValue,
                arguments_7: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_dd8e39cbf33ee08c(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        arguments_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        arguments_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&::js_sys::Function as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                handler,
                            );
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let arguments_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_1) ;
                        let arguments_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_2) ;
                        let arguments_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_3) ;
                        let arguments_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_4) ;
                        let arguments_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_5) ;
                        let arguments_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_6) ;
                        let arguments_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (arguments_7) ;
                        __wbg_setTimeout_dd8e39cbf33ee08c(
                            this,
                            handler,
                            timeout,
                            arguments_1,
                            arguments_2,
                            arguments_3,
                            arguments_4,
                            arguments_5,
                            arguments_6,
                            arguments_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_ed059a8208bf2920() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_str(&self, handler: &str) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_ed059a8208bf2920(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        __wbg_setTimeout_ed059a8208bf2920(this, handler)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_a22cbc355a499b0e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::js_sys::Array as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_str_and_timeout_and_unused(
                &self,
                handler: &str,
                timeout: i32,
                unused: &::js_sys::Array,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_a22cbc355a499b0e(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                unused,
                            );
                        __wbg_setTimeout_a22cbc355a499b0e(this, handler, timeout, unused)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_e9f56354cdf9bcdd() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_str_and_timeout_and_unused_0(
                &self,
                handler: &str,
                timeout: i32,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_e9f56354cdf9bcdd(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        __wbg_setTimeout_e9f56354cdf9bcdd(this, handler, timeout)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_6faf96154acce1f5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(4u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_str_and_timeout_and_unused_1(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_6faf96154acce1f5(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        __wbg_setTimeout_6faf96154acce1f5(this, handler, timeout, unused_1)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_0b731d88611502a8() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(5u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_str_and_timeout_and_unused_2(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
                unused_2: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_0b731d88611502a8(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_2) ;
                        __wbg_setTimeout_0b731d88611502a8(
                            this, handler, timeout, unused_1, unused_2,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_9026c5bbdf9354b4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(6u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_str_and_timeout_and_unused_3(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
                unused_2: &::wasm_bindgen::JsValue,
                unused_3: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_9026c5bbdf9354b4(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_2) ;
                        let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_3) ;
                        __wbg_setTimeout_9026c5bbdf9354b4(
                            this, handler, timeout, unused_1, unused_2, unused_3,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_42e7d5074d5f726e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(7u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_str_and_timeout_and_unused_4(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
                unused_2: &::wasm_bindgen::JsValue,
                unused_3: &::wasm_bindgen::JsValue,
                unused_4: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_42e7d5074d5f726e(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_2) ;
                        let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_3) ;
                        let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_4) ;
                        __wbg_setTimeout_42e7d5074d5f726e(
                            this, handler, timeout, unused_1, unused_2, unused_3, unused_4,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_c14633ef977094a2() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(8u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_str_and_timeout_and_unused_5(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
                unused_2: &::wasm_bindgen::JsValue,
                unused_3: &::wasm_bindgen::JsValue,
                unused_4: &::wasm_bindgen::JsValue,
                unused_5: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_c14633ef977094a2(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_2) ;
                        let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_3) ;
                        let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_4) ;
                        let unused_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_5) ;
                        __wbg_setTimeout_c14633ef977094a2(
                            this, handler, timeout, unused_1, unused_2, unused_3, unused_4,
                            unused_5,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_915d0da207b33114() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(9u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_str_and_timeout_and_unused_6(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
                unused_2: &::wasm_bindgen::JsValue,
                unused_3: &::wasm_bindgen::JsValue,
                unused_4: &::wasm_bindgen::JsValue,
                unused_5: &::wasm_bindgen::JsValue,
                unused_6: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_915d0da207b33114(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_2) ;
                        let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_3) ;
                        let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_4) ;
                        let unused_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_5) ;
                        let unused_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_6) ;
                        __wbg_setTimeout_915d0da207b33114(
                            this, handler, timeout, unused_1, unused_2, unused_3, unused_4,
                            unused_5, unused_6,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        ///The `setTimeout()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
        ///
        ///*This API requires the following crate features to be activated: `Window`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setTimeout_7b2689638920fdf4() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(10u32);
            <&Window as WasmDescribe>::describe();
            <&str as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <i32 as WasmDescribe>::describe();
        }
        impl Window {
            ///The `setTimeout()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
            ///
            ///*This API requires the following crate features to be activated: `Window`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_timeout_with_str_and_timeout_and_unused_7(
                &self,
                handler: &str,
                timeout: i32,
                unused_1: &::wasm_bindgen::JsValue,
                unused_2: &::wasm_bindgen::JsValue,
                unused_3: &::wasm_bindgen::JsValue,
                unused_4: &::wasm_bindgen::JsValue,
                unused_5: &::wasm_bindgen::JsValue,
                unused_6: &::wasm_bindgen::JsValue,
                unused_7: &::wasm_bindgen::JsValue,
            ) -> Result<i32, JsValue> {
                ///The `setTimeout()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Window/setTimeout)
                ///
                ///*This API requires the following crate features to be activated: `Window`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setTimeout_7b2689638920fdf4(
                        this: <&Window as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        handler: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        timeout: <i32 as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        unused_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        unused_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> <i32 as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Window as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let handler =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(handler);
                        let timeout =
                            <i32 as wasm_bindgen::convert::IntoWasmAbi>::into_abi(timeout);
                        let unused_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_1) ;
                        let unused_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_2) ;
                        let unused_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_3) ;
                        let unused_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_4) ;
                        let unused_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_5) ;
                        let unused_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_6) ;
                        let unused_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (unused_7) ;
                        __wbg_setTimeout_7b2689638920fdf4(
                            this, handler, timeout, unused_1, unused_2, unused_3, unused_4,
                            unused_5, unused_6, unused_7,
                        )
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<i32 as wasm_bindgen::convert::FromWasmAbi>::from_abi(_ret))
                }
            }
        }
        #[allow(non_upper_case_globals)]
        #[cfg(target_arch = "wasm32")]
        #[link_section = "__wasm_bindgen_unstable"]
        #[doc(hidden)]
        #[allow(clippy::all)]
        pub static __WASM_BINDGEN_GENERATED_569a971dbf00e290: [u8; 35048usize] = {
            static _INCLUDED_FILES: &[&str] = &[];
            * b".\x00\x00\x00{\"schema_version\":\"0.2.68\",\"version\":\"0.2.68\"}\xb2\x88\x00\x00\x00\x00\x81\x03\x00\x00\x02\x06Window(__wbg_instanceof_Window_adf3196bdc02b386\x00\x00\x00\x00\x1d__wbg_window_7cd572a85bde5c10\x00\x00\x00\x01\x06Window\x01\x00\x01\x06window\x01\x01\x04this\x06window\x01\x00\x00\x00\x1b__wbg_self_94b837ff0a5b3540\x00\x00\x00\x01\x06Window\x01\x00\x01\x04self\x01\x01\x04this\x04self\x01\x00\x00\x00\x1f__wbg_document_6cc8d0b87c0a99b9\x00\x00\x00\x01\x06Window\x01\x00\x01\x08document\x01\x01\x04this\x08document\x01\x00\x00\x00\x1b__wbg_name_c5044837e0c5a56e\x01\x00\x00\x01\x06Window\x01\x00\x01\x04name\x01\x01\x04this\x04name\x01\x00\x00\x00\x1e__wbg_setname_5643889f37f3158d\x01\x00\x00\x01\x06Window\x01\x00\x02\x04name\x01\x02\x04this\x05value\x08set_name\x01\x00\x00\x00\x1f__wbg_location_9b924f46d7090431\x00\x00\x00\x01\x06Window\x01\x00\x01\x08location\x01\x01\x04this\x08location\x01\x00\x00\x00\x1e__wbg_history_d9280cd6f4ab46c1\x01\x00\x00\x01\x06Window\x01\x00\x01\x07history\x01\x01\x04this\x07history\x01\x00\x00\x00%__wbg_customElements_36ff0dee6732cbeb\x00\x00\x00\x01\x06Window\x01\x00\x01\x0ecustomElements\x01\x01\x04this\x0ecustomElements\x01\x00\x00\x00\"__wbg_locationbar_c3cef9bccb3f19bd\x01\x00\x00\x01\x06Window\x01\x00\x01\x0blocationbar\x01\x01\x04this\x0blocationbar\x01\x00\x00\x00\x1e__wbg_menubar_99d63a97da0b1c5f\x01\x00\x00\x01\x06Window\x01\x00\x01\x07menubar\x01\x01\x04this\x07menubar\x01\x00\x00\x00\"__wbg_personalbar_1297982a523d81cb\x01\x00\x00\x01\x06Window\x01\x00\x01\x0bpersonalbar\x01\x01\x04this\x0bpersonalbar\x01\x00\x00\x00!__wbg_scrollbars_045e2e301651b3c4\x01\x00\x00\x01\x06Window\x01\x00\x01\nscrollbars\x01\x01\x04this\nscrollbars\x01\x00\x00\x00 __wbg_statusbar_d464b0dcb0198976\x01\x00\x00\x01\x06Window\x01\x00\x01\tstatusbar\x01\x01\x04this\tstatusbar\x01\x00\x00\x00\x1e__wbg_toolbar_b8ca65a678000bd2\x01\x00\x00\x01\x06Window\x01\x00\x01\x07toolbar\x01\x01\x04this\x07toolbar\x01\x00\x00\x00\x1d__wbg_status_a8034d7f2606425a\x01\x00\x00\x01\x06Window\x01\x00\x01\x06status\x01\x01\x04this\x06status\x01\x00\x00\x00 __wbg_setstatus_28707921dddc26c5\x01\x00\x00\x01\x06Window\x01\x00\x02\x06status\x01\x02\x04this\x05value\nset_status\x01\x00\x00\x00\x1d__wbg_closed_8d6204248db16824\x01\x00\x00\x01\x06Window\x01\x00\x01\x06closed\x01\x01\x04this\x06closed\x01\x00\x00\x00\x1c__wbg_event_881a0706afc0daa0\x00\x00\x00\x01\x06Window\x01\x00\x01\x05event\x01\x01\x04this\x05event\x01\x00\x00\x00\x1d__wbg_frames_888d92d6b62b19c1\x01\x00\x00\x01\x06Window\x01\x00\x01\x06frames\x01\x01\x04this\x06frames\x01\x00\x00\x00\x1d__wbg_length_6220444a9f7f7851\x00\x00\x00\x01\x06Window\x01\x00\x01\x06length\x01\x01\x04this\x06length\x01\x00\x00\x00\x1a__wbg_top_b5da4f9a8ea6b2a9\x01\x00\x00\x01\x06Window\x01\x00\x01\x03top\x01\x01\x04this\x03top\x01\x00\x00\x00\x1d__wbg_opener_c69d8fee6e99ab28\x01\x00\x00\x01\x06Window\x01\x00\x01\x06opener\x01\x01\x04this\x06opener\x01\x00\x00\x00 __wbg_setopener_273b6e887a828bb9\x01\x00\x00\x01\x06Window\x01\x00\x02\x06opener\x01\x02\x04this\x05value\nset_opener\x01\x00\x00\x00\x1d__wbg_parent_8314fbd89a939c2f\x01\x00\x00\x01\x06Window\x01\x00\x01\x06parent\x01\x01\x04this\x06parent\x01\x00\x00\x00#__wbg_frameElement_d71123ac90b6c189\x01\x00\x00\x01\x06Window\x01\x00\x01\x0cframeElement\x01\x01\x04this\x0cframeElement\x01\x00\x00\x00 __wbg_navigator_71c234326c0a2ebb\x00\x00\x00\x01\x06Window\x01\x00\x01\tnavigator\x01\x01\x04this\tnavigator\x01\x00\x00\x00\x1f__wbg_external_35f6768df64c2880\x01\x00\x00\x01\x06Window\x01\x00\x01\x08external\x01\x01\x04this\x08external\x01\x00\x00\x00%__wbg_onappinstalled_69a64c9b9c4aa3f7\x00\x00\x00\x01\x06Window\x01\x00\x01\x0eonappinstalled\x01\x01\x04this\x0eonappinstalled\x01\x00\x00\x00(__wbg_setonappinstalled_8774eed383da6ff5\x00\x00\x00\x01\x06Window\x01\x00\x02\x0eonappinstalled\x01\x02\x04this\x05value\x12set_onappinstalled\x01\x00\x00\x00\x1d__wbg_screen_9c8a078233a536fe\x01\x00\x00\x01\x06Window\x01\x00\x01\x06screen\x01\x01\x04this\x06screen\x01\x00\x00\x00!__wbg_innerWidth_60241abd729ed26f\x01\x00\x00\x01\x06Window\x01\x00\x01\ninnerWidth\x01\x01\x04this\ninnerWidth\x01\x00\x00\x00$__wbg_setinnerWidth_f58033ae989c8657\x01\x00\x00\x01\x06Window\x01\x00\x02\ninnerWidth\x01\x02\x04this\x05value\x0eset_innerWidth\x01\x00\x00\x00\"__wbg_innerHeight_2f860a67225f1fbd\x01\x00\x00\x01\x06Window\x01\x00\x01\x0binnerHeight\x01\x01\x04this\x0binnerHeight\x01\x00\x00\x00%__wbg_setinnerHeight_262576c4240ddfc4\x01\x00\x00\x01\x06Window\x01\x00\x02\x0binnerHeight\x01\x02\x04this\x05value\x0fset_innerHeight\x01\x00\x00\x00\x1e__wbg_scrollX_6072fadebcc36d03\x01\x00\x00\x01\x06Window\x01\x00\x01\x07scrollX\x01\x01\x04this\x07scrollX\x01\x00\x00\x00\"__wbg_pageXOffset_9e23342502f1ff6a\x01\x00\x00\x01\x06Window\x01\x00\x01\x0bpageXOffset\x01\x01\x04this\x0bpageXOffset\x01\x00\x00\x00\x1e__wbg_scrollY_849a7c5699d1e1af\x01\x00\x00\x01\x06Window\x01\x00\x01\x07scrollY\x01\x01\x04this\x07scrollY\x01\x00\x00\x00\"__wbg_pageYOffset_1859e8f766e9bea7\x01\x00\x00\x01\x06Window\x01\x00\x01\x0bpageYOffset\x01\x01\x04this\x0bpageYOffset\x01\x00\x00\x00\x1e__wbg_screenX_b9ea162dc53c5ddb\x01\x00\x00\x01\x06Window\x01\x00\x01\x07screenX\x01\x01\x04this\x07screenX\x01\x00\x00\x00!__wbg_setscreenX_de90f1516d38ec0f\x01\x00\x00\x01\x06Window\x01\x00\x02\x07screenX\x01\x02\x04this\x05value\x0bset_screenX\x01\x00\x00\x00\x1e__wbg_screenY_26508ab64e927d60\x01\x00\x00\x01\x06Window\x01\x00\x01\x07screenY\x01\x01\x04this\x07screenY\x01\x00\x00\x00!__wbg_setscreenY_daef012e9196f6e3\x01\x00\x00\x01\x06Window\x01\x00\x02\x07screenY\x01\x02\x04this\x05value\x0bset_screenY\x01\x00\x00\x00!__wbg_outerWidth_f8511258d86520d9\x01\x00\x00\x01\x06Window\x01\x00\x01\nouterWidth\x01\x01\x04this\nouterWidth\x01\x00\x00\x00$__wbg_setouterWidth_706f3b0c2dfa1ad6\x01\x00\x00\x01\x06Window\x01\x00\x02\nouterWidth\x01\x02\x04this\x05value\x0eset_outerWidth\x01\x00\x00\x00\"__wbg_outerHeight_9af04c44e3b6ceb8\x01\x00\x00\x01\x06Window\x01\x00\x01\x0bouterHeight\x01\x01\x04this\x0bouterHeight\x01\x00\x00\x00%__wbg_setouterHeight_18258320ef76faee\x01\x00\x00\x01\x06Window\x01\x00\x02\x0bouterHeight\x01\x02\x04this\x05value\x0fset_outerHeight\x01\x00\x00\x00\'__wbg_devicePixelRatio_599d41a9267fa1ca\x00\x00\x00\x01\x06Window\x01\x00\x01\x10devicePixelRatio\x01\x01\x04this\x10devicePixelRatio\x01\x00\x00\x00\"__wbg_performance_8594a974edffb1dc\x00\x00\x00\x01\x06Window\x01\x00\x01\x0bperformance\x01\x01\x04this\x0bperformance\x01\x00\x00\x00\"__wbg_orientation_6d58717407266f51\x00\x00\x00\x01\x06Window\x01\x00\x01\x0borientation\x01\x01\x04this\x0borientation\x01\x00\x00\x00*__wbg_onorientationchange_d19dfb6264379e50\x00\x00\x00\x01\x06Window\x01\x00\x01\x13onorientationchange\x01\x01\x04this\x13onorientationchange\x01\x00\x00\x00-__wbg_setonorientationchange_0e6d0ff43f3cd665\x00\x00\x00\x01\x06Window\x01\x00\x02\x13onorientationchange\x01\x02\x04this\x05value\x17set_onorientationchange\x01\x00\x00\x00)__wbg_onvrdisplayconnect_8c3dedc68daa2b52\x00\x00\x00\x01\x06Window\x01\x00\x01\x12onvrdisplayconnect\x01\x01\x04this\x12onvrdisplayconnect\x01\x00\x00\x00,__wbg_setonvrdisplayconnect_6bc618d8c7361e9a\x00\x00\x00\x01\x06Window\x01\x00\x02\x12onvrdisplayconnect\x01\x02\x04this\x05value\x16set_onvrdisplayconnect\x01\x00\x00\x00,__wbg_onvrdisplaydisconnect_64af30344cd77421\x00\x00\x00\x01\x06Window\x01\x00\x01\x15onvrdisplaydisconnect\x01\x01\x04this\x15onvrdisplaydisconnect\x01\x00\x00\x00/__wbg_setonvrdisplaydisconnect_260d2beb0ecccba1\x00\x00\x00\x01\x06Window\x01\x00\x02\x15onvrdisplaydisconnect\x01\x02\x04this\x05value\x19set_onvrdisplaydisconnect\x01\x00\x00\x00*__wbg_onvrdisplayactivate_adb3342e2b859ad8\x00\x00\x00\x01\x06Window\x01\x00\x01\x13onvrdisplayactivate\x01\x01\x04this\x13onvrdisplayactivate\x01\x00\x00\x00-__wbg_setonvrdisplayactivate_c33f0e75ae2538de\x00\x00\x00\x01\x06Window\x01\x00\x02\x13onvrdisplayactivate\x01\x02\x04this\x05value\x17set_onvrdisplayactivate\x01\x00\x00\x00,__wbg_onvrdisplaydeactivate_e928d5ceb0e3ce11\x00\x00\x00\x01\x06Window\x01\x00\x01\x15onvrdisplaydeactivate\x01\x01\x04this\x15onvrdisplaydeactivate\x01\x00\x00\x00/__wbg_setonvrdisplaydeactivate_43c58f6ba789a2d6\x00\x00\x00\x01\x06Window\x01\x00\x02\x15onvrdisplaydeactivate\x01\x02\x04this\x05value\x19set_onvrdisplaydeactivate\x01\x00\x00\x00/__wbg_onvrdisplaypresentchange_7eb766ddd34f3c7f\x00\x00\x00\x01\x06Window\x01\x00\x01\x18onvrdisplaypresentchange\x01\x01\x04this\x18onvrdisplaypresentchange\x01\x00\x00\x002__wbg_setonvrdisplaypresentchange_8cee10581372a1db\x00\x00\x00\x01\x06Window\x01\x00\x02\x18onvrdisplaypresentchange\x01\x02\x04this\x05value\x1cset_onvrdisplaypresentchange\x01\x00\x00\x00#__wbg_paintWorklet_6c7b4129bd0fa8fe\x01\x00\x00\x01\x06Window\x01\x00\x01\x0cpaintWorklet\x01\x01\x04this\x0cpaintWorklet\x01\x00\x00\x00\x1d__wbg_crypto_2b7e0a54ef6824f4\x01\x00\x00\x01\x06Window\x01\x00\x01\x06crypto\x01\x01\x04this\x06crypto\x01\x00\x00\x00\x1e__wbg_onabort_e8110be6aa3d5468\x00\x00\x00\x01\x06Window\x01\x00\x01\x07onabort\x01\x01\x04this\x07onabort\x01\x00\x00\x00!__wbg_setonabort_6bb31ae293d3d508\x00\x00\x00\x01\x06Window\x01\x00\x02\x07onabort\x01\x02\x04this\x05value\x0bset_onabort\x01\x00\x00\x00\x1d__wbg_onblur_c5f657653c8824b7\x00\x00\x00\x01\x06Window\x01\x00\x01\x06onblur\x01\x01\x04this\x06onblur\x01\x00\x00\x00 __wbg_setonblur_8f2d83cb32e3a378\x00\x00\x00\x01\x06Window\x01\x00\x02\x06onblur\x01\x02\x04this\x05value\nset_onblur\x01\x00\x00\x00\x1e__wbg_onfocus_b5750fe29d9144ed\x00\x00\x00\x01\x06Window\x01\x00\x01\x07onfocus\x01\x01\x04this\x07onfocus\x01\x00\x00\x00!__wbg_setonfocus_1497d2479cae2d9c\x00\x00\x00\x01\x06Window\x01\x00\x02\x07onfocus\x01\x02\x04this\x05value\x0bset_onfocus\x01\x00\x00\x00!__wbg_onauxclick_2fdc368fb6e87608\x00\x00\x00\x01\x06Window\x01\x00\x01\nonauxclick\x01\x01\x04this\nonauxclick\x01\x00\x00\x00$__wbg_setonauxclick_48b2b63df8538e51\x00\x00\x00\x01\x06Window\x01\x00\x02\nonauxclick\x01\x02\x04this\x05value\x0eset_onauxclick\x01\x00\x00\x00 __wbg_oncanplay_ec03af575c36dc06\x00\x00\x00\x01\x06Window\x01\x00\x01\toncanplay\x01\x01\x04this\toncanplay\x01\x00\x00\x00#__wbg_setoncanplay_331488f23aaad516\x00\x00\x00\x01\x06Window\x01\x00\x02\toncanplay\x01\x02\x04this\x05value\rset_oncanplay\x01\x00\x00\x00\'__wbg_oncanplaythrough_2e5d2e9a74eeb9a7\x00\x00\x00\x01\x06Window\x01\x00\x01\x10oncanplaythrough\x01\x01\x04this\x10oncanplaythrough\x01\x00\x00\x00*__wbg_setoncanplaythrough_ab03cc0c0805bcad\x00\x00\x00\x01\x06Window\x01\x00\x02\x10oncanplaythrough\x01\x02\x04this\x05value\x14set_oncanplaythrough\x01\x00\x00\x00\x1f__wbg_onchange_47f2595b30e7362d\x00\x00\x00\x01\x06Window\x01\x00\x01\x08onchange\x01\x01\x04this\x08onchange\x01\x00\x00\x00\"__wbg_setonchange_42128b45a5845f33\x00\x00\x00\x01\x06Window\x01\x00\x02\x08onchange\x01\x02\x04this\x05value\x0cset_onchange\x01\x00\x00\x00\x1e__wbg_onclick_96dc4f80f585fc97\x00\x00\x00\x01\x06Window\x01\x00\x01\x07onclick\x01\x01\x04this\x07onclick\x01\x00\x00\x00!__wbg_setonclick_8ea2687903454363\x00\x00\x00\x01\x06Window\x01\x00\x02\x07onclick\x01\x02\x04this\x05value\x0bset_onclick\x01\x00\x00\x00\x1e__wbg_onclose_327d687210e80901\x00\x00\x00\x01\x06Window\x01\x00\x01\x07onclose\x01\x01\x04this\x07onclose\x01\x00\x00\x00!__wbg_setonclose_129049fcfaf6cb35\x00\x00\x00\x01\x06Window\x01\x00\x02\x07onclose\x01\x02\x04this\x05value\x0bset_onclose\x01\x00\x00\x00$__wbg_oncontextmenu_30ba5ffc66e5a2b1\x00\x00\x00\x01\x06Window\x01\x00\x01\roncontextmenu\x01\x01\x04this\roncontextmenu\x01\x00\x00\x00\'__wbg_setoncontextmenu_4fe13aecc2f69c79\x00\x00\x00\x01\x06Window\x01\x00\x02\roncontextmenu\x01\x02\x04this\x05value\x11set_oncontextmenu\x01\x00\x00\x00!__wbg_ondblclick_32b091daad5d87ff\x00\x00\x00\x01\x06Window\x01\x00\x01\nondblclick\x01\x01\x04this\nondblclick\x01\x00\x00\x00$__wbg_setondblclick_4576142251949d64\x00\x00\x00\x01\x06Window\x01\x00\x02\nondblclick\x01\x02\x04this\x05value\x0eset_ondblclick\x01\x00\x00\x00\x1d__wbg_ondrag_838e2cc1280b4820\x00\x00\x00\x01\x06Window\x01\x00\x01\x06ondrag\x01\x01\x04this\x06ondrag\x01\x00\x00\x00 __wbg_setondrag_0d2e4900cba118ff\x00\x00\x00\x01\x06Window\x01\x00\x02\x06ondrag\x01\x02\x04this\x05value\nset_ondrag\x01\x00\x00\x00 __wbg_ondragend_ef2ab8f8890c5d0d\x00\x00\x00\x01\x06Window\x01\x00\x01\tondragend\x01\x01\x04this\tondragend\x01\x00\x00\x00#__wbg_setondragend_ba081a7eeb4b3575\x00\x00\x00\x01\x06Window\x01\x00\x02\tondragend\x01\x02\x04this\x05value\rset_ondragend\x01\x00\x00\x00\"__wbg_ondragenter_1d2cf0b03ca84540\x00\x00\x00\x01\x06Window\x01\x00\x01\x0bondragenter\x01\x01\x04this\x0bondragenter\x01\x00\x00\x00%__wbg_setondragenter_aa7260d17821fb12\x00\x00\x00\x01\x06Window\x01\x00\x02\x0bondragenter\x01\x02\x04this\x05value\x0fset_ondragenter\x01\x00\x00\x00!__wbg_ondragexit_24e2570820d4f16a\x00\x00\x00\x01\x06Window\x01\x00\x01\nondragexit\x01\x01\x04this\nondragexit\x01\x00\x00\x00$__wbg_setondragexit_08ca08b43e0a3f78\x00\x00\x00\x01\x06Window\x01\x00\x02\nondragexit\x01\x02\x04this\x05value\x0eset_ondragexit\x01\x00\x00\x00\"__wbg_ondragleave_cb59aac406f23d22\x00\x00\x00\x01\x06Window\x01\x00\x01\x0bondragleave\x01\x01\x04this\x0bondragleave\x01\x00\x00\x00%__wbg_setondragleave_126d56bb70ee805d\x00\x00\x00\x01\x06Window\x01\x00\x02\x0bondragleave\x01\x02\x04this\x05value\x0fset_ondragleave\x01\x00\x00\x00!__wbg_ondragover_78e11020ed201e41\x00\x00\x00\x01\x06Window\x01\x00\x01\nondragover\x01\x01\x04this\nondragover\x01\x00\x00\x00$__wbg_setondragover_399b61e2607788dd\x00\x00\x00\x01\x06Window\x01\x00\x02\nondragover\x01\x02\x04this\x05value\x0eset_ondragover\x01\x00\x00\x00\"__wbg_ondragstart_58fe79728df375fa\x00\x00\x00\x01\x06Window\x01\x00\x01\x0bondragstart\x01\x01\x04this\x0bondragstart\x01\x00\x00\x00%__wbg_setondragstart_895a0a08265ebb41\x00\x00\x00\x01\x06Window\x01\x00\x02\x0bondragstart\x01\x02\x04this\x05value\x0fset_ondragstart\x01\x00\x00\x00\x1d__wbg_ondrop_b93f445b4e0949c3\x00\x00\x00\x01\x06Window\x01\x00\x01\x06ondrop\x01\x01\x04this\x06ondrop\x01\x00\x00\x00 __wbg_setondrop_824a96354bcab8a1\x00\x00\x00\x01\x06Window\x01\x00\x02\x06ondrop\x01\x02\x04this\x05value\nset_ondrop\x01\x00\x00\x00\'__wbg_ondurationchange_68609f10bbea0d0f\x00\x00\x00\x01\x06Window\x01\x00\x01\x10ondurationchange\x01\x01\x04this\x10ondurationchange\x01\x00\x00\x00*__wbg_setondurationchange_381e9851f98a8f03\x00\x00\x00\x01\x06Window\x01\x00\x02\x10ondurationchange\x01\x02\x04this\x05value\x14set_ondurationchange\x01\x00\x00\x00 __wbg_onemptied_ccdbfa1409fadc99\x00\x00\x00\x01\x06Window\x01\x00\x01\tonemptied\x01\x01\x04this\tonemptied\x01\x00\x00\x00#__wbg_setonemptied_c5b495d00cb135f9\x00\x00\x00\x01\x06Window\x01\x00\x02\tonemptied\x01\x02\x04this\x05value\rset_onemptied\x01\x00\x00\x00\x1e__wbg_onended_9f9259ef4059cc30\x00\x00\x00\x01\x06Window\x01\x00\x01\x07onended\x01\x01\x04this\x07onended\x01\x00\x00\x00!__wbg_setonended_4eba87781181e843\x00\x00\x00\x01\x06Window\x01\x00\x02\x07onended\x01\x02\x04this\x05value\x0bset_onended\x01\x00\x00\x00\x1e__wbg_oninput_de4f3257f9c5b759\x00\x00\x00\x01\x06Window\x01\x00\x01\x07oninput\x01\x01\x04this\x07oninput\x01\x00\x00\x00!__wbg_setoninput_571527eb82035f6d\x00\x00\x00\x01\x06Window\x01\x00\x02\x07oninput\x01\x02\x04this\x05value\x0bset_oninput\x01\x00\x00\x00 __wbg_oninvalid_753af226874ebef7\x00\x00\x00\x01\x06Window\x01\x00\x01\toninvalid\x01\x01\x04this\toninvalid\x01\x00\x00\x00#__wbg_setoninvalid_18048bb4fd460afc\x00\x00\x00\x01\x06Window\x01\x00\x02\toninvalid\x01\x02\x04this\x05value\rset_oninvalid\x01\x00\x00\x00 __wbg_onkeydown_cbf63679f9c28d4b\x00\x00\x00\x01\x06Window\x01\x00\x01\tonkeydown\x01\x01\x04this\tonkeydown\x01\x00\x00\x00#__wbg_setonkeydown_2a5e7c8e08c7dc1f\x00\x00\x00\x01\x06Window\x01\x00\x02\tonkeydown\x01\x02\x04this\x05value\rset_onkeydown\x01\x00\x00\x00!__wbg_onkeypress_071c64562ac3797a\x00\x00\x00\x01\x06Window\x01\x00\x01\nonkeypress\x01\x01\x04this\nonkeypress\x01\x00\x00\x00$__wbg_setonkeypress_12be0d6ace3af7d0\x00\x00\x00\x01\x06Window\x01\x00\x02\nonkeypress\x01\x02\x04this\x05value\x0eset_onkeypress\x01\x00\x00\x00\x1e__wbg_onkeyup_d75331c83d0efc24\x00\x00\x00\x01\x06Window\x01\x00\x01\x07onkeyup\x01\x01\x04this\x07onkeyup\x01\x00\x00\x00!__wbg_setonkeyup_8d52e09060ee4883\x00\x00\x00\x01\x06Window\x01\x00\x02\x07onkeyup\x01\x02\x04this\x05value\x0bset_onkeyup\x01\x00\x00\x00\x1d__wbg_onload_232c63dae462462a\x00\x00\x00\x01\x06Window\x01\x00\x01\x06onload\x01\x01\x04this\x06onload\x01\x00\x00\x00 __wbg_setonload_faca5fa463e29791\x00\x00\x00\x01\x06Window\x01\x00\x02\x06onload\x01\x02\x04this\x05value\nset_onload\x01\x00\x00\x00#__wbg_onloadeddata_e08ee6845a6483c9\x00\x00\x00\x01\x06Window\x01\x00\x01\x0conloadeddata\x01\x01\x04this\x0conloadeddata\x01\x00\x00\x00&__wbg_setonloadeddata_92910c7c8cfd78f4\x00\x00\x00\x01\x06Window\x01\x00\x02\x0conloadeddata\x01\x02\x04this\x05value\x10set_onloadeddata\x01\x00\x00\x00\'__wbg_onloadedmetadata_165e2eff11f6f382\x00\x00\x00\x01\x06Window\x01\x00\x01\x10onloadedmetadata\x01\x01\x04this\x10onloadedmetadata\x01\x00\x00\x00*__wbg_setonloadedmetadata_1fc248870c694ef7\x00\x00\x00\x01\x06Window\x01\x00\x02\x10onloadedmetadata\x01\x02\x04this\x05value\x14set_onloadedmetadata\x01\x00\x00\x00 __wbg_onloadend_9f51dc07627ded0e\x00\x00\x00\x01\x06Window\x01\x00\x01\tonloadend\x01\x01\x04this\tonloadend\x01\x00\x00\x00#__wbg_setonloadend_85a2574c8f018cf4\x00\x00\x00\x01\x06Window\x01\x00\x02\tonloadend\x01\x02\x04this\x05value\rset_onloadend\x01\x00\x00\x00\"__wbg_onloadstart_d084462619478708\x00\x00\x00\x01\x06Window\x01\x00\x01\x0bonloadstart\x01\x01\x04this\x0bonloadstart\x01\x00\x00\x00%__wbg_setonloadstart_37f7ecea217a6313\x00\x00\x00\x01\x06Window\x01\x00\x02\x0bonloadstart\x01\x02\x04this\x05value\x0fset_onloadstart\x01\x00\x00\x00\"__wbg_onmousedown_c373e66791027e96\x00\x00\x00\x01\x06Window\x01\x00\x01\x0bonmousedown\x01\x01\x04this\x0bonmousedown\x01\x00\x00\x00%__wbg_setonmousedown_5a6120b48ccd35e2\x00\x00\x00\x01\x06Window\x01\x00\x02\x0bonmousedown\x01\x02\x04this\x05value\x0fset_onmousedown\x01\x00\x00\x00#__wbg_onmouseenter_1a5f3b6167db430f\x00\x00\x00\x01\x06Window\x01\x00\x01\x0conmouseenter\x01\x01\x04this\x0conmouseenter\x01\x00\x00\x00&__wbg_setonmouseenter_1a1035aa78bebce5\x00\x00\x00\x01\x06Window\x01\x00\x02\x0conmouseenter\x01\x02\x04this\x05value\x10set_onmouseenter\x01\x00\x00\x00#__wbg_onmouseleave_e3420a9cfb9920c0\x00\x00\x00\x01\x06Window\x01\x00\x01\x0conmouseleave\x01\x01\x04this\x0conmouseleave\x01\x00\x00\x00&__wbg_setonmouseleave_71e2a0854f1e5d22\x00\x00\x00\x01\x06Window\x01\x00\x02\x0conmouseleave\x01\x02\x04this\x05value\x10set_onmouseleave\x01\x00\x00\x00\"__wbg_onmousemove_b865ba6fe456f981\x00\x00\x00\x01\x06Window\x01\x00\x01\x0bonmousemove\x01\x01\x04this\x0bonmousemove\x01\x00\x00\x00%__wbg_setonmousemove_e6b2916546f6d553\x00\x00\x00\x01\x06Window\x01\x00\x02\x0bonmousemove\x01\x02\x04this\x05value\x0fset_onmousemove\x01\x00\x00\x00!__wbg_onmouseout_fc2784e4f66161ff\x00\x00\x00\x01\x06Window\x01\x00\x01\nonmouseout\x01\x01\x04this\nonmouseout\x01\x00\x00\x00$__wbg_setonmouseout_d2558bf94aa0c996\x00\x00\x00\x01\x06Window\x01\x00\x02\nonmouseout\x01\x02\x04this\x05value\x0eset_onmouseout\x01\x00\x00\x00\"__wbg_onmouseover_0f47ea55d0473e10\x00\x00\x00\x01\x06Window\x01\x00\x01\x0bonmouseover\x01\x01\x04this\x0bonmouseover\x01\x00\x00\x00%__wbg_setonmouseover_33ae573d64b4fc74\x00\x00\x00\x01\x06Window\x01\x00\x02\x0bonmouseover\x01\x02\x04this\x05value\x0fset_onmouseover\x01\x00\x00\x00 __wbg_onmouseup_d4732f23f771e43a\x00\x00\x00\x01\x06Window\x01\x00\x01\tonmouseup\x01\x01\x04this\tonmouseup\x01\x00\x00\x00#__wbg_setonmouseup_7286d0bbdbae67bb\x00\x00\x00\x01\x06Window\x01\x00\x02\tonmouseup\x01\x02\x04this\x05value\rset_onmouseup\x01\x00\x00\x00\x1e__wbg_onwheel_3c2f95373c74819d\x00\x00\x00\x01\x06Window\x01\x00\x01\x07onwheel\x01\x01\x04this\x07onwheel\x01\x00\x00\x00!__wbg_setonwheel_15c05fdca04629b7\x00\x00\x00\x01\x06Window\x01\x00\x02\x07onwheel\x01\x02\x04this\x05value\x0bset_onwheel\x01\x00\x00\x00\x1e__wbg_onpause_884f1f7e62215752\x00\x00\x00\x01\x06Window\x01\x00\x01\x07onpause\x01\x01\x04this\x07onpause\x01\x00\x00\x00!__wbg_setonpause_c58af9e160c55c2a\x00\x00\x00\x01\x06Window\x01\x00\x02\x07onpause\x01\x02\x04this\x05value\x0bset_onpause\x01\x00\x00\x00\x1d__wbg_onplay_178ba860344ac905\x00\x00\x00\x01\x06Window\x01\x00\x01\x06onplay\x01\x01\x04this\x06onplay\x01\x00\x00\x00 __wbg_setonplay_58fe3f9118f29c57\x00\x00\x00\x01\x06Window\x01\x00\x02\x06onplay\x01\x02\x04this\x05value\nset_onplay\x01\x00\x00\x00 __wbg_onplaying_0ed43ec889fb1c90\x00\x00\x00\x01\x06Window\x01\x00\x01\tonplaying\x01\x01\x04this\tonplaying\x01\x00\x00\x00#__wbg_setonplaying_2d4831215445206c\x00\x00\x00\x01\x06Window\x01\x00\x02\tonplaying\x01\x02\x04this\x05value\rset_onplaying\x01\x00\x00\x00!__wbg_onprogress_9964951b09df26f5\x00\x00\x00\x01\x06Window\x01\x00\x01\nonprogress\x01\x01\x04this\nonprogress\x01\x00\x00\x00$__wbg_setonprogress_1993f40d98c2a3ee\x00\x00\x00\x01\x06Window\x01\x00\x02\nonprogress\x01\x02\x04this\x05value\x0eset_onprogress\x01\x00\x00\x00#__wbg_onratechange_086533d039e0f20c\x00\x00\x00\x01\x06Window\x01\x00\x01\x0conratechange\x01\x01\x04this\x0conratechange\x01\x00\x00\x00&__wbg_setonratechange_f52c91666b6c8156\x00\x00\x00\x01\x06Window\x01\x00\x02\x0conratechange\x01\x02\x04this\x05value\x10set_onratechange\x01\x00\x00\x00\x1e__wbg_onreset_06d942e9742d79e8\x00\x00\x00\x01\x06Window\x01\x00\x01\x07onreset\x01\x01\x04this\x07onreset\x01\x00\x00\x00!__wbg_setonreset_2fb5733290baa580\x00\x00\x00\x01\x06Window\x01\x00\x02\x07onreset\x01\x02\x04this\x05value\x0bset_onreset\x01\x00\x00\x00\x1f__wbg_onresize_1ae65134773e3601\x00\x00\x00\x01\x06Window\x01\x00\x01\x08onresize\x01\x01\x04this\x08onresize\x01\x00\x00\x00\"__wbg_setonresize_3889a82ad4ba3095\x00\x00\x00\x01\x06Window\x01\x00\x02\x08onresize\x01\x02\x04this\x05value\x0cset_onresize\x01\x00\x00\x00\x1f__wbg_onscroll_b7ce74253f61e8d5\x00\x00\x00\x01\x06Window\x01\x00\x01\x08onscroll\x01\x01\x04this\x08onscroll\x01\x00\x00\x00\"__wbg_setonscroll_3e8cd5061602ccbd\x00\x00\x00\x01\x06Window\x01\x00\x02\x08onscroll\x01\x02\x04this\x05value\x0cset_onscroll\x01\x00\x00\x00\x1f__wbg_onseeked_5952118f6c42bf2a\x00\x00\x00\x01\x06Window\x01\x00\x01\x08onseeked\x01\x01\x04this\x08onseeked\x01\x00\x00\x00\"__wbg_setonseeked_2b143410c676ac67\x00\x00\x00\x01\x06Window\x01\x00\x02\x08onseeked\x01\x02\x04this\x05value\x0cset_onseeked\x01\x00\x00\x00 __wbg_onseeking_1f71ec11fbffdaa5\x00\x00\x00\x01\x06Window\x01\x00\x01\tonseeking\x01\x01\x04this\tonseeking\x01\x00\x00\x00#__wbg_setonseeking_ac099567e770f012\x00\x00\x00\x01\x06Window\x01\x00\x02\tonseeking\x01\x02\x04this\x05value\rset_onseeking\x01\x00\x00\x00\x1f__wbg_onselect_ac780234a74a79c5\x00\x00\x00\x01\x06Window\x01\x00\x01\x08onselect\x01\x01\x04this\x08onselect\x01\x00\x00\x00\"__wbg_setonselect_15187fafb2aaeb42\x00\x00\x00\x01\x06Window\x01\x00\x02\x08onselect\x01\x02\x04this\x05value\x0cset_onselect\x01\x00\x00\x00\x1d__wbg_onshow_c4affc8b14f5da1d\x00\x00\x00\x01\x06Window\x01\x00\x01\x06onshow\x01\x01\x04this\x06onshow\x01\x00\x00\x00 __wbg_setonshow_2c1c6f7ff38b4eb3\x00\x00\x00\x01\x06Window\x01\x00\x02\x06onshow\x01\x02\x04this\x05value\nset_onshow\x01\x00\x00\x00 __wbg_onstalled_0bb6df6c62646e70\x00\x00\x00\x01\x06Window\x01\x00\x01\tonstalled\x01\x01\x04this\tonstalled\x01\x00\x00\x00#__wbg_setonstalled_867ee7f4eb91fa0a\x00\x00\x00\x01\x06Window\x01\x00\x02\tonstalled\x01\x02\x04this\x05value\rset_onstalled\x01\x00\x00\x00\x1f__wbg_onsubmit_85af6cdd6b0fd5e4\x00\x00\x00\x01\x06Window\x01\x00\x01\x08onsubmit\x01\x01\x04this\x08onsubmit\x01\x00\x00\x00\"__wbg_setonsubmit_166988b9002f5ffd\x00\x00\x00\x01\x06Window\x01\x00\x02\x08onsubmit\x01\x02\x04this\x05value\x0cset_onsubmit\x01\x00\x00\x00 __wbg_onsuspend_36e6ce45499906e0\x00\x00\x00\x01\x06Window\x01\x00\x01\tonsuspend\x01\x01\x04this\tonsuspend\x01\x00\x00\x00#__wbg_setonsuspend_0e99517fb5a2dd9e\x00\x00\x00\x01\x06Window\x01\x00\x02\tonsuspend\x01\x02\x04this\x05value\rset_onsuspend\x01\x00\x00\x00#__wbg_ontimeupdate_5652594889d3f3a4\x00\x00\x00\x01\x06Window\x01\x00\x01\x0contimeupdate\x01\x01\x04this\x0contimeupdate\x01\x00\x00\x00&__wbg_setontimeupdate_64d11d101d9e3424\x00\x00\x00\x01\x06Window\x01\x00\x02\x0contimeupdate\x01\x02\x04this\x05value\x10set_ontimeupdate\x01\x00\x00\x00%__wbg_onvolumechange_86bd03af0ff62951\x00\x00\x00\x01\x06Window\x01\x00\x01\x0eonvolumechange\x01\x01\x04this\x0eonvolumechange\x01\x00\x00\x00(__wbg_setonvolumechange_fe8e3419c0bedc90\x00\x00\x00\x01\x06Window\x01\x00\x02\x0eonvolumechange\x01\x02\x04this\x05value\x12set_onvolumechange\x01\x00\x00\x00 __wbg_onwaiting_7d50ec67111788dc\x00\x00\x00\x01\x06Window\x01\x00\x01\tonwaiting\x01\x01\x04this\tonwaiting\x01\x00\x00\x00#__wbg_setonwaiting_7e9df4782e20d4f9\x00\x00\x00\x01\x06Window\x01\x00\x02\tonwaiting\x01\x02\x04this\x05value\rset_onwaiting\x01\x00\x00\x00$__wbg_onselectstart_f2737418e8600c5e\x00\x00\x00\x01\x06Window\x01\x00\x01\ronselectstart\x01\x01\x04this\ronselectstart\x01\x00\x00\x00\'__wbg_setonselectstart_14be45ce2be8dfa2\x00\x00\x00\x01\x06Window\x01\x00\x02\ronselectstart\x01\x02\x04this\x05value\x11set_onselectstart\x01\x00\x00\x00\x1f__wbg_ontoggle_fd2d826c826d7078\x00\x00\x00\x01\x06Window\x01\x00\x01\x08ontoggle\x01\x01\x04this\x08ontoggle\x01\x00\x00\x00\"__wbg_setontoggle_549d5b78ef790be5\x00\x00\x00\x01\x06Window\x01\x00\x02\x08ontoggle\x01\x02\x04this\x05value\x0cset_ontoggle\x01\x00\x00\x00&__wbg_onpointercancel_8211b7fd2a24d5e6\x00\x00\x00\x01\x06Window\x01\x00\x01\x0fonpointercancel\x01\x01\x04this\x0fonpointercancel\x01\x00\x00\x00)__wbg_setonpointercancel_ae158793a8b84927\x00\x00\x00\x01\x06Window\x01\x00\x02\x0fonpointercancel\x01\x02\x04this\x05value\x13set_onpointercancel\x01\x00\x00\x00$__wbg_onpointerdown_34e6107ba0103ecd\x00\x00\x00\x01\x06Window\x01\x00\x01\ronpointerdown\x01\x01\x04this\ronpointerdown\x01\x00\x00\x00\'__wbg_setonpointerdown_3300c3714417978d\x00\x00\x00\x01\x06Window\x01\x00\x02\ronpointerdown\x01\x02\x04this\x05value\x11set_onpointerdown\x01\x00\x00\x00\"__wbg_onpointerup_0d2b9176699c1aee\x00\x00\x00\x01\x06Window\x01\x00\x01\x0bonpointerup\x01\x01\x04this\x0bonpointerup\x01\x00\x00\x00%__wbg_setonpointerup_ec244c8f4e9a919a\x00\x00\x00\x01\x06Window\x01\x00\x02\x0bonpointerup\x01\x02\x04this\x05value\x0fset_onpointerup\x01\x00\x00\x00$__wbg_onpointermove_193dff1bedd3d278\x00\x00\x00\x01\x06Window\x01\x00\x01\ronpointermove\x01\x01\x04this\ronpointermove\x01\x00\x00\x00\'__wbg_setonpointermove_9e8471aa3aa82ee8\x00\x00\x00\x01\x06Window\x01\x00\x02\ronpointermove\x01\x02\x04this\x05value\x11set_onpointermove\x01\x00\x00\x00#__wbg_onpointerout_6e6e2f48b7272e60\x00\x00\x00\x01\x06Window\x01\x00\x01\x0conpointerout\x01\x01\x04this\x0conpointerout\x01\x00\x00\x00&__wbg_setonpointerout_18f9350ff0a0a456\x00\x00\x00\x01\x06Window\x01\x00\x02\x0conpointerout\x01\x02\x04this\x05value\x10set_onpointerout\x01\x00\x00\x00$__wbg_onpointerover_0f215b8b60aa2185\x00\x00\x00\x01\x06Window\x01\x00\x01\ronpointerover\x01\x01\x04this\ronpointerover\x01\x00\x00\x00\'__wbg_setonpointerover_8a234e4f9a4fdaaf\x00\x00\x00\x01\x06Window\x01\x00\x02\ronpointerover\x01\x02\x04this\x05value\x11set_onpointerover\x01\x00\x00\x00%__wbg_onpointerenter_7e9f9b937ae1f8b9\x00\x00\x00\x01\x06Window\x01\x00\x01\x0eonpointerenter\x01\x01\x04this\x0eonpointerenter\x01\x00\x00\x00(__wbg_setonpointerenter_59a4f4256320d26a\x00\x00\x00\x01\x06Window\x01\x00\x02\x0eonpointerenter\x01\x02\x04this\x05value\x12set_onpointerenter\x01\x00\x00\x00%__wbg_onpointerleave_adcca80a2546860d\x00\x00\x00\x01\x06Window\x01\x00\x01\x0eonpointerleave\x01\x01\x04this\x0eonpointerleave\x01\x00\x00\x00(__wbg_setonpointerleave_69f5c14e05d790d8\x00\x00\x00\x01\x06Window\x01\x00\x02\x0eonpointerleave\x01\x02\x04this\x05value\x12set_onpointerleave\x01\x00\x00\x00*__wbg_ongotpointercapture_e90aee8636f22fb3\x00\x00\x00\x01\x06Window\x01\x00\x01\x13ongotpointercapture\x01\x01\x04this\x13ongotpointercapture\x01\x00\x00\x00-__wbg_setongotpointercapture_c855a02f63112682\x00\x00\x00\x01\x06Window\x01\x00\x02\x13ongotpointercapture\x01\x02\x04this\x05value\x17set_ongotpointercapture\x01\x00\x00\x00+__wbg_onlostpointercapture_4a9304a204a7ceaf\x00\x00\x00\x01\x06Window\x01\x00\x01\x14onlostpointercapture\x01\x01\x04this\x14onlostpointercapture\x01\x00\x00\x00.__wbg_setonlostpointercapture_3f8db6461f736299\x00\x00\x00\x01\x06Window\x01\x00\x02\x14onlostpointercapture\x01\x02\x04this\x05value\x18set_onlostpointercapture\x01\x00\x00\x00(__wbg_onanimationcancel_1b56a1a946cfa0c6\x00\x00\x00\x01\x06Window\x01\x00\x01\x11onanimationcancel\x01\x01\x04this\x11onanimationcancel\x01\x00\x00\x00+__wbg_setonanimationcancel_2364ac63ff4d33a7\x00\x00\x00\x01\x06Window\x01\x00\x02\x11onanimationcancel\x01\x02\x04this\x05value\x15set_onanimationcancel\x01\x00\x00\x00%__wbg_onanimationend_f357fdac45250f40\x00\x00\x00\x01\x06Window\x01\x00\x01\x0eonanimationend\x01\x01\x04this\x0eonanimationend\x01\x00\x00\x00(__wbg_setonanimationend_3bc9bc59264c0da9\x00\x00\x00\x01\x06Window\x01\x00\x02\x0eonanimationend\x01\x02\x04this\x05value\x12set_onanimationend\x01\x00\x00\x00+__wbg_onanimationiteration_e477ab3d2c9382f4\x00\x00\x00\x01\x06Window\x01\x00\x01\x14onanimationiteration\x01\x01\x04this\x14onanimationiteration\x01\x00\x00\x00.__wbg_setonanimationiteration_d1f9454fa659777d\x00\x00\x00\x01\x06Window\x01\x00\x02\x14onanimationiteration\x01\x02\x04this\x05value\x18set_onanimationiteration\x01\x00\x00\x00\'__wbg_onanimationstart_e7407f4860d46e50\x00\x00\x00\x01\x06Window\x01\x00\x01\x10onanimationstart\x01\x01\x04this\x10onanimationstart\x01\x00\x00\x00*__wbg_setonanimationstart_dd4f1c22a8190b10\x00\x00\x00\x01\x06Window\x01\x00\x02\x10onanimationstart\x01\x02\x04this\x05value\x14set_onanimationstart\x01\x00\x00\x00)__wbg_ontransitioncancel_ec6f7f21baca429c\x00\x00\x00\x01\x06Window\x01\x00\x01\x12ontransitioncancel\x01\x01\x04this\x12ontransitioncancel\x01\x00\x00\x00,__wbg_setontransitioncancel_7f9427d03bd9d168\x00\x00\x00\x01\x06Window\x01\x00\x02\x12ontransitioncancel\x01\x02\x04this\x05value\x16set_ontransitioncancel\x01\x00\x00\x00&__wbg_ontransitionend_e9cb426bbc66ba35\x00\x00\x00\x01\x06Window\x01\x00\x01\x0fontransitionend\x01\x01\x04this\x0fontransitionend\x01\x00\x00\x00)__wbg_setontransitionend_732b39c1b5325bec\x00\x00\x00\x01\x06Window\x01\x00\x02\x0fontransitionend\x01\x02\x04this\x05value\x13set_ontransitionend\x01\x00\x00\x00&__wbg_ontransitionrun_a9e57e2a2256166b\x00\x00\x00\x01\x06Window\x01\x00\x01\x0fontransitionrun\x01\x01\x04this\x0fontransitionrun\x01\x00\x00\x00)__wbg_setontransitionrun_6994c050a57655ee\x00\x00\x00\x01\x06Window\x01\x00\x02\x0fontransitionrun\x01\x02\x04this\x05value\x13set_ontransitionrun\x01\x00\x00\x00(__wbg_ontransitionstart_5592ff010aa8b5ac\x00\x00\x00\x01\x06Window\x01\x00\x01\x11ontransitionstart\x01\x01\x04this\x11ontransitionstart\x01\x00\x00\x00+__wbg_setontransitionstart_4dbe1b25fdcdc636\x00\x00\x00\x01\x06Window\x01\x00\x02\x11ontransitionstart\x01\x02\x04this\x05value\x15set_ontransitionstart\x01\x00\x00\x00+__wbg_onwebkitanimationend_9bbd719d871b28a5\x00\x00\x00\x01\x06Window\x01\x00\x01\x14onwebkitanimationend\x01\x01\x04this\x14onwebkitanimationend\x01\x00\x00\x00.__wbg_setonwebkitanimationend_ef5b1217d78900c1\x00\x00\x00\x01\x06Window\x01\x00\x02\x14onwebkitanimationend\x01\x02\x04this\x05value\x18set_onwebkitanimationend\x01\x00\x00\x001__wbg_onwebkitanimationiteration_8f15d8336b69faab\x00\x00\x00\x01\x06Window\x01\x00\x01\x1aonwebkitanimationiteration\x01\x01\x04this\x1aonwebkitanimationiteration\x01\x00\x00\x004__wbg_setonwebkitanimationiteration_dcffed5fb60c2731\x00\x00\x00\x01\x06Window\x01\x00\x02\x1aonwebkitanimationiteration\x01\x02\x04this\x05value\x1eset_onwebkitanimationiteration\x01\x00\x00\x00-__wbg_onwebkitanimationstart_146d1038b1bdc77b\x00\x00\x00\x01\x06Window\x01\x00\x01\x16onwebkitanimationstart\x01\x01\x04this\x16onwebkitanimationstart\x01\x00\x00\x000__wbg_setonwebkitanimationstart_412a6217023624eb\x00\x00\x00\x01\x06Window\x01\x00\x02\x16onwebkitanimationstart\x01\x02\x04this\x05value\x1aset_onwebkitanimationstart\x01\x00\x00\x00,__wbg_onwebkittransitionend_a29522e3ba3903ca\x00\x00\x00\x01\x06Window\x01\x00\x01\x15onwebkittransitionend\x01\x01\x04this\x15onwebkittransitionend\x01\x00\x00\x00/__wbg_setonwebkittransitionend_405064debbbe8e4b\x00\x00\x00\x01\x06Window\x01\x00\x02\x15onwebkittransitionend\x01\x02\x04this\x05value\x19set_onwebkittransitionend\x01\x00\x00\x00\x1a__wbg_u2f_54ac8b371a5163a1\x01\x00\x00\x01\x06Window\x01\x00\x01\x03u2f\x01\x01\x04this\x03u2f\x01\x00\x00\x00\x1e__wbg_onerror_3e645c862fd06b49\x00\x00\x00\x01\x06Window\x01\x00\x01\x07onerror\x01\x01\x04this\x07onerror\x01\x00\x00\x00!__wbg_setonerror_e42d7c1201e4cf00\x00\x00\x00\x01\x06Window\x01\x00\x02\x07onerror\x01\x02\x04this\x05value\x0bset_onerror\x01\x00\x00\x00&__wbg_speechSynthesis_66c54f54e611b170\x01\x00\x00\x01\x06Window\x01\x00\x01\x0fspeechSynthesis\x01\x01\x04this\x0fspeechSynthesis\x01\x00\x00\x00#__wbg_ontouchstart_67af0e0b213ac823\x00\x00\x00\x01\x06Window\x01\x00\x01\x0contouchstart\x01\x01\x04this\x0contouchstart\x01\x00\x00\x00&__wbg_setontouchstart_2c7ffe33cd16d883\x00\x00\x00\x01\x06Window\x01\x00\x02\x0contouchstart\x01\x02\x04this\x05value\x10set_ontouchstart\x01\x00\x00\x00!__wbg_ontouchend_5125a1c1b2dca7f7\x00\x00\x00\x01\x06Window\x01\x00\x01\nontouchend\x01\x01\x04this\nontouchend\x01\x00\x00\x00$__wbg_setontouchend_fbbd78d2a0d9387b\x00\x00\x00\x01\x06Window\x01\x00\x02\nontouchend\x01\x02\x04this\x05value\x0eset_ontouchend\x01\x00\x00\x00\"__wbg_ontouchmove_dcb194ccb0b92b71\x00\x00\x00\x01\x06Window\x01\x00\x01\x0bontouchmove\x01\x01\x04this\x0bontouchmove\x01\x00\x00\x00%__wbg_setontouchmove_0347d8e0a938f286\x00\x00\x00\x01\x06Window\x01\x00\x02\x0bontouchmove\x01\x02\x04this\x05value\x0fset_ontouchmove\x01\x00\x00\x00$__wbg_ontouchcancel_076dbe719d442331\x00\x00\x00\x01\x06Window\x01\x00\x01\rontouchcancel\x01\x01\x04this\rontouchcancel\x01\x00\x00\x00\'__wbg_setontouchcancel_59be4497962f06bb\x00\x00\x00\x01\x06Window\x01\x00\x02\rontouchcancel\x01\x02\x04this\x05value\x11set_ontouchcancel\x01\x00\x00\x00#__wbg_onafterprint_dad16a3fd5aa1f00\x00\x00\x00\x01\x06Window\x01\x00\x01\x0conafterprint\x01\x01\x04this\x0conafterprint\x01\x00\x00\x00&__wbg_setonafterprint_cd7ae90d35c13a63\x00\x00\x00\x01\x06Window\x01\x00\x02\x0conafterprint\x01\x02\x04this\x05value\x10set_onafterprint\x01\x00\x00\x00$__wbg_onbeforeprint_8f1c1e33def628c7\x00\x00\x00\x01\x06Window\x01\x00\x01\ronbeforeprint\x01\x01\x04this\ronbeforeprint\x01\x00\x00\x00\'__wbg_setonbeforeprint_ac0b79e7951f386b\x00\x00\x00\x01\x06Window\x01\x00\x02\ronbeforeprint\x01\x02\x04this\x05value\x11set_onbeforeprint\x01\x00\x00\x00%__wbg_onbeforeunload_f094f9443983b8ec\x00\x00\x00\x01\x06Window\x01\x00\x01\x0eonbeforeunload\x01\x01\x04this\x0eonbeforeunload\x01\x00\x00\x00(__wbg_setonbeforeunload_99850b1db8427a03\x00\x00\x00\x01\x06Window\x01\x00\x02\x0eonbeforeunload\x01\x02\x04this\x05value\x12set_onbeforeunload\x01\x00\x00\x00#__wbg_onhashchange_6d504e38d4c0e10d\x00\x00\x00\x01\x06Window\x01\x00\x01\x0conhashchange\x01\x01\x04this\x0conhashchange\x01\x00\x00\x00&__wbg_setonhashchange_a47321cc804ae5cb\x00\x00\x00\x01\x06Window\x01\x00\x02\x0conhashchange\x01\x02\x04this\x05value\x10set_onhashchange\x01\x00\x00\x00\'__wbg_onlanguagechange_85b424ac14dd7b9b\x00\x00\x00\x01\x06Window\x01\x00\x01\x10onlanguagechange\x01\x01\x04this\x10onlanguagechange\x01\x00\x00\x00*__wbg_setonlanguagechange_37fb246449939e3e\x00\x00\x00\x01\x06Window\x01\x00\x02\x10onlanguagechange\x01\x02\x04this\x05value\x14set_onlanguagechange\x01\x00\x00\x00 __wbg_onmessage_b18fb84f8b8433d1\x00\x00\x00\x01\x06Window\x01\x00\x01\tonmessage\x01\x01\x04this\tonmessage\x01\x00\x00\x00#__wbg_setonmessage_c189fbe55a1255bd\x00\x00\x00\x01\x06Window\x01\x00\x02\tonmessage\x01\x02\x04this\x05value\rset_onmessage\x01\x00\x00\x00%__wbg_onmessageerror_0c28e495f3eb58ce\x00\x00\x00\x01\x06Window\x01\x00\x01\x0eonmessageerror\x01\x01\x04this\x0eonmessageerror\x01\x00\x00\x00(__wbg_setonmessageerror_adcdc1f547e7b100\x00\x00\x00\x01\x06Window\x01\x00\x02\x0eonmessageerror\x01\x02\x04this\x05value\x12set_onmessageerror\x01\x00\x00\x00 __wbg_onoffline_7ac1b778736fea09\x00\x00\x00\x01\x06Window\x01\x00\x01\tonoffline\x01\x01\x04this\tonoffline\x01\x00\x00\x00#__wbg_setonoffline_80c49fd208be03f3\x00\x00\x00\x01\x06Window\x01\x00\x02\tonoffline\x01\x02\x04this\x05value\rset_onoffline\x01\x00\x00\x00\x1f__wbg_ononline_88833ed60029f546\x00\x00\x00\x01\x06Window\x01\x00\x01\x08ononline\x01\x01\x04this\x08ononline\x01\x00\x00\x00\"__wbg_setononline_0a1d4268fe9cc0dc\x00\x00\x00\x01\x06Window\x01\x00\x02\x08ononline\x01\x02\x04this\x05value\x0cset_ononline\x01\x00\x00\x00!__wbg_onpagehide_37d6997c7d404771\x00\x00\x00\x01\x06Window\x01\x00\x01\nonpagehide\x01\x01\x04this\nonpagehide\x01\x00\x00\x00$__wbg_setonpagehide_d2c38ce7ffc2860c\x00\x00\x00\x01\x06Window\x01\x00\x02\nonpagehide\x01\x02\x04this\x05value\x0eset_onpagehide\x01\x00\x00\x00!__wbg_onpageshow_69ff6c3904d80eeb\x00\x00\x00\x01\x06Window\x01\x00\x01\nonpageshow\x01\x01\x04this\nonpageshow\x01\x00\x00\x00$__wbg_setonpageshow_574699a323d2abcc\x00\x00\x00\x01\x06Window\x01\x00\x02\nonpageshow\x01\x02\x04this\x05value\x0eset_onpageshow\x01\x00\x00\x00!__wbg_onpopstate_716bfa4c11e4c085\x00\x00\x00\x01\x06Window\x01\x00\x01\nonpopstate\x01\x01\x04this\nonpopstate\x01\x00\x00\x00$__wbg_setonpopstate_9309fcfe3458b54f\x00\x00\x00\x01\x06Window\x01\x00\x02\nonpopstate\x01\x02\x04this\x05value\x0eset_onpopstate\x01\x00\x00\x00 __wbg_onstorage_ec406d7f0a2a8de9\x00\x00\x00\x01\x06Window\x01\x00\x01\tonstorage\x01\x01\x04this\tonstorage\x01\x00\x00\x00#__wbg_setonstorage_ef17305d94bbf49a\x00\x00\x00\x01\x06Window\x01\x00\x02\tonstorage\x01\x02\x04this\x05value\rset_onstorage\x01\x00\x00\x00\x1f__wbg_onunload_f18a09696b415bc7\x00\x00\x00\x01\x06Window\x01\x00\x01\x08onunload\x01\x01\x04this\x08onunload\x01\x00\x00\x00\"__wbg_setonunload_c9b04ea0b307318d\x00\x00\x00\x01\x06Window\x01\x00\x02\x08onunload\x01\x02\x04this\x05value\x0cset_onunload\x01\x00\x00\x00#__wbg_localStorage_47e8ad68b9e5dcb9\x01\x00\x00\x01\x06Window\x01\x00\x01\x0clocalStorage\x01\x01\x04this\x0clocalStorage\x01\x00\x00\x00\x1d__wbg_origin_80924dfb5249f5c2\x00\x00\x00\x01\x06Window\x01\x00\x01\x06origin\x01\x01\x04this\x06origin\x01\x00\x00\x00&__wbg_isSecureContext_833f32593829f8eb\x00\x00\x00\x01\x06Window\x01\x00\x01\x0fisSecureContext\x01\x01\x04this\x0fisSecureContext\x01\x00\x00\x00 __wbg_indexedDB_e8c06c6b6d20e442\x01\x00\x00\x01\x06Window\x01\x00\x01\tindexedDB\x01\x01\x04this\tindexedDB\x01\x00\x00\x00\x1d__wbg_caches_f61fabfd7bd754dd\x01\x00\x00\x01\x06Window\x01\x00\x01\x06caches\x01\x01\x04this\x06caches\x01\x00\x00\x00%__wbg_sessionStorage_e6826883e308f003\x01\x00\x00\x01\x06Window\x01\x00\x01\x0esessionStorage\x01\x01\x04this\x0esessionStorage\x01\x00\x00\x00\x1c__wbg_alert_584d0347f449eff5\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x05alert\x01\x00\x00\x00\x1c__wbg_alert_af5c272d926011d5\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07message\x05alert\x01\x00\x00\x00\x1b__wbg_blur_5b50b7559a13dd98\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x04blur\x01\x00\x00\x00+__wbg_cancelAnimationFrame_7f3ba4191e67c86b\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x06handle\x14cancelAnimationFrame\x01\x00\x00\x00)__wbg_cancelIdleCallback_1ce9633521379034\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x06handle\x12cancelIdleCallback\x01\x00\x00\x00$__wbg_captureEvents_8cf40e7989c73f61\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\rcaptureEvents\x01\x00\x00\x00\x1c__wbg_close_2baebb8bff6efaf9\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x05close\x01\x00\x00\x00\x1e__wbg_confirm_b955a6333d3bda90\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x07confirm\x01\x00\x00\x00\x1e__wbg_confirm_cdc54611344aacc8\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07message\x07confirm\x01\x00\x00\x00\x1c__wbg_focus_fe2f1d350bdd9422\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x05focus\x01\x00\x00\x00\'__wbg_getComputedStyle_cbeb03ba0c152f27\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x03elt\x10getComputedStyle\x01\x00\x00\x00\'__wbg_getComputedStyle_70a1a6f2a5172822\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x03elt\npseudo_elt\x10getComputedStyle\x01\x00\x00\x00#__wbg_getSelection_a712bbf1214f9c36\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x0cgetSelection\x01\x00\x00\x00!__wbg_matchMedia_443fe61cbc261085\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x05query\nmatchMedia\x01\x00\x00\x00\x1d__wbg_moveBy_3500cbae7114095b\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x01x\x01y\x06moveBy\x01\x00\x00\x00\x1d__wbg_moveTo_64ad22f2e5703a21\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x01x\x01y\x06moveTo\x01\x00\x00\x00\x1b__wbg_open_84004ec63425ef7d\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x04open\x01\x00\x00\x00\x1b__wbg_open_016e1ce96cc27f6a\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x03url\x04open\x01\x00\x00\x00\x1b__wbg_open_7e3a4789bd559091\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x03url\x06target\x04open\x01\x00\x00\x00\x1b__wbg_open_16a395afdb178dc0\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x04\x04this\x03url\x06target\x08features\x04open\x01\x00\x00\x00\"__wbg_postMessage_7319523ac47b4e27\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x07message\rtarget_origin\x0bpostMessage\x01\x00\x00\x00\"__wbg_postMessage_d359a575e751d45a\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x04\x04this\x07message\rtarget_origin\x08transfer\x0bpostMessage\x01\x00\x00\x00\x1c__wbg_print_8720de99b7e4b449\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x05print\x01\x00\x00\x00\x1d__wbg_prompt_e8fd2e2a9ea65726\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x06prompt\x01\x00\x00\x00\x1d__wbg_prompt_8272ea4bbe92eabd\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07message\x06prompt\x01\x00\x00\x00\x1d__wbg_prompt_322a77694725dedb\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x07message\x07default\x06prompt\x01\x00\x00\x00$__wbg_releaseEvents_2a4c5daa819441b8\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\rreleaseEvents\x01\x00\x00\x00,__wbg_requestAnimationFrame_89935c9d6ac25d2f\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x08callback\x15requestAnimationFrame\x01\x00\x00\x00*__wbg_requestIdleCallback_fcb35723f6b97a5a\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x08callback\x13requestIdleCallback\x01\x00\x00\x00*__wbg_requestIdleCallback_2247959bcdafb50a\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x08callback\x07options\x13requestIdleCallback\x01\x00\x00\x00\x1f__wbg_resizeBy_8d7b7837385d956d\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x01x\x01y\x08resizeBy\x01\x00\x00\x00\x1f__wbg_resizeTo_65be5869202d6324\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x01x\x01y\x08resizeTo\x01\x00\x00\x00\x1d__wbg_scroll_a5bc66f646a97318\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x01x\x01y\x06scroll\x01\x00\x00\x00\x1d__wbg_scroll_1c713af62fbd7b2e\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x06scroll\x01\x00\x00\x00\x1d__wbg_scroll_3f19faaf1929e517\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07options\x06scroll\x01\x00\x00\x00\x1f__wbg_scrollBy_e172b416dd2abe29\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x01x\x01y\x08scrollBy\x01\x00\x00\x00\x1f__wbg_scrollBy_49f0d02bdf8002d5\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x08scrollBy\x01\x00\x00\x00\x1f__wbg_scrollBy_3caed13f7f72065c\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07options\x08scrollBy\x01\x00\x00\x00\x1f__wbg_scrollTo_519a8115957d6180\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x01x\x01y\x08scrollTo\x01\x00\x00\x00\x1f__wbg_scrollTo_63bb33309f505fba\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x08scrollTo\x01\x00\x00\x00\x1f__wbg_scrollTo_c4814d901d6daa14\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07options\x08scrollTo\x01\x00\x00\x00\x1b__wbg_stop_93be791ddb715470\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x04stop\x01\x00\x00\x00\x1a__wbg_get_a0f7f23dc0b8d32b\x00\x00\x00\x01\x06Window\x01\x00\x03\x01\x02\x04this\x04name\x03get\x01\x00\x00\x00\x1b__wbg_atob_e50206dd8db7c7a9\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x04atob\x04atob\x01\x00\x00\x00\x1b__wbg_btoa_cea818dd237c91eb\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x04btoa\x04btoa\x01\x00\x00\x00$__wbg_clearInterval_07000d9d7cba9ad9\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\rclearInterval\x01\x00\x00\x00$__wbg_clearInterval_d3ba4be25e4c21a4\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x06handle\rclearInterval\x01\x00\x00\x00#__wbg_clearTimeout_4b8d9c7bfc171a27\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x01\x04this\x0cclearTimeout\x01\x00\x00\x00#__wbg_clearTimeout_dd3fc8919742efa0\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x06handle\x0cclearTimeout\x01\x00\x00\x00(__wbg_createImageBitmap_ee95fd8e98efb716\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07a_image\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_d49401217aa7274f\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07a_image\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_616d6cf36c6cba32\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07a_image\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_ae21c973e0eca79b\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07a_image\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_e89e5f2a1aedf1df\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07a_image\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_cb8c09f61058072b\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07a_image\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_672556780bd8f36b\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07a_image\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_7f1ac3595741dc4c\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07a_image\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_85989c1b665dfb57\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07a_image\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_949abc9fc732ac36\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x06\x04this\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_15e3845a9f5ba2bc\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x06\x04this\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_da0c1d02cf4f387c\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x06\x04this\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_283ee102b072fdab\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x06\x04this\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_fefbbb1a45ae910a\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x06\x04this\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_d4743113315a6ce1\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x06\x04this\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_637073ce337c3ed1\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x06\x04this\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_c8b64d932240df67\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x06\x04this\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\x01\x00\x00\x00(__wbg_createImageBitmap_d58852b9afd9b4e1\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x06\x04this\x07a_image\x04a_sx\x04a_sy\x04a_sw\x04a_sh\x11createImageBitmap\x01\x00\x00\x00\x1c__wbg_fetch_91f098921cc7cca8\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x05input\x05fetch\x01\x00\x00\x00\x1c__wbg_fetch_8fd2e4322bb8dc59\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x05input\x05fetch\x01\x00\x00\x00\x1c__wbg_fetch_1893f81c58855a39\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x05input\x04init\x05fetch\x01\x00\x00\x00\x1c__wbg_fetch_7032e6ddf6fc72c9\x00\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x05input\x04init\x05fetch\x01\x00\x00\x00\"__wbg_setInterval_03ef3322e62df16c\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07handler\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_09738813ff0efd4d\x01\x01\x00\x01\x06Window\x01\x00\x00\x01\x04\x04this\x07handler\x07timeout\targuments\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_06df6f1ebeafd66f\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x07handler\x07timeout\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_c6f2783e48211f1d\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x04\x04this\x07handler\x07timeout\x0barguments_1\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_2f3602dcc88268e5\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x05\x04this\x07handler\x07timeout\x0barguments_1\x0barguments_2\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_70d9a40e71cef5b6\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x06\x04this\x07handler\x07timeout\x0barguments_1\x0barguments_2\x0barguments_3\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_3cca8b2641a6a487\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x07\x04this\x07handler\x07timeout\x0barguments_1\x0barguments_2\x0barguments_3\x0barguments_4\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_63148819ca312730\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x08\x04this\x07handler\x07timeout\x0barguments_1\x0barguments_2\x0barguments_3\x0barguments_4\x0barguments_5\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_8a6eb622b53d0db0\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\t\x04this\x07handler\x07timeout\x0barguments_1\x0barguments_2\x0barguments_3\x0barguments_4\x0barguments_5\x0barguments_6\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_6e930af0c117b03f\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\n\x04this\x07handler\x07timeout\x0barguments_1\x0barguments_2\x0barguments_3\x0barguments_4\x0barguments_5\x0barguments_6\x0barguments_7\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_97f4df12d65cd3f9\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07handler\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_a67ad10140581607\x01\x01\x00\x01\x06Window\x01\x00\x00\x01\x04\x04this\x07handler\x07timeout\x06unused\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_856db3f8668e4b7d\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x07handler\x07timeout\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_bd04bfcfdaa88d0b\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x04\x04this\x07handler\x07timeout\x08unused_1\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_1c3dd78e70eecb7a\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x05\x04this\x07handler\x07timeout\x08unused_1\x08unused_2\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_37f6328206aac311\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x06\x04this\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_a6f6c0b298133177\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x07\x04this\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_a3c9f2438b3604c5\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x08\x04this\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_19282184f0dc278f\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\t\x04this\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\x0bsetInterval\x01\x00\x00\x00\"__wbg_setInterval_d492b6e43b4320fe\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\n\x04this\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\x08unused_7\x0bsetInterval\x01\x00\x00\x00!__wbg_setTimeout_248993910cb2beac\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07handler\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_085278125bf2ac5f\x01\x01\x00\x01\x06Window\x01\x00\x00\x01\x04\x04this\x07handler\x07timeout\targuments\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_eaf00c9296a6ab88\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x07handler\x07timeout\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_15399ae17fbf61e8\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x04\x04this\x07handler\x07timeout\x0barguments_1\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_b3078607e9dc29f0\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x05\x04this\x07handler\x07timeout\x0barguments_1\x0barguments_2\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_75275208af58454f\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x06\x04this\x07handler\x07timeout\x0barguments_1\x0barguments_2\x0barguments_3\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_edfabf1a11f25de3\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x07\x04this\x07handler\x07timeout\x0barguments_1\x0barguments_2\x0barguments_3\x0barguments_4\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_84cbd8f3e32f71d8\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x08\x04this\x07handler\x07timeout\x0barguments_1\x0barguments_2\x0barguments_3\x0barguments_4\x0barguments_5\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_49ee34212e59c5e5\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\t\x04this\x07handler\x07timeout\x0barguments_1\x0barguments_2\x0barguments_3\x0barguments_4\x0barguments_5\x0barguments_6\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_dd8e39cbf33ee08c\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\n\x04this\x07handler\x07timeout\x0barguments_1\x0barguments_2\x0barguments_3\x0barguments_4\x0barguments_5\x0barguments_6\x0barguments_7\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_ed059a8208bf2920\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x02\x04this\x07handler\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_a22cbc355a499b0e\x01\x01\x00\x01\x06Window\x01\x00\x00\x01\x04\x04this\x07handler\x07timeout\x06unused\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_e9f56354cdf9bcdd\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x03\x04this\x07handler\x07timeout\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_6faf96154acce1f5\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x04\x04this\x07handler\x07timeout\x08unused_1\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_0b731d88611502a8\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x05\x04this\x07handler\x07timeout\x08unused_1\x08unused_2\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_9026c5bbdf9354b4\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x06\x04this\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_42e7d5074d5f726e\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x07\x04this\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_c14633ef977094a2\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\x08\x04this\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_915d0da207b33114\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\t\x04this\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\nsetTimeout\x01\x00\x00\x00!__wbg_setTimeout_7b2689638920fdf4\x01\x00\x00\x01\x06Window\x01\x00\x00\x01\n\x04this\x07handler\x07timeout\x08unused_1\x08unused_2\x08unused_3\x08unused_4\x08unused_5\x08unused_6\x08unused_7\nsetTimeout\x01\x00\x00\x00\x00\x18web-sys-2ffcad8c6dc62865\x00"
        };
    }
    #[cfg(feature = "Window")]
    pub use gen_Window::*;
    #[cfg(feature = "Worker")]
    #[allow(non_snake_case)]
    mod gen_Worker {
        #![allow(unused_imports)]
        use super::*;
        use wasm_bindgen::prelude::*;
        #[allow(bad_style)]
        ///The `Worker` class.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker)
        ///
        ///*This API requires the following crate features to be activated: `Worker`*
        ///
        #[repr(transparent)]
        #[allow(clippy::all)]
        pub struct Worker {
            obj: EventTarget,
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::fmt::Debug for Worker {
            fn fmt(&self, f: &mut ::core::fmt::Formatter) -> ::core::fmt::Result {
                match *self {
                    Worker {
                        obj: ref __self_0_0,
                    } => {
                        let mut debug_trait_builder = f.debug_struct("Worker");
                        let _ = debug_trait_builder.field("obj", &&(*__self_0_0));
                        debug_trait_builder.finish()
                    }
                }
            }
        }
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::clone::Clone for Worker {
            #[inline]
            fn clone(&self) -> Worker {
                match *self {
                    Worker {
                        obj: ref __self_0_0,
                    } => Worker {
                        obj: ::core::clone::Clone::clone(&(*__self_0_0)),
                    },
                }
            }
        }
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::marker::StructuralPartialEq for Worker {}
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::PartialEq for Worker {
            #[inline]
            fn eq(&self, other: &Worker) -> bool {
                match *other {
                    Worker {
                        obj: ref __self_1_0,
                    } => match *self {
                        Worker {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) == (*__self_1_0),
                    },
                }
            }
            #[inline]
            fn ne(&self, other: &Worker) -> bool {
                match *other {
                    Worker {
                        obj: ref __self_1_0,
                    } => match *self {
                        Worker {
                            obj: ref __self_0_0,
                        } => (*__self_0_0) != (*__self_1_0),
                    },
                }
            }
        }
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::marker::StructuralEq for Worker {}
        #[automatically_derived]
        #[allow(unused_qualifications)]
        #[allow(bad_style)]
        #[allow(clippy::all)]
        impl ::core::cmp::Eq for Worker {
            #[inline]
            #[doc(hidden)]
            fn assert_receiver_is_total_eq(&self) -> () {
                {
                    let _: ::core::cmp::AssertParamIsEq<EventTarget>;
                }
            }
        }
        #[allow(bad_style)]
        #[allow(clippy::all)]
        const __wbg_generated_const_Worker: () = {
            use wasm_bindgen::__rt::core;
            use wasm_bindgen::convert::RefFromWasmAbi;
            use wasm_bindgen::convert::{FromWasmAbi, IntoWasmAbi};
            use wasm_bindgen::convert::{OptionFromWasmAbi, OptionIntoWasmAbi};
            use wasm_bindgen::describe::WasmDescribe;
            use wasm_bindgen::{JsCast, JsValue};
            impl WasmDescribe for Worker {
                fn describe() {
                    use wasm_bindgen::describe::*;
                    inform(NAMED_EXTERNREF);
                    inform(6u32);
                    inform(87u32);
                    inform(111u32);
                    inform(114u32);
                    inform(107u32);
                    inform(101u32);
                    inform(114u32);
                }
            }
            impl core::ops::Deref for Worker {
                type Target = EventTarget;
                #[inline]
                fn deref(&self) -> &EventTarget {
                    &self.obj
                }
            }
            impl IntoWasmAbi for Worker {
                type Abi = <JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    self.obj.into_abi()
                }
            }
            impl OptionIntoWasmAbi for Worker {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl<'a> OptionIntoWasmAbi for &'a Worker {
                #[inline]
                fn none() -> Self::Abi {
                    0
                }
            }
            impl FromWasmAbi for Worker {
                type Abi = <JsValue as FromWasmAbi>::Abi;
                #[inline]
                unsafe fn from_abi(js: Self::Abi) -> Self {
                    Worker {
                        obj: JsValue::from_abi(js).into(),
                    }
                }
            }
            impl OptionFromWasmAbi for Worker {
                #[inline]
                fn is_none(abi: &Self::Abi) -> bool {
                    *abi == 0
                }
            }
            impl<'a> IntoWasmAbi for &'a Worker {
                type Abi = <&'a JsValue as IntoWasmAbi>::Abi;
                #[inline]
                fn into_abi(self) -> Self::Abi {
                    (&self.obj).into_abi()
                }
            }
            impl RefFromWasmAbi for Worker {
                type Abi = <JsValue as RefFromWasmAbi>::Abi;
                type Anchor = core::mem::ManuallyDrop<Worker>;
                #[inline]
                unsafe fn ref_from_abi(js: Self::Abi) -> Self::Anchor {
                    let tmp = <JsValue as RefFromWasmAbi>::ref_from_abi(js);
                    core::mem::ManuallyDrop::new(Worker {
                        obj: core::mem::ManuallyDrop::into_inner(tmp).into(),
                    })
                }
            }
            impl From<JsValue> for Worker {
                #[inline]
                fn from(obj: JsValue) -> Worker {
                    Worker { obj: obj.into() }
                }
            }
            impl AsRef<JsValue> for Worker {
                #[inline]
                fn as_ref(&self) -> &JsValue {
                    self.obj.as_ref()
                }
            }
            impl AsRef<Worker> for Worker {
                #[inline]
                fn as_ref(&self) -> &Worker {
                    self
                }
            }
            impl From<Worker> for JsValue {
                #[inline]
                fn from(obj: Worker) -> JsValue {
                    obj.obj.into()
                }
            }
            impl JsCast for Worker {
                fn instanceof(val: &JsValue) -> bool {
                    #[link(wasm_import_module = "__wbindgen_placeholder__")]
                    #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                    extern "C" {
                        fn __wbg_instanceof_Worker_291890aaedb92dd0(val: u32) -> u32;
                    }
                    unsafe {
                        let idx = val.into_abi();
                        __wbg_instanceof_Worker_291890aaedb92dd0(idx) != 0
                    }
                }
                #[inline]
                fn unchecked_from_js(val: JsValue) -> Self {
                    Worker { obj: val.into() }
                }
                #[inline]
                fn unchecked_from_js_ref(val: &JsValue) -> &Self {
                    unsafe { &*(val as *const JsValue as *const Worker) }
                }
            }
            ()
        };
        #[allow(clippy::all)]
        impl From<Worker> for EventTarget {
            #[inline]
            fn from(obj: Worker) -> EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<EventTarget> for Worker {
            #[inline]
            fn as_ref(&self) -> &EventTarget {
                use wasm_bindgen::JsCast;
                EventTarget::unchecked_from_js_ref(self.as_ref())
            }
        }
        #[allow(clippy::all)]
        impl From<Worker> for ::js_sys::Object {
            #[inline]
            fn from(obj: Worker) -> ::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js(obj.into())
            }
        }
        #[allow(clippy::all)]
        impl AsRef<::js_sys::Object> for Worker {
            #[inline]
            fn as_ref(&self) -> &::js_sys::Object {
                use wasm_bindgen::JsCast;
                ::js_sys::Object::unchecked_from_js_ref(self.as_ref())
            }
        }
        ///Getter for the `onmessage` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage)
        ///
        ///*This API requires the following crate features to be activated: `Worker`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmessage_3627c3fff5756fe9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Worker as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Worker {
            ///Getter for the `onmessage` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage)
            ///
            ///*This API requires the following crate features to be activated: `Worker`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmessage(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmessage` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage)
                ///
                ///*This API requires the following crate features to be activated: `Worker`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmessage_3627c3fff5756fe9(
                        this: <&Worker as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Worker as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmessage_3627c3fff5756fe9(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmessage` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage)
        ///
        ///*This API requires the following crate features to be activated: `Worker`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmessage_ac429956bee8333f() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Worker as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Worker {
            ///Setter for the `onmessage` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage)
            ///
            ///*This API requires the following crate features to be activated: `Worker`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmessage(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmessage` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage)
                ///
                ///*This API requires the following crate features to be activated: `Worker`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmessage_ac429956bee8333f(
                        this: <&Worker as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Worker as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmessage_ac429956bee8333f(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onmessageerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror)
        ///
        ///*This API requires the following crate features to be activated: `Worker`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onmessageerror_b454b435e3ee63e5() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Worker as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Worker {
            ///Getter for the `onmessageerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror)
            ///
            ///*This API requires the following crate features to be activated: `Worker`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onmessageerror(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onmessageerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror)
                ///
                ///*This API requires the following crate features to be activated: `Worker`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onmessageerror_b454b435e3ee63e5(
                        this: <&Worker as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Worker as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onmessageerror_b454b435e3ee63e5(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onmessageerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror)
        ///
        ///*This API requires the following crate features to be activated: `Worker`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonmessageerror_d38c5d769e8bd1f6() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Worker as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Worker {
            ///Setter for the `onmessageerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror)
            ///
            ///*This API requires the following crate features to be activated: `Worker`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onmessageerror(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onmessageerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror)
                ///
                ///*This API requires the following crate features to be activated: `Worker`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonmessageerror_d38c5d769e8bd1f6(
                        this: <&Worker as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Worker as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonmessageerror_d38c5d769e8bd1f6(this, value)
                    };
                    ()
                }
            }
        }
        ///Getter for the `onerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onerror)
        ///
        ///*This API requires the following crate features to be activated: `Worker`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_onerror_bc6869cc734e820c() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Worker as WasmDescribe>::describe();
            <Option<::js_sys::Function> as WasmDescribe>::describe();
        }
        impl Worker {
            ///Getter for the `onerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onerror)
            ///
            ///*This API requires the following crate features to be activated: `Worker`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn onerror(&self) -> Option<::js_sys::Function> {
                ///Getter for the `onerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onerror)
                ///
                ///*This API requires the following crate features to be activated: `Worker`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_onerror_bc6869cc734e820c(
                        this: <&Worker as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let this = <&Worker as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_onerror_bc6869cc734e820c(this)
                    };
                    <Option<::js_sys::Function> as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    )
                }
            }
        }
        ///Setter for the `onerror` field of this object.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onerror)
        ///
        ///*This API requires the following crate features to be activated: `Worker`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_setonerror_6984a567816484e9() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Worker as WasmDescribe>::describe();
            <Option<&::js_sys::Function> as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Worker {
            ///Setter for the `onerror` field of this object.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onerror)
            ///
            ///*This API requires the following crate features to be activated: `Worker`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn set_onerror(&self, value: Option<&::js_sys::Function>) {
                ///Setter for the `onerror` field of this object.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/onerror)
                ///
                ///*This API requires the following crate features to be activated: `Worker`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_setonerror_6984a567816484e9(
                        this: <&Worker as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        value : < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Worker as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let value = < Option < & :: js_sys :: Function > as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (value) ;
                        __wbg_setonerror_6984a567816484e9(this, value)
                    };
                    ()
                }
            }
        }
        ///The `new Worker(..)` constructor, creating a new instance of `Worker`.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker)
        ///
        ///*This API requires the following crate features to be activated: `Worker`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_new_be9a6fc5d944160e() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&str as WasmDescribe>::describe();
            <Worker as WasmDescribe>::describe();
        }
        impl Worker {
            ///The `new Worker(..)` constructor, creating a new instance of `Worker`.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker)
            ///
            ///*This API requires the following crate features to be activated: `Worker`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn new(script_url: &str) -> Result<Worker, JsValue> {
                ///The `new Worker(..)` constructor, creating a new instance of `Worker`.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker)
                ///
                ///*This API requires the following crate features to be activated: `Worker`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_new_be9a6fc5d944160e(
                        script_url: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> <Worker as wasm_bindgen::convert::FromWasmAbi>::Abi;
                }
                unsafe {
                    let _ret = {
                        let script_url =
                            <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(script_url);
                        __wbg_new_be9a6fc5d944160e(script_url)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(<Worker as wasm_bindgen::convert::FromWasmAbi>::from_abi(
                        _ret,
                    ))
                }
            }
        }
        impl Worker {}
        ///The `postMessage()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage)
        ///
        ///*This API requires the following crate features to be activated: `Worker`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_postMessage_cdafff11f21a3c59() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(2u32);
            <&Worker as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Worker {
            ///The `postMessage()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage)
            ///
            ///*This API requires the following crate features to be activated: `Worker`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn post_message(&self, message: &::wasm_bindgen::JsValue) -> Result<(), JsValue> {
                ///The `postMessage()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage)
                ///
                ///*This API requires the following crate features to be activated: `Worker`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_postMessage_cdafff11f21a3c59(
                        this: <&Worker as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Worker as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let message = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (message) ;
                        __wbg_postMessage_cdafff11f21a3c59(this, message)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `postMessage()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage)
        ///
        ///*This API requires the following crate features to be activated: `Worker`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_postMessage_cdcb23aac0181e68() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(3u32);
            <&Worker as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Worker {
            ///The `postMessage()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage)
            ///
            ///*This API requires the following crate features to be activated: `Worker`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn post_message_with_transfer(
                &self,
                message: &::wasm_bindgen::JsValue,
                transfer: &::wasm_bindgen::JsValue,
            ) -> Result<(), JsValue> {
                ///The `postMessage()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage)
                ///
                ///*This API requires the following crate features to be activated: `Worker`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_postMessage_cdcb23aac0181e68(
                        this: <&Worker as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        message : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        transfer : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Worker as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        let message = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (message) ;
                        let transfer = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (transfer) ;
                        __wbg_postMessage_cdcb23aac0181e68(this, message, transfer)
                    };
                    wasm_bindgen::__rt::take_last_exception()?;
                    Ok(())
                }
            }
        }
        ///The `terminate()` method.
        ///
        ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate)
        ///
        ///*This API requires the following crate features to be activated: `Worker`*
        #[no_mangle]
        #[allow(non_snake_case)]
        #[doc(hidden)]
        #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
        #[allow(clippy::all)]
        pub extern "C" fn __wbindgen_describe___wbg_terminate_90fa72492443e091() {
            use wasm_bindgen::describe::*;
            wasm_bindgen::__rt::link_mem_intrinsics();
            inform(FUNCTION);
            inform(0);
            inform(1u32);
            <&Worker as WasmDescribe>::describe();
            <() as WasmDescribe>::describe();
        }
        impl Worker {
            ///The `terminate()` method.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate)
            ///
            ///*This API requires the following crate features to be activated: `Worker`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn terminate(&self) {
                ///The `terminate()` method.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate)
                ///
                ///*This API requires the following crate features to be activated: `Worker`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_terminate_90fa72492443e091(
                        this: <&Worker as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let this = <&Worker as wasm_bindgen::convert::IntoWasmAbi>::into_abi(self);
                        __wbg_terminate_90fa72492443e091(this)
                    };
                    ()
                }
            }
        }
        #[allow(non_upper_case_globals)]
        #[cfg(target_arch = "wasm32")]
        #[link_section = "__wasm_bindgen_unstable"]
        #[doc(hidden)]
        #[allow(clippy::all)]
        pub static __WASM_BINDGEN_GENERATED_732628da4d111848: [u8; 1053usize] = {
            static _INCLUDED_FILES: &[&str] = &[];
            * b".\x00\x00\x00{\"schema_version\":\"0.2.68\",\"version\":\"0.2.68\"}\xe7\x03\x00\x00\x00\x00\x0c\x00\x00\x02\x06Worker(__wbg_instanceof_Worker_291890aaedb92dd0\x00\x00\x00\x00 __wbg_onmessage_3627c3fff5756fe9\x00\x00\x00\x01\x06Worker\x01\x00\x01\tonmessage\x01\x01\x04this\tonmessage\x01\x00\x00\x00#__wbg_setonmessage_ac429956bee8333f\x00\x00\x00\x01\x06Worker\x01\x00\x02\tonmessage\x01\x02\x04this\x05value\rset_onmessage\x01\x00\x00\x00%__wbg_onmessageerror_b454b435e3ee63e5\x00\x00\x00\x01\x06Worker\x01\x00\x01\x0eonmessageerror\x01\x01\x04this\x0eonmessageerror\x01\x00\x00\x00(__wbg_setonmessageerror_d38c5d769e8bd1f6\x00\x00\x00\x01\x06Worker\x01\x00\x02\x0eonmessageerror\x01\x02\x04this\x05value\x12set_onmessageerror\x01\x00\x00\x00\x1e__wbg_onerror_bc6869cc734e820c\x00\x00\x00\x01\x06Worker\x01\x00\x01\x07onerror\x01\x01\x04this\x07onerror\x01\x00\x00\x00!__wbg_setonerror_6984a567816484e9\x00\x00\x00\x01\x06Worker\x01\x00\x02\x07onerror\x01\x02\x04this\x05value\x0bset_onerror\x01\x00\x00\x00\x1a__wbg_new_be9a6fc5d944160e\x01\x00\x00\x01\x06Worker\x00\x01\x01\nscript_url\x03new\x01\x00\x00\x00%__wbg_newwithoptions_748eb789b11fbe44\x01\x00\x00\x01\x06Worker\x00\x01\x02\nscript_url\x07options\x10new_with_options\x01\x00\x00\x00\"__wbg_postMessage_cdafff11f21a3c59\x01\x00\x00\x01\x06Worker\x01\x00\x00\x01\x02\x04this\x07message\x0bpostMessage\x01\x00\x00\x00\"__wbg_postMessage_cdcb23aac0181e68\x01\x00\x00\x01\x06Worker\x01\x00\x00\x01\x03\x04this\x07message\x08transfer\x0bpostMessage\x01\x00\x00\x00 __wbg_terminate_90fa72492443e091\x00\x00\x00\x01\x06Worker\x01\x00\x00\x01\x01\x04this\tterminate\x01\x00\x00\x00\x00\x18web-sys-2ffcad8c6dc62865\x00"
        };
    }
    #[cfg(feature = "Worker")]
    pub use gen_Worker::*;
    #[cfg(feature = "console")]
    #[allow(non_snake_case)]
    mod gen_console {
        pub mod console {
            #![allow(unused_imports)]
            use super::super::*;
            use wasm_bindgen::prelude::*;
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_assert_ed4651dbc0355a34() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn assert() {
                ///The `console.assert()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_assert_ed4651dbc0355a34() -> ();
                }
                unsafe {
                    let _ret = { __wbg_assert_ed4651dbc0355a34() };
                    ()
                }
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_assert_ec43d804e98824c7() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <bool as WasmDescribe>::describe();
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn assert_with_condition_and_data(condition: bool, data: &::js_sys::Array) {
                ///The `console.assert()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_assert_ec43d804e98824c7(
                        condition: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let condition =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(condition);
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_assert_ec43d804e98824c7(condition, data)
                    };
                    ()
                }
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_assert_dcb309174d615132() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <bool as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn assert_with_condition_and_data_0(condition: bool) {
                ///The `console.assert()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_assert_dcb309174d615132(
                        condition: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let condition =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(condition);
                        __wbg_assert_dcb309174d615132(condition)
                    };
                    ()
                }
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_assert_ef4c98b6b61e7fc4() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <bool as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn assert_with_condition_and_data_1(
                condition: bool,
                data_1: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.assert()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_assert_ef4c98b6b61e7fc4(
                        condition: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let condition =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(condition);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_assert_ef4c98b6b61e7fc4(condition, data_1)
                    };
                    ()
                }
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_assert_7266dbdbb38b2b30() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <bool as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn assert_with_condition_and_data_2(
                condition: bool,
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.assert()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_assert_7266dbdbb38b2b30(
                        condition: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let condition =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(condition);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_assert_7266dbdbb38b2b30(condition, data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_assert_afcb26eb4c0235b7() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <bool as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn assert_with_condition_and_data_3(
                condition: bool,
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.assert()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_assert_afcb26eb4c0235b7(
                        condition: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let condition =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(condition);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_assert_afcb26eb4c0235b7(condition, data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_assert_e3b8264902f51652() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <bool as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn assert_with_condition_and_data_4(
                condition: bool,
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.assert()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_assert_e3b8264902f51652(
                        condition: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let condition =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(condition);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_assert_e3b8264902f51652(condition, data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_assert_f2a9fde7f264fb67() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <bool as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn assert_with_condition_and_data_5(
                condition: bool,
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.assert()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_assert_f2a9fde7f264fb67(
                        condition: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let condition =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(condition);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_assert_f2a9fde7f264fb67(
                            condition, data_1, data_2, data_3, data_4, data_5,
                        )
                    };
                    ()
                }
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_assert_c4fceea7bbffe038() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <bool as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn assert_with_condition_and_data_6(
                condition: bool,
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.assert()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_assert_c4fceea7bbffe038(
                        condition: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let condition =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(condition);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_assert_c4fceea7bbffe038(
                            condition, data_1, data_2, data_3, data_4, data_5, data_6,
                        )
                    };
                    ()
                }
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_assert_cdb45bcdc3213200() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(8u32);
                <bool as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.assert()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn assert_with_condition_and_data_7(
                condition: bool,
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.assert()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/assert)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_assert_cdb45bcdc3213200(
                        condition: <bool as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let condition =
                            <bool as wasm_bindgen::convert::IntoWasmAbi>::into_abi(condition);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_assert_cdb45bcdc3213200(
                            condition, data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.clear()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/clear)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_clear_132bce8038075f01() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.clear()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/clear)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn clear() {
                ///The `console.clear()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/clear)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_clear_132bce8038075f01() -> ();
                }
                unsafe {
                    let _ret = { __wbg_clear_132bce8038075f01() };
                    ()
                }
            }
            ///The `console.count()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/count)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_count_d25a42bfa318b988() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.count()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/count)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn count() {
                ///The `console.count()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/count)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_count_d25a42bfa318b988() -> ();
                }
                unsafe {
                    let _ret = { __wbg_count_d25a42bfa318b988() };
                    ()
                }
            }
            ///The `console.count()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/count)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_count_d3b35be0274d2f52() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&str as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.count()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/count)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn count_with_label(label: &str) {
                ///The `console.count()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/count)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_count_d3b35be0274d2f52(
                        label: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let label = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(label);
                        __wbg_count_d3b35be0274d2f52(label)
                    };
                    ()
                }
            }
            ///The `console.countReset()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/countReset)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_countReset_96edfcec7a2cf628() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.countReset()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/countReset)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn count_reset() {
                ///The `console.countReset()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/countReset)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_countReset_96edfcec7a2cf628() -> ();
                }
                unsafe {
                    let _ret = { __wbg_countReset_96edfcec7a2cf628() };
                    ()
                }
            }
            ///The `console.countReset()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/countReset)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_countReset_6e36b98fdbf98791() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&str as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.countReset()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/countReset)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn count_reset_with_label(label: &str) {
                ///The `console.countReset()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/countReset)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_countReset_6e36b98fdbf98791(
                        label: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let label = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(label);
                        __wbg_countReset_6e36b98fdbf98791(label)
                    };
                    ()
                }
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_debug_308ef14e94f8be79() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn debug(data: &::js_sys::Array) {
                ///The `console.debug()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_debug_308ef14e94f8be79(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_debug_308ef14e94f8be79(data)
                    };
                    ()
                }
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_debug_296899f980c282a2() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn debug_0() {
                ///The `console.debug()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_debug_296899f980c282a2() -> ();
                }
                unsafe {
                    let _ret = { __wbg_debug_296899f980c282a2() };
                    ()
                }
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_debug_b443de592faba09f() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn debug_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.debug()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_debug_b443de592faba09f(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_debug_b443de592faba09f(data_1)
                    };
                    ()
                }
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_debug_684e20e1d8707d5e() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn debug_2(data_1: &::wasm_bindgen::JsValue, data_2: &::wasm_bindgen::JsValue) {
                ///The `console.debug()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_debug_684e20e1d8707d5e(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_debug_684e20e1d8707d5e(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_debug_ebb9dd15f5ae8bed() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn debug_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.debug()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_debug_ebb9dd15f5ae8bed(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_debug_ebb9dd15f5ae8bed(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_debug_d101e002eb92f20b() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn debug_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.debug()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_debug_d101e002eb92f20b(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_debug_d101e002eb92f20b(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_debug_052a0c02b494b820() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn debug_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.debug()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_debug_052a0c02b494b820(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_debug_052a0c02b494b820(data_1, data_2, data_3, data_4, data_5)
                    };
                    ()
                }
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_debug_96bfc312a6c54980() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn debug_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.debug()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_debug_96bfc312a6c54980(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_debug_96bfc312a6c54980(data_1, data_2, data_3, data_4, data_5, data_6)
                    };
                    ()
                }
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_debug_f54ec4f6207b2f66() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.debug()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn debug_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.debug()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/debug)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_debug_f54ec4f6207b2f66(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_debug_f54ec4f6207b2f66(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dir_3155a452339b7ca2() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dir(data: &::js_sys::Array) {
                ///The `console.dir()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dir_3155a452339b7ca2(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_dir_3155a452339b7ca2(data)
                    };
                    ()
                }
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dir_70548834ef26afbd() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dir_0() {
                ///The `console.dir()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dir_70548834ef26afbd() -> ();
                }
                unsafe {
                    let _ret = { __wbg_dir_70548834ef26afbd() };
                    ()
                }
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dir_fb0aa15c6b553135() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dir_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.dir()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dir_fb0aa15c6b553135(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_dir_fb0aa15c6b553135(data_1)
                    };
                    ()
                }
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dir_38b771ae0b519cff() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dir_2(data_1: &::wasm_bindgen::JsValue, data_2: &::wasm_bindgen::JsValue) {
                ///The `console.dir()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dir_38b771ae0b519cff(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_dir_38b771ae0b519cff(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dir_dc06f2c4632c9b44() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dir_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.dir()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dir_dc06f2c4632c9b44(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_dir_dc06f2c4632c9b44(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dir_4764c67a69d80d25() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dir_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.dir()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dir_4764c67a69d80d25(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_dir_4764c67a69d80d25(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dir_1613b5793bd30798() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dir_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.dir()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dir_1613b5793bd30798(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_dir_1613b5793bd30798(data_1, data_2, data_3, data_4, data_5)
                    };
                    ()
                }
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dir_cd1fbe57b4e53cb6() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dir_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.dir()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dir_cd1fbe57b4e53cb6(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_dir_cd1fbe57b4e53cb6(data_1, data_2, data_3, data_4, data_5, data_6)
                    };
                    ()
                }
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dir_2ffd62c7a1c24e94() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dir()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dir_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.dir()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dir)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dir_2ffd62c7a1c24e94(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_dir_2ffd62c7a1c24e94(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dirxml_29b0d0561b573e2c() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dirxml(data: &::js_sys::Array) {
                ///The `console.dirxml()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dirxml_29b0d0561b573e2c(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_dirxml_29b0d0561b573e2c(data)
                    };
                    ()
                }
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dirxml_fcfbf1ce0a4b1b7f() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dirxml_0() {
                ///The `console.dirxml()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dirxml_fcfbf1ce0a4b1b7f() -> ();
                }
                unsafe {
                    let _ret = { __wbg_dirxml_fcfbf1ce0a4b1b7f() };
                    ()
                }
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dirxml_d2fc31158fe687ce() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dirxml_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.dirxml()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dirxml_d2fc31158fe687ce(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_dirxml_d2fc31158fe687ce(data_1)
                    };
                    ()
                }
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dirxml_df1135149c3deb89() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dirxml_2(data_1: &::wasm_bindgen::JsValue, data_2: &::wasm_bindgen::JsValue) {
                ///The `console.dirxml()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dirxml_df1135149c3deb89(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_dirxml_df1135149c3deb89(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dirxml_00c830a451113d61() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dirxml_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.dirxml()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dirxml_00c830a451113d61(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_dirxml_00c830a451113d61(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dirxml_6c65a1af53aad4c7() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dirxml_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.dirxml()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dirxml_6c65a1af53aad4c7(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_dirxml_6c65a1af53aad4c7(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dirxml_c2a1f7c7969ef7d1() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dirxml_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.dirxml()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dirxml_c2a1f7c7969ef7d1(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_dirxml_c2a1f7c7969ef7d1(data_1, data_2, data_3, data_4, data_5)
                    };
                    ()
                }
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dirxml_3e296fffa1df5e82() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dirxml_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.dirxml()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dirxml_3e296fffa1df5e82(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_dirxml_3e296fffa1df5e82(
                            data_1, data_2, data_3, data_4, data_5, data_6,
                        )
                    };
                    ()
                }
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_dirxml_63435e75d7496ca7() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.dirxml()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn dirxml_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.dirxml()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/dirxml)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_dirxml_63435e75d7496ca7(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_dirxml_63435e75d7496ca7(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_error_d17a3db3222c8b8d() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn error(data: &::js_sys::Array) {
                ///The `console.error()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_error_d17a3db3222c8b8d(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_error_d17a3db3222c8b8d(data)
                    };
                    ()
                }
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_error_591ff8806227a7e8() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn error_0() {
                ///The `console.error()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_error_591ff8806227a7e8() -> ();
                }
                unsafe {
                    let _ret = { __wbg_error_591ff8806227a7e8() };
                    ()
                }
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_error_7f083efc6bc6752c() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn error_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.error()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_error_7f083efc6bc6752c(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_error_7f083efc6bc6752c(data_1)
                    };
                    ()
                }
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_error_1305f569bc9e150d() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn error_2(data_1: &::wasm_bindgen::JsValue, data_2: &::wasm_bindgen::JsValue) {
                ///The `console.error()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_error_1305f569bc9e150d(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_error_1305f569bc9e150d(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_error_44e19df804c8fbf4() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn error_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.error()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_error_44e19df804c8fbf4(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_error_44e19df804c8fbf4(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_error_cb872335132b1ef7() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn error_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.error()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_error_cb872335132b1ef7(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_error_cb872335132b1ef7(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_error_e918386752d204e6() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn error_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.error()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_error_e918386752d204e6(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_error_e918386752d204e6(data_1, data_2, data_3, data_4, data_5)
                    };
                    ()
                }
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_error_75928df24791ff2f() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn error_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.error()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_error_75928df24791ff2f(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_error_75928df24791ff2f(data_1, data_2, data_3, data_4, data_5, data_6)
                    };
                    ()
                }
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_error_9deb7acb6661d09c() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.error()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn error_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.error()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/error)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_error_9deb7acb6661d09c(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_error_9deb7acb6661d09c(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_exception_9bb74923b327bf06() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn exception(data: &::js_sys::Array) {
                ///The `console.exception()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_exception_9bb74923b327bf06(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_exception_9bb74923b327bf06(data)
                    };
                    ()
                }
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_exception_a3d732bbfb695718() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn exception_0() {
                ///The `console.exception()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_exception_a3d732bbfb695718() -> ();
                }
                unsafe {
                    let _ret = { __wbg_exception_a3d732bbfb695718() };
                    ()
                }
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_exception_8960c2789cc1525a() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn exception_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.exception()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_exception_8960c2789cc1525a(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_exception_8960c2789cc1525a(data_1)
                    };
                    ()
                }
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_exception_3fb732dee153bd9f() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn exception_2(data_1: &::wasm_bindgen::JsValue, data_2: &::wasm_bindgen::JsValue) {
                ///The `console.exception()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_exception_3fb732dee153bd9f(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_exception_3fb732dee153bd9f(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_exception_e26464df6712de4e() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn exception_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.exception()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_exception_e26464df6712de4e(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_exception_e26464df6712de4e(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_exception_205ad8ed942571ba() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn exception_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.exception()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_exception_205ad8ed942571ba(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_exception_205ad8ed942571ba(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_exception_587f7b484699714a() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn exception_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.exception()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_exception_587f7b484699714a(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_exception_587f7b484699714a(data_1, data_2, data_3, data_4, data_5)
                    };
                    ()
                }
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_exception_12c1008cfc0f9f88() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn exception_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.exception()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_exception_12c1008cfc0f9f88(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_exception_12c1008cfc0f9f88(
                            data_1, data_2, data_3, data_4, data_5, data_6,
                        )
                    };
                    ()
                }
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_exception_e1bdcf3b49360683() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.exception()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn exception_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.exception()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/exception)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_exception_e1bdcf3b49360683(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_exception_e1bdcf3b49360683(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_group_9df9dd0215ee9e33() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group(data: &::js_sys::Array) {
                ///The `console.group()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_group_9df9dd0215ee9e33(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_group_9df9dd0215ee9e33(data)
                    };
                    ()
                }
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_group_faa38d317727daa3() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_0() {
                ///The `console.group()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_group_faa38d317727daa3() -> ();
                }
                unsafe {
                    let _ret = { __wbg_group_faa38d317727daa3() };
                    ()
                }
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_group_383050c944b0155c() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.group()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_group_383050c944b0155c(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_group_383050c944b0155c(data_1)
                    };
                    ()
                }
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_group_a3f8e72ec35607ae() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_2(data_1: &::wasm_bindgen::JsValue, data_2: &::wasm_bindgen::JsValue) {
                ///The `console.group()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_group_a3f8e72ec35607ae(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_group_a3f8e72ec35607ae(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_group_fc83429b23cb7baf() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.group()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_group_fc83429b23cb7baf(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_group_fc83429b23cb7baf(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_group_d1c84739f562ddfe() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.group()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_group_d1c84739f562ddfe(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_group_d1c84739f562ddfe(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_group_040f602c5d5afca2() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.group()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_group_040f602c5d5afca2(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_group_040f602c5d5afca2(data_1, data_2, data_3, data_4, data_5)
                    };
                    ()
                }
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_group_fe4d40a00c4b4562() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.group()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_group_fe4d40a00c4b4562(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_group_fe4d40a00c4b4562(data_1, data_2, data_3, data_4, data_5, data_6)
                    };
                    ()
                }
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_group_08ecf20c21a55d37() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.group()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.group()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/group)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_group_08ecf20c21a55d37(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_group_08ecf20c21a55d37(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_groupCollapsed_c09000e54804d437() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_collapsed(data: &::js_sys::Array) {
                ///The `console.groupCollapsed()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_groupCollapsed_c09000e54804d437(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_groupCollapsed_c09000e54804d437(data)
                    };
                    ()
                }
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_groupCollapsed_e57d167186bb68e8() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_collapsed_0() {
                ///The `console.groupCollapsed()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_groupCollapsed_e57d167186bb68e8() -> ();
                }
                unsafe {
                    let _ret = { __wbg_groupCollapsed_e57d167186bb68e8() };
                    ()
                }
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_groupCollapsed_cfba102f9007cff8() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_collapsed_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.groupCollapsed()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_groupCollapsed_cfba102f9007cff8(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_groupCollapsed_cfba102f9007cff8(data_1)
                    };
                    ()
                }
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_groupCollapsed_766be7503c1b1b2f() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_collapsed_2(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.groupCollapsed()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_groupCollapsed_766be7503c1b1b2f(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_groupCollapsed_766be7503c1b1b2f(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_groupCollapsed_7e845c56cbb34533() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_collapsed_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.groupCollapsed()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_groupCollapsed_7e845c56cbb34533(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_groupCollapsed_7e845c56cbb34533(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_groupCollapsed_b05d41707a1cef5b() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_collapsed_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.groupCollapsed()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_groupCollapsed_b05d41707a1cef5b(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_groupCollapsed_b05d41707a1cef5b(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_groupCollapsed_2b53072aa4b81048() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_collapsed_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.groupCollapsed()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_groupCollapsed_2b53072aa4b81048(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_groupCollapsed_2b53072aa4b81048(
                            data_1, data_2, data_3, data_4, data_5,
                        )
                    };
                    ()
                }
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_groupCollapsed_6089d79212a7cb45() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_collapsed_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.groupCollapsed()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_groupCollapsed_6089d79212a7cb45(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_groupCollapsed_6089d79212a7cb45(
                            data_1, data_2, data_3, data_4, data_5, data_6,
                        )
                    };
                    ()
                }
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_groupCollapsed_d6df0bd576005563() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.groupCollapsed()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_collapsed_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.groupCollapsed()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupCollapsed)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_groupCollapsed_d6df0bd576005563(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_groupCollapsed_d6df0bd576005563(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.groupEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_groupEnd_1b2b49dc5bbc7b2f() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.groupEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn group_end() {
                ///The `console.groupEnd()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/groupEnd)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_groupEnd_1b2b49dc5bbc7b2f() -> ();
                }
                unsafe {
                    let _ret = { __wbg_groupEnd_1b2b49dc5bbc7b2f() };
                    ()
                }
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_info_94a80dfcd37a7a32() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn info(data: &::js_sys::Array) {
                ///The `console.info()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_info_94a80dfcd37a7a32(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_info_94a80dfcd37a7a32(data)
                    };
                    ()
                }
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_info_860db49ed11ebba9() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn info_0() {
                ///The `console.info()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_info_860db49ed11ebba9() -> ();
                }
                unsafe {
                    let _ret = { __wbg_info_860db49ed11ebba9() };
                    ()
                }
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_info_6d4a86f0fd590270() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn info_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.info()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_info_6d4a86f0fd590270(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_info_6d4a86f0fd590270(data_1)
                    };
                    ()
                }
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_info_f2a3d990fc3b52eb() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn info_2(data_1: &::wasm_bindgen::JsValue, data_2: &::wasm_bindgen::JsValue) {
                ///The `console.info()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_info_f2a3d990fc3b52eb(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_info_f2a3d990fc3b52eb(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_info_d07d1156a6d2e7cb() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn info_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.info()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_info_d07d1156a6d2e7cb(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_info_d07d1156a6d2e7cb(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_info_a25afde0ff8cd04a() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn info_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.info()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_info_a25afde0ff8cd04a(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_info_a25afde0ff8cd04a(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_info_c9f6ae7fc680f303() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn info_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.info()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_info_c9f6ae7fc680f303(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_info_c9f6ae7fc680f303(data_1, data_2, data_3, data_4, data_5)
                    };
                    ()
                }
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_info_bed7ab15ff999321() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn info_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.info()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_info_bed7ab15ff999321(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_info_bed7ab15ff999321(data_1, data_2, data_3, data_4, data_5, data_6)
                    };
                    ()
                }
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_info_91a434a41d6a74e4() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.info()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn info_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.info()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/info)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_info_91a434a41d6a74e4(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_info_91a434a41d6a74e4(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_log_7f06d8d2574a453c() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn log(data: &::js_sys::Array) {
                ///The `console.log()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_log_7f06d8d2574a453c(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_log_7f06d8d2574a453c(data)
                    };
                    ()
                }
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_log_b3a813ba877d31fd() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn log_0() {
                ///The `console.log()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_log_b3a813ba877d31fd() -> ();
                }
                unsafe {
                    let _ret = { __wbg_log_b3a813ba877d31fd() };
                    ()
                }
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_log_3bafd82835c6de6d() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn log_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.log()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_log_3bafd82835c6de6d(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_log_3bafd82835c6de6d(data_1)
                    };
                    ()
                }
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_log_00870c3365d67f76() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn log_2(data_1: &::wasm_bindgen::JsValue, data_2: &::wasm_bindgen::JsValue) {
                ///The `console.log()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_log_00870c3365d67f76(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_log_00870c3365d67f76(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_log_b08155f6488dc6dc() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn log_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.log()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_log_b08155f6488dc6dc(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_log_b08155f6488dc6dc(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_log_64f566ae90a6c43c() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn log_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.log()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_log_64f566ae90a6c43c(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_log_64f566ae90a6c43c(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_log_7c874f32247444a8() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn log_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.log()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_log_7c874f32247444a8(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_log_7c874f32247444a8(data_1, data_2, data_3, data_4, data_5)
                    };
                    ()
                }
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_log_f005920fd16cd7bc() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn log_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.log()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_log_f005920fd16cd7bc(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_log_f005920fd16cd7bc(data_1, data_2, data_3, data_4, data_5, data_6)
                    };
                    ()
                }
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_log_c27b1ff8cc32dd6b() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.log()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn log_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.log()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/log)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_log_c27b1ff8cc32dd6b(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_log_c27b1ff8cc32dd6b(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profile_1c223125049c386c() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile(data: &::js_sys::Array) {
                ///The `console.profile()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profile_1c223125049c386c(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_profile_1c223125049c386c(data)
                    };
                    ()
                }
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profile_dd2cd95f52fe22f2() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_0() {
                ///The `console.profile()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profile_dd2cd95f52fe22f2() -> ();
                }
                unsafe {
                    let _ret = { __wbg_profile_dd2cd95f52fe22f2() };
                    ()
                }
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profile_8f90fb3737c119e7() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.profile()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profile_8f90fb3737c119e7(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_profile_8f90fb3737c119e7(data_1)
                    };
                    ()
                }
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profile_e822c2cdf0f87b0b() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_2(data_1: &::wasm_bindgen::JsValue, data_2: &::wasm_bindgen::JsValue) {
                ///The `console.profile()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profile_e822c2cdf0f87b0b(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_profile_e822c2cdf0f87b0b(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profile_009d81901183edd0() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.profile()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profile_009d81901183edd0(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_profile_009d81901183edd0(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profile_bc4fd66fbde7e713() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.profile()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profile_bc4fd66fbde7e713(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_profile_bc4fd66fbde7e713(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profile_ce28ad3041bf5a72() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.profile()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profile_ce28ad3041bf5a72(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_profile_ce28ad3041bf5a72(data_1, data_2, data_3, data_4, data_5)
                    };
                    ()
                }
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profile_b2872c5995d8fc35() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.profile()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profile_b2872c5995d8fc35(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_profile_b2872c5995d8fc35(
                            data_1, data_2, data_3, data_4, data_5, data_6,
                        )
                    };
                    ()
                }
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profile_cd5a2a3c3758ba56() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profile()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.profile()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profile)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profile_cd5a2a3c3758ba56(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_profile_cd5a2a3c3758ba56(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profileEnd_6b8c44e365859336() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_end(data: &::js_sys::Array) {
                ///The `console.profileEnd()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profileEnd_6b8c44e365859336(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_profileEnd_6b8c44e365859336(data)
                    };
                    ()
                }
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profileEnd_065f14f57e6a6cf3() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_end_0() {
                ///The `console.profileEnd()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profileEnd_065f14f57e6a6cf3() -> ();
                }
                unsafe {
                    let _ret = { __wbg_profileEnd_065f14f57e6a6cf3() };
                    ()
                }
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profileEnd_8682128250c3af57() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_end_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.profileEnd()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profileEnd_8682128250c3af57(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_profileEnd_8682128250c3af57(data_1)
                    };
                    ()
                }
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profileEnd_0e6da104149fff84() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_end_2(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.profileEnd()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profileEnd_0e6da104149fff84(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_profileEnd_0e6da104149fff84(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profileEnd_2ef123d5adfc73d0() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_end_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.profileEnd()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profileEnd_2ef123d5adfc73d0(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_profileEnd_2ef123d5adfc73d0(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profileEnd_7e01ca64ad57bc57() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_end_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.profileEnd()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profileEnd_7e01ca64ad57bc57(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_profileEnd_7e01ca64ad57bc57(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profileEnd_1d31f63b261615c2() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_end_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.profileEnd()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profileEnd_1d31f63b261615c2(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_profileEnd_1d31f63b261615c2(data_1, data_2, data_3, data_4, data_5)
                    };
                    ()
                }
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profileEnd_ff57faaa40737de1() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_end_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.profileEnd()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profileEnd_ff57faaa40737de1(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_profileEnd_ff57faaa40737de1(
                            data_1, data_2, data_3, data_4, data_5, data_6,
                        )
                    };
                    ()
                }
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_profileEnd_d2bcf399ca3a61c2() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.profileEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn profile_end_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.profileEnd()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/profileEnd)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_profileEnd_d2bcf399ca3a61c2(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_profileEnd_d2bcf399ca3a61c2(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_table_e1c5b84e2a55e855() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn table(data: &::js_sys::Array) {
                ///The `console.table()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_table_e1c5b84e2a55e855(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_table_e1c5b84e2a55e855(data)
                    };
                    ()
                }
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_table_0e220deeba8c6007() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn table_0() {
                ///The `console.table()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_table_0e220deeba8c6007() -> ();
                }
                unsafe {
                    let _ret = { __wbg_table_0e220deeba8c6007() };
                    ()
                }
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_table_8d88e0266405efa0() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn table_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.table()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_table_8d88e0266405efa0(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_table_8d88e0266405efa0(data_1)
                    };
                    ()
                }
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_table_ad5a8188ab2caf39() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn table_2(data_1: &::wasm_bindgen::JsValue, data_2: &::wasm_bindgen::JsValue) {
                ///The `console.table()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_table_ad5a8188ab2caf39(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_table_ad5a8188ab2caf39(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_table_eee2ea1b2701d5c5() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn table_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.table()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_table_eee2ea1b2701d5c5(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_table_eee2ea1b2701d5c5(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_table_83895c2c711a4a7f() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn table_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.table()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_table_83895c2c711a4a7f(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_table_83895c2c711a4a7f(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_table_f50921e300cc3c6d() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn table_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.table()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_table_f50921e300cc3c6d(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_table_f50921e300cc3c6d(data_1, data_2, data_3, data_4, data_5)
                    };
                    ()
                }
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_table_c6d772ebb6274bd8() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn table_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.table()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_table_c6d772ebb6274bd8(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_table_c6d772ebb6274bd8(data_1, data_2, data_3, data_4, data_5, data_6)
                    };
                    ()
                }
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_table_c12436775f1ba3c9() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.table()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn table_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.table()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/table)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_table_c12436775f1ba3c9(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_table_c12436775f1ba3c9(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.time()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/time)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_time_8cd2a2fa02896a7d() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.time()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/time)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time() {
                ///The `console.time()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/time)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_time_8cd2a2fa02896a7d() -> ();
                }
                unsafe {
                    let _ret = { __wbg_time_8cd2a2fa02896a7d() };
                    ()
                }
            }
            ///The `console.time()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/time)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_time_cf4b07f2838757e4() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&str as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.time()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/time)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_with_label(label: &str) {
                ///The `console.time()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/time)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_time_cf4b07f2838757e4(
                        label: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let label = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(label);
                        __wbg_time_cf4b07f2838757e4(label)
                    };
                    ()
                }
            }
            ///The `console.timeEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeEnd_6349fa392e55fb0a() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_end() {
                ///The `console.timeEnd()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeEnd_6349fa392e55fb0a() -> ();
                }
                unsafe {
                    let _ret = { __wbg_timeEnd_6349fa392e55fb0a() };
                    ()
                }
            }
            ///The `console.timeEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeEnd_a1dbce77aa6a65b6() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&str as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeEnd()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_end_with_label(label: &str) {
                ///The `console.timeEnd()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeEnd)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeEnd_a1dbce77aa6a65b6(
                        label: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let label = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(label);
                        __wbg_timeEnd_a1dbce77aa6a65b6(label)
                    };
                    ()
                }
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeLog_9258ecbf76f663ef() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_log() {
                ///The `console.timeLog()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeLog_9258ecbf76f663ef() -> ();
                }
                unsafe {
                    let _ret = { __wbg_timeLog_9258ecbf76f663ef() };
                    ()
                }
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeLog_9181b1bffb03b472() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&str as WasmDescribe>::describe();
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_log_with_label_and_data(label: &str, data: &::js_sys::Array) {
                ///The `console.timeLog()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeLog_9181b1bffb03b472(
                        label: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let label = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(label);
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_timeLog_9181b1bffb03b472(label, data)
                    };
                    ()
                }
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeLog_e79bd37a2346163a() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&str as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_log_with_label_and_data_0(label: &str) {
                ///The `console.timeLog()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeLog_e79bd37a2346163a(
                        label: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let label = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(label);
                        __wbg_timeLog_e79bd37a2346163a(label)
                    };
                    ()
                }
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeLog_1d577d7cf247bbce() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&str as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_log_with_label_and_data_1(label: &str, data_1: &::wasm_bindgen::JsValue) {
                ///The `console.timeLog()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeLog_1d577d7cf247bbce(
                        label: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let label = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(label);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_timeLog_1d577d7cf247bbce(label, data_1)
                    };
                    ()
                }
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeLog_969ce9b27c04d94d() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&str as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_log_with_label_and_data_2(
                label: &str,
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.timeLog()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeLog_969ce9b27c04d94d(
                        label: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let label = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(label);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_timeLog_969ce9b27c04d94d(label, data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeLog_c08967af4d71c40c() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&str as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_log_with_label_and_data_3(
                label: &str,
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.timeLog()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeLog_c08967af4d71c40c(
                        label: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let label = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(label);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_timeLog_c08967af4d71c40c(label, data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeLog_d2702f75c2361287() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&str as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_log_with_label_and_data_4(
                label: &str,
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.timeLog()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeLog_d2702f75c2361287(
                        label: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let label = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(label);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_timeLog_d2702f75c2361287(label, data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeLog_7677d410259dc106() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&str as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_log_with_label_and_data_5(
                label: &str,
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.timeLog()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeLog_7677d410259dc106(
                        label: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let label = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(label);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_timeLog_7677d410259dc106(
                            label, data_1, data_2, data_3, data_4, data_5,
                        )
                    };
                    ()
                }
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeLog_b3e21ba8360c1ad7() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&str as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_log_with_label_and_data_6(
                label: &str,
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.timeLog()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeLog_b3e21ba8360c1ad7(
                        label: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let label = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(label);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_timeLog_b3e21ba8360c1ad7(
                            label, data_1, data_2, data_3, data_4, data_5, data_6,
                        )
                    };
                    ()
                }
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeLog_c6ae210b6de3f1bf() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(8u32);
                <&str as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeLog()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_log_with_label_and_data_7(
                label: &str,
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.timeLog()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeLog)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeLog_c6ae210b6de3f1bf(
                        label: <&str as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let label = <&str as wasm_bindgen::convert::IntoWasmAbi>::into_abi(label);
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_timeLog_c6ae210b6de3f1bf(
                            label, data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.timeStamp()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeStamp)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeStamp_83ced61a1b67bd63() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeStamp()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeStamp)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_stamp() {
                ///The `console.timeStamp()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeStamp)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeStamp_83ced61a1b67bd63() -> ();
                }
                unsafe {
                    let _ret = { __wbg_timeStamp_83ced61a1b67bd63() };
                    ()
                }
            }
            ///The `console.timeStamp()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeStamp)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_timeStamp_bcf2486f4dfa89bf() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.timeStamp()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeStamp)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn time_stamp_with_data(data: &::wasm_bindgen::JsValue) {
                ///The `console.timeStamp()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/timeStamp)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_timeStamp_bcf2486f4dfa89bf(
                        data: <&::wasm_bindgen::JsValue as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data) ;
                        __wbg_timeStamp_bcf2486f4dfa89bf(data)
                    };
                    ()
                }
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_trace_05554427329269c3() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn trace(data: &::js_sys::Array) {
                ///The `console.trace()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_trace_05554427329269c3(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_trace_05554427329269c3(data)
                    };
                    ()
                }
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_trace_1dc6277dc01454a1() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn trace_0() {
                ///The `console.trace()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_trace_1dc6277dc01454a1() -> ();
                }
                unsafe {
                    let _ret = { __wbg_trace_1dc6277dc01454a1() };
                    ()
                }
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_trace_bbfdee2cf66f3545() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn trace_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.trace()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_trace_bbfdee2cf66f3545(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_trace_bbfdee2cf66f3545(data_1)
                    };
                    ()
                }
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_trace_c9e43fbd837efd59() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn trace_2(data_1: &::wasm_bindgen::JsValue, data_2: &::wasm_bindgen::JsValue) {
                ///The `console.trace()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_trace_c9e43fbd837efd59(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_trace_c9e43fbd837efd59(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_trace_808454e0335ea4f1() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn trace_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.trace()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_trace_808454e0335ea4f1(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_trace_808454e0335ea4f1(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_trace_0a43b83fb3c5d67e() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn trace_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.trace()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_trace_0a43b83fb3c5d67e(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_trace_0a43b83fb3c5d67e(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_trace_76f11afe5955477f() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn trace_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.trace()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_trace_76f11afe5955477f(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_trace_76f11afe5955477f(data_1, data_2, data_3, data_4, data_5)
                    };
                    ()
                }
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_trace_5cd9b077d8795e3e() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn trace_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.trace()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_trace_5cd9b077d8795e3e(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_trace_5cd9b077d8795e3e(data_1, data_2, data_3, data_4, data_5, data_6)
                    };
                    ()
                }
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_trace_327e962f2fb86c71() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.trace()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn trace_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.trace()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/trace)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_trace_327e962f2fb86c71(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_trace_327e962f2fb86c71(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_warn_691ab01ad3e5f981() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::js_sys::Array as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn warn(data: &::js_sys::Array) {
                ///The `console.warn()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_warn_691ab01ad3e5f981(
                        data: <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data =
                            <&::js_sys::Array as wasm_bindgen::convert::IntoWasmAbi>::into_abi(
                                data,
                            );
                        __wbg_warn_691ab01ad3e5f981(data)
                    };
                    ()
                }
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_warn_d2a0c0b003bb231c() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(0u32);
                <() as WasmDescribe>::describe();
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn warn_0() {
                ///The `console.warn()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_warn_d2a0c0b003bb231c() -> ();
                }
                unsafe {
                    let _ret = { __wbg_warn_d2a0c0b003bb231c() };
                    ()
                }
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_warn_d05e82888b7fad05() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(1u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn warn_1(data_1: &::wasm_bindgen::JsValue) {
                ///The `console.warn()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_warn_d05e82888b7fad05(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        __wbg_warn_d05e82888b7fad05(data_1)
                    };
                    ()
                }
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_warn_ce873c141c07a64a() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(2u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn warn_2(data_1: &::wasm_bindgen::JsValue, data_2: &::wasm_bindgen::JsValue) {
                ///The `console.warn()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_warn_ce873c141c07a64a(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        __wbg_warn_ce873c141c07a64a(data_1, data_2)
                    };
                    ()
                }
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_warn_f080b3e15759c860() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(3u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn warn_3(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.warn()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_warn_f080b3e15759c860(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        __wbg_warn_f080b3e15759c860(data_1, data_2, data_3)
                    };
                    ()
                }
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_warn_f632d7d3f55682b6() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(4u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn warn_4(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.warn()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_warn_f632d7d3f55682b6(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        __wbg_warn_f632d7d3f55682b6(data_1, data_2, data_3, data_4)
                    };
                    ()
                }
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_warn_6e7cd329ec23f0c6() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(5u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn warn_5(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.warn()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_warn_6e7cd329ec23f0c6(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        __wbg_warn_6e7cd329ec23f0c6(data_1, data_2, data_3, data_4, data_5)
                    };
                    ()
                }
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_warn_d5a3644f1c7cc716() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(6u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn warn_6(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.warn()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_warn_d5a3644f1c7cc716(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        __wbg_warn_d5a3644f1c7cc716(data_1, data_2, data_3, data_4, data_5, data_6)
                    };
                    ()
                }
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[no_mangle]
            #[allow(non_snake_case)]
            #[doc(hidden)]
            #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
            #[allow(clippy::all)]
            pub extern "C" fn __wbindgen_describe___wbg_warn_e62f5d2cf0947bd2() {
                use wasm_bindgen::describe::*;
                wasm_bindgen::__rt::link_mem_intrinsics();
                inform(FUNCTION);
                inform(0);
                inform(7u32);
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <&::wasm_bindgen::JsValue as WasmDescribe>::describe();
                <() as WasmDescribe>::describe();
            }
            ///The `console.warn()` function.
            ///
            ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
            ///
            ///*This API requires the following crate features to be activated: `console`*
            #[allow(bad_style)]
            ///
            #[allow(clippy::all)]
            pub fn warn_7(
                data_1: &::wasm_bindgen::JsValue,
                data_2: &::wasm_bindgen::JsValue,
                data_3: &::wasm_bindgen::JsValue,
                data_4: &::wasm_bindgen::JsValue,
                data_5: &::wasm_bindgen::JsValue,
                data_6: &::wasm_bindgen::JsValue,
                data_7: &::wasm_bindgen::JsValue,
            ) {
                ///The `console.warn()` function.
                ///
                ///[MDN Documentation](https://developer.mozilla.org/en-US/docs/Web/API/console/warn)
                ///
                ///*This API requires the following crate features to be activated: `console`*
                #[link(wasm_import_module = "__wbindgen_placeholder__")]
                #[cfg(all(target_arch = "wasm32", not(target_os = "emscripten")))]
                extern "C" {
                    fn __wbg_warn_e62f5d2cf0947bd2(
                        data_1 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_2 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_3 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_4 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_5 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_6 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                        data_7 : < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: Abi,
                    ) -> ();
                }
                unsafe {
                    let _ret = {
                        let data_1 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_1) ;
                        let data_2 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_2) ;
                        let data_3 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_3) ;
                        let data_4 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_4) ;
                        let data_5 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_5) ;
                        let data_6 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_6) ;
                        let data_7 = < & :: wasm_bindgen :: JsValue as wasm_bindgen :: convert :: IntoWasmAbi > :: into_abi (data_7) ;
                        __wbg_warn_e62f5d2cf0947bd2(
                            data_1, data_2, data_3, data_4, data_5, data_6, data_7,
                        )
                    };
                    ()
                }
            }
            #[allow(non_upper_case_globals)]
            #[cfg(target_arch = "wasm32")]
            #[link_section = "__wasm_bindgen_unstable"]
            #[doc(hidden)]
            #[allow(clippy::all)]
            pub static __WASM_BINDGEN_GENERATED_8fb589f911df99a3: [u8; 12385usize] = {
                static _INCLUDED_FILES: &[&str] = &[];
                * b".\x00\x00\x00{\"schema_version\":\"0.2.68\",\"version\":\"0.2.68\"}+0\x00\x00\x00\x00\x9e\x01\x00\x01\x01\x07console\x00\x1d__wbg_assert_ed4651dbc0355a34\x00\x00\x00\x00\x01\x00\x06assert\x01\x00\x01\x01\x07console\x00\x1d__wbg_assert_ec43d804e98824c7\x00\x01\x00\x00\x01\x02\tcondition\x04data\x06assert\x01\x00\x01\x01\x07console\x00\x1d__wbg_assert_dcb309174d615132\x00\x00\x00\x00\x01\x01\tcondition\x06assert\x01\x00\x01\x01\x07console\x00\x1d__wbg_assert_ef4c98b6b61e7fc4\x00\x00\x00\x00\x01\x02\tcondition\x06data_1\x06assert\x01\x00\x01\x01\x07console\x00\x1d__wbg_assert_7266dbdbb38b2b30\x00\x00\x00\x00\x01\x03\tcondition\x06data_1\x06data_2\x06assert\x01\x00\x01\x01\x07console\x00\x1d__wbg_assert_afcb26eb4c0235b7\x00\x00\x00\x00\x01\x04\tcondition\x06data_1\x06data_2\x06data_3\x06assert\x01\x00\x01\x01\x07console\x00\x1d__wbg_assert_e3b8264902f51652\x00\x00\x00\x00\x01\x05\tcondition\x06data_1\x06data_2\x06data_3\x06data_4\x06assert\x01\x00\x01\x01\x07console\x00\x1d__wbg_assert_f2a9fde7f264fb67\x00\x00\x00\x00\x01\x06\tcondition\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06assert\x01\x00\x01\x01\x07console\x00\x1d__wbg_assert_c4fceea7bbffe038\x00\x00\x00\x00\x01\x07\tcondition\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06assert\x01\x00\x01\x01\x07console\x00\x1d__wbg_assert_cdb45bcdc3213200\x00\x00\x00\x00\x01\x08\tcondition\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x06assert\x01\x00\x01\x01\x07console\x00\x1c__wbg_clear_132bce8038075f01\x00\x00\x00\x00\x01\x00\x05clear\x01\x00\x01\x01\x07console\x00\x1c__wbg_count_d25a42bfa318b988\x00\x00\x00\x00\x01\x00\x05count\x01\x00\x01\x01\x07console\x00\x1c__wbg_count_d3b35be0274d2f52\x00\x00\x00\x00\x01\x01\x05label\x05count\x01\x00\x01\x01\x07console\x00!__wbg_countReset_96edfcec7a2cf628\x00\x00\x00\x00\x01\x00\ncountReset\x01\x00\x01\x01\x07console\x00!__wbg_countReset_6e36b98fdbf98791\x00\x00\x00\x00\x01\x01\x05label\ncountReset\x01\x00\x01\x01\x07console\x00\x1c__wbg_debug_308ef14e94f8be79\x00\x01\x00\x00\x01\x01\x04data\x05debug\x01\x00\x01\x01\x07console\x00\x1c__wbg_debug_296899f980c282a2\x00\x00\x00\x00\x01\x00\x05debug\x01\x00\x01\x01\x07console\x00\x1c__wbg_debug_b443de592faba09f\x00\x00\x00\x00\x01\x01\x06data_1\x05debug\x01\x00\x01\x01\x07console\x00\x1c__wbg_debug_684e20e1d8707d5e\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\x05debug\x01\x00\x01\x01\x07console\x00\x1c__wbg_debug_ebb9dd15f5ae8bed\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\x05debug\x01\x00\x01\x01\x07console\x00\x1c__wbg_debug_d101e002eb92f20b\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\x05debug\x01\x00\x01\x01\x07console\x00\x1c__wbg_debug_052a0c02b494b820\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x05debug\x01\x00\x01\x01\x07console\x00\x1c__wbg_debug_96bfc312a6c54980\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x05debug\x01\x00\x01\x01\x07console\x00\x1c__wbg_debug_f54ec4f6207b2f66\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x05debug\x01\x00\x01\x01\x07console\x00\x1a__wbg_dir_3155a452339b7ca2\x00\x01\x00\x00\x01\x01\x04data\x03dir\x01\x00\x01\x01\x07console\x00\x1a__wbg_dir_70548834ef26afbd\x00\x00\x00\x00\x01\x00\x03dir\x01\x00\x01\x01\x07console\x00\x1a__wbg_dir_fb0aa15c6b553135\x00\x00\x00\x00\x01\x01\x06data_1\x03dir\x01\x00\x01\x01\x07console\x00\x1a__wbg_dir_38b771ae0b519cff\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\x03dir\x01\x00\x01\x01\x07console\x00\x1a__wbg_dir_dc06f2c4632c9b44\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\x03dir\x01\x00\x01\x01\x07console\x00\x1a__wbg_dir_4764c67a69d80d25\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\x03dir\x01\x00\x01\x01\x07console\x00\x1a__wbg_dir_1613b5793bd30798\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x03dir\x01\x00\x01\x01\x07console\x00\x1a__wbg_dir_cd1fbe57b4e53cb6\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x03dir\x01\x00\x01\x01\x07console\x00\x1a__wbg_dir_2ffd62c7a1c24e94\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x03dir\x01\x00\x01\x01\x07console\x00\x1d__wbg_dirxml_29b0d0561b573e2c\x00\x01\x00\x00\x01\x01\x04data\x06dirxml\x01\x00\x01\x01\x07console\x00\x1d__wbg_dirxml_fcfbf1ce0a4b1b7f\x00\x00\x00\x00\x01\x00\x06dirxml\x01\x00\x01\x01\x07console\x00\x1d__wbg_dirxml_d2fc31158fe687ce\x00\x00\x00\x00\x01\x01\x06data_1\x06dirxml\x01\x00\x01\x01\x07console\x00\x1d__wbg_dirxml_df1135149c3deb89\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\x06dirxml\x01\x00\x01\x01\x07console\x00\x1d__wbg_dirxml_00c830a451113d61\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\x06dirxml\x01\x00\x01\x01\x07console\x00\x1d__wbg_dirxml_6c65a1af53aad4c7\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\x06dirxml\x01\x00\x01\x01\x07console\x00\x1d__wbg_dirxml_c2a1f7c7969ef7d1\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06dirxml\x01\x00\x01\x01\x07console\x00\x1d__wbg_dirxml_3e296fffa1df5e82\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06dirxml\x01\x00\x01\x01\x07console\x00\x1d__wbg_dirxml_63435e75d7496ca7\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x06dirxml\x01\x00\x01\x01\x07console\x00\x1c__wbg_error_d17a3db3222c8b8d\x00\x01\x00\x00\x01\x01\x04data\x05error\x01\x00\x01\x01\x07console\x00\x1c__wbg_error_591ff8806227a7e8\x00\x00\x00\x00\x01\x00\x05error\x01\x00\x01\x01\x07console\x00\x1c__wbg_error_7f083efc6bc6752c\x00\x00\x00\x00\x01\x01\x06data_1\x05error\x01\x00\x01\x01\x07console\x00\x1c__wbg_error_1305f569bc9e150d\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\x05error\x01\x00\x01\x01\x07console\x00\x1c__wbg_error_44e19df804c8fbf4\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\x05error\x01\x00\x01\x01\x07console\x00\x1c__wbg_error_cb872335132b1ef7\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\x05error\x01\x00\x01\x01\x07console\x00\x1c__wbg_error_e918386752d204e6\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x05error\x01\x00\x01\x01\x07console\x00\x1c__wbg_error_75928df24791ff2f\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x05error\x01\x00\x01\x01\x07console\x00\x1c__wbg_error_9deb7acb6661d09c\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x05error\x01\x00\x01\x01\x07console\x00 __wbg_exception_9bb74923b327bf06\x00\x01\x00\x00\x01\x01\x04data\texception\x01\x00\x01\x01\x07console\x00 __wbg_exception_a3d732bbfb695718\x00\x00\x00\x00\x01\x00\texception\x01\x00\x01\x01\x07console\x00 __wbg_exception_8960c2789cc1525a\x00\x00\x00\x00\x01\x01\x06data_1\texception\x01\x00\x01\x01\x07console\x00 __wbg_exception_3fb732dee153bd9f\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\texception\x01\x00\x01\x01\x07console\x00 __wbg_exception_e26464df6712de4e\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\texception\x01\x00\x01\x01\x07console\x00 __wbg_exception_205ad8ed942571ba\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\texception\x01\x00\x01\x01\x07console\x00 __wbg_exception_587f7b484699714a\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\texception\x01\x00\x01\x01\x07console\x00 __wbg_exception_12c1008cfc0f9f88\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\texception\x01\x00\x01\x01\x07console\x00 __wbg_exception_e1bdcf3b49360683\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\texception\x01\x00\x01\x01\x07console\x00\x1c__wbg_group_9df9dd0215ee9e33\x00\x01\x00\x00\x01\x01\x04data\x05group\x01\x00\x01\x01\x07console\x00\x1c__wbg_group_faa38d317727daa3\x00\x00\x00\x00\x01\x00\x05group\x01\x00\x01\x01\x07console\x00\x1c__wbg_group_383050c944b0155c\x00\x00\x00\x00\x01\x01\x06data_1\x05group\x01\x00\x01\x01\x07console\x00\x1c__wbg_group_a3f8e72ec35607ae\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\x05group\x01\x00\x01\x01\x07console\x00\x1c__wbg_group_fc83429b23cb7baf\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\x05group\x01\x00\x01\x01\x07console\x00\x1c__wbg_group_d1c84739f562ddfe\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\x05group\x01\x00\x01\x01\x07console\x00\x1c__wbg_group_040f602c5d5afca2\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x05group\x01\x00\x01\x01\x07console\x00\x1c__wbg_group_fe4d40a00c4b4562\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x05group\x01\x00\x01\x01\x07console\x00\x1c__wbg_group_08ecf20c21a55d37\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x05group\x01\x00\x01\x01\x07console\x00%__wbg_groupCollapsed_c09000e54804d437\x00\x01\x00\x00\x01\x01\x04data\x0egroupCollapsed\x01\x00\x01\x01\x07console\x00%__wbg_groupCollapsed_e57d167186bb68e8\x00\x00\x00\x00\x01\x00\x0egroupCollapsed\x01\x00\x01\x01\x07console\x00%__wbg_groupCollapsed_cfba102f9007cff8\x00\x00\x00\x00\x01\x01\x06data_1\x0egroupCollapsed\x01\x00\x01\x01\x07console\x00%__wbg_groupCollapsed_766be7503c1b1b2f\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\x0egroupCollapsed\x01\x00\x01\x01\x07console\x00%__wbg_groupCollapsed_7e845c56cbb34533\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\x0egroupCollapsed\x01\x00\x01\x01\x07console\x00%__wbg_groupCollapsed_b05d41707a1cef5b\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\x0egroupCollapsed\x01\x00\x01\x01\x07console\x00%__wbg_groupCollapsed_2b53072aa4b81048\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x0egroupCollapsed\x01\x00\x01\x01\x07console\x00%__wbg_groupCollapsed_6089d79212a7cb45\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x0egroupCollapsed\x01\x00\x01\x01\x07console\x00%__wbg_groupCollapsed_d6df0bd576005563\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x0egroupCollapsed\x01\x00\x01\x01\x07console\x00\x1f__wbg_groupEnd_1b2b49dc5bbc7b2f\x00\x00\x00\x00\x01\x00\x08groupEnd\x01\x00\x01\x01\x07console\x00\x1b__wbg_info_94a80dfcd37a7a32\x00\x01\x00\x00\x01\x01\x04data\x04info\x01\x00\x01\x01\x07console\x00\x1b__wbg_info_860db49ed11ebba9\x00\x00\x00\x00\x01\x00\x04info\x01\x00\x01\x01\x07console\x00\x1b__wbg_info_6d4a86f0fd590270\x00\x00\x00\x00\x01\x01\x06data_1\x04info\x01\x00\x01\x01\x07console\x00\x1b__wbg_info_f2a3d990fc3b52eb\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\x04info\x01\x00\x01\x01\x07console\x00\x1b__wbg_info_d07d1156a6d2e7cb\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\x04info\x01\x00\x01\x01\x07console\x00\x1b__wbg_info_a25afde0ff8cd04a\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\x04info\x01\x00\x01\x01\x07console\x00\x1b__wbg_info_c9f6ae7fc680f303\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x04info\x01\x00\x01\x01\x07console\x00\x1b__wbg_info_bed7ab15ff999321\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x04info\x01\x00\x01\x01\x07console\x00\x1b__wbg_info_91a434a41d6a74e4\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x04info\x01\x00\x01\x01\x07console\x00\x1a__wbg_log_7f06d8d2574a453c\x00\x01\x00\x00\x01\x01\x04data\x03log\x01\x00\x01\x01\x07console\x00\x1a__wbg_log_b3a813ba877d31fd\x00\x00\x00\x00\x01\x00\x03log\x01\x00\x01\x01\x07console\x00\x1a__wbg_log_3bafd82835c6de6d\x00\x00\x00\x00\x01\x01\x06data_1\x03log\x01\x00\x01\x01\x07console\x00\x1a__wbg_log_00870c3365d67f76\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\x03log\x01\x00\x01\x01\x07console\x00\x1a__wbg_log_b08155f6488dc6dc\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\x03log\x01\x00\x01\x01\x07console\x00\x1a__wbg_log_64f566ae90a6c43c\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\x03log\x01\x00\x01\x01\x07console\x00\x1a__wbg_log_7c874f32247444a8\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x03log\x01\x00\x01\x01\x07console\x00\x1a__wbg_log_f005920fd16cd7bc\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x03log\x01\x00\x01\x01\x07console\x00\x1a__wbg_log_c27b1ff8cc32dd6b\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x03log\x01\x00\x01\x01\x07console\x00\x1e__wbg_profile_1c223125049c386c\x00\x01\x00\x00\x01\x01\x04data\x07profile\x01\x00\x01\x01\x07console\x00\x1e__wbg_profile_dd2cd95f52fe22f2\x00\x00\x00\x00\x01\x00\x07profile\x01\x00\x01\x01\x07console\x00\x1e__wbg_profile_8f90fb3737c119e7\x00\x00\x00\x00\x01\x01\x06data_1\x07profile\x01\x00\x01\x01\x07console\x00\x1e__wbg_profile_e822c2cdf0f87b0b\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\x07profile\x01\x00\x01\x01\x07console\x00\x1e__wbg_profile_009d81901183edd0\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\x07profile\x01\x00\x01\x01\x07console\x00\x1e__wbg_profile_bc4fd66fbde7e713\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\x07profile\x01\x00\x01\x01\x07console\x00\x1e__wbg_profile_ce28ad3041bf5a72\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x07profile\x01\x00\x01\x01\x07console\x00\x1e__wbg_profile_b2872c5995d8fc35\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x07profile\x01\x00\x01\x01\x07console\x00\x1e__wbg_profile_cd5a2a3c3758ba56\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x07profile\x01\x00\x01\x01\x07console\x00!__wbg_profileEnd_6b8c44e365859336\x00\x01\x00\x00\x01\x01\x04data\nprofileEnd\x01\x00\x01\x01\x07console\x00!__wbg_profileEnd_065f14f57e6a6cf3\x00\x00\x00\x00\x01\x00\nprofileEnd\x01\x00\x01\x01\x07console\x00!__wbg_profileEnd_8682128250c3af57\x00\x00\x00\x00\x01\x01\x06data_1\nprofileEnd\x01\x00\x01\x01\x07console\x00!__wbg_profileEnd_0e6da104149fff84\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\nprofileEnd\x01\x00\x01\x01\x07console\x00!__wbg_profileEnd_2ef123d5adfc73d0\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\nprofileEnd\x01\x00\x01\x01\x07console\x00!__wbg_profileEnd_7e01ca64ad57bc57\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\nprofileEnd\x01\x00\x01\x01\x07console\x00!__wbg_profileEnd_1d31f63b261615c2\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\nprofileEnd\x01\x00\x01\x01\x07console\x00!__wbg_profileEnd_ff57faaa40737de1\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\nprofileEnd\x01\x00\x01\x01\x07console\x00!__wbg_profileEnd_d2bcf399ca3a61c2\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\nprofileEnd\x01\x00\x01\x01\x07console\x00\x1c__wbg_table_e1c5b84e2a55e855\x00\x01\x00\x00\x01\x01\x04data\x05table\x01\x00\x01\x01\x07console\x00\x1c__wbg_table_0e220deeba8c6007\x00\x00\x00\x00\x01\x00\x05table\x01\x00\x01\x01\x07console\x00\x1c__wbg_table_8d88e0266405efa0\x00\x00\x00\x00\x01\x01\x06data_1\x05table\x01\x00\x01\x01\x07console\x00\x1c__wbg_table_ad5a8188ab2caf39\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\x05table\x01\x00\x01\x01\x07console\x00\x1c__wbg_table_eee2ea1b2701d5c5\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\x05table\x01\x00\x01\x01\x07console\x00\x1c__wbg_table_83895c2c711a4a7f\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\x05table\x01\x00\x01\x01\x07console\x00\x1c__wbg_table_f50921e300cc3c6d\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x05table\x01\x00\x01\x01\x07console\x00\x1c__wbg_table_c6d772ebb6274bd8\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x05table\x01\x00\x01\x01\x07console\x00\x1c__wbg_table_c12436775f1ba3c9\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x05table\x01\x00\x01\x01\x07console\x00\x1b__wbg_time_8cd2a2fa02896a7d\x00\x00\x00\x00\x01\x00\x04time\x01\x00\x01\x01\x07console\x00\x1b__wbg_time_cf4b07f2838757e4\x00\x00\x00\x00\x01\x01\x05label\x04time\x01\x00\x01\x01\x07console\x00\x1e__wbg_timeEnd_6349fa392e55fb0a\x00\x00\x00\x00\x01\x00\x07timeEnd\x01\x00\x01\x01\x07console\x00\x1e__wbg_timeEnd_a1dbce77aa6a65b6\x00\x00\x00\x00\x01\x01\x05label\x07timeEnd\x01\x00\x01\x01\x07console\x00\x1e__wbg_timeLog_9258ecbf76f663ef\x00\x00\x00\x00\x01\x00\x07timeLog\x01\x00\x01\x01\x07console\x00\x1e__wbg_timeLog_9181b1bffb03b472\x00\x01\x00\x00\x01\x02\x05label\x04data\x07timeLog\x01\x00\x01\x01\x07console\x00\x1e__wbg_timeLog_e79bd37a2346163a\x00\x00\x00\x00\x01\x01\x05label\x07timeLog\x01\x00\x01\x01\x07console\x00\x1e__wbg_timeLog_1d577d7cf247bbce\x00\x00\x00\x00\x01\x02\x05label\x06data_1\x07timeLog\x01\x00\x01\x01\x07console\x00\x1e__wbg_timeLog_969ce9b27c04d94d\x00\x00\x00\x00\x01\x03\x05label\x06data_1\x06data_2\x07timeLog\x01\x00\x01\x01\x07console\x00\x1e__wbg_timeLog_c08967af4d71c40c\x00\x00\x00\x00\x01\x04\x05label\x06data_1\x06data_2\x06data_3\x07timeLog\x01\x00\x01\x01\x07console\x00\x1e__wbg_timeLog_d2702f75c2361287\x00\x00\x00\x00\x01\x05\x05label\x06data_1\x06data_2\x06data_3\x06data_4\x07timeLog\x01\x00\x01\x01\x07console\x00\x1e__wbg_timeLog_7677d410259dc106\x00\x00\x00\x00\x01\x06\x05label\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x07timeLog\x01\x00\x01\x01\x07console\x00\x1e__wbg_timeLog_b3e21ba8360c1ad7\x00\x00\x00\x00\x01\x07\x05label\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x07timeLog\x01\x00\x01\x01\x07console\x00\x1e__wbg_timeLog_c6ae210b6de3f1bf\x00\x00\x00\x00\x01\x08\x05label\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x07timeLog\x01\x00\x01\x01\x07console\x00 __wbg_timeStamp_83ced61a1b67bd63\x00\x00\x00\x00\x01\x00\ttimeStamp\x01\x00\x01\x01\x07console\x00 __wbg_timeStamp_bcf2486f4dfa89bf\x00\x00\x00\x00\x01\x01\x04data\ttimeStamp\x01\x00\x01\x01\x07console\x00\x1c__wbg_trace_05554427329269c3\x00\x01\x00\x00\x01\x01\x04data\x05trace\x01\x00\x01\x01\x07console\x00\x1c__wbg_trace_1dc6277dc01454a1\x00\x00\x00\x00\x01\x00\x05trace\x01\x00\x01\x01\x07console\x00\x1c__wbg_trace_bbfdee2cf66f3545\x00\x00\x00\x00\x01\x01\x06data_1\x05trace\x01\x00\x01\x01\x07console\x00\x1c__wbg_trace_c9e43fbd837efd59\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\x05trace\x01\x00\x01\x01\x07console\x00\x1c__wbg_trace_808454e0335ea4f1\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\x05trace\x01\x00\x01\x01\x07console\x00\x1c__wbg_trace_0a43b83fb3c5d67e\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\x05trace\x01\x00\x01\x01\x07console\x00\x1c__wbg_trace_76f11afe5955477f\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x05trace\x01\x00\x01\x01\x07console\x00\x1c__wbg_trace_5cd9b077d8795e3e\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x05trace\x01\x00\x01\x01\x07console\x00\x1c__wbg_trace_327e962f2fb86c71\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x05trace\x01\x00\x01\x01\x07console\x00\x1b__wbg_warn_691ab01ad3e5f981\x00\x01\x00\x00\x01\x01\x04data\x04warn\x01\x00\x01\x01\x07console\x00\x1b__wbg_warn_d2a0c0b003bb231c\x00\x00\x00\x00\x01\x00\x04warn\x01\x00\x01\x01\x07console\x00\x1b__wbg_warn_d05e82888b7fad05\x00\x00\x00\x00\x01\x01\x06data_1\x04warn\x01\x00\x01\x01\x07console\x00\x1b__wbg_warn_ce873c141c07a64a\x00\x00\x00\x00\x01\x02\x06data_1\x06data_2\x04warn\x01\x00\x01\x01\x07console\x00\x1b__wbg_warn_f080b3e15759c860\x00\x00\x00\x00\x01\x03\x06data_1\x06data_2\x06data_3\x04warn\x01\x00\x01\x01\x07console\x00\x1b__wbg_warn_f632d7d3f55682b6\x00\x00\x00\x00\x01\x04\x06data_1\x06data_2\x06data_3\x06data_4\x04warn\x01\x00\x01\x01\x07console\x00\x1b__wbg_warn_6e7cd329ec23f0c6\x00\x00\x00\x00\x01\x05\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x04warn\x01\x00\x01\x01\x07console\x00\x1b__wbg_warn_d5a3644f1c7cc716\x00\x00\x00\x00\x01\x06\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x04warn\x01\x00\x01\x01\x07console\x00\x1b__wbg_warn_e62f5d2cf0947bd2\x00\x00\x00\x00\x01\x07\x06data_1\x06data_2\x06data_3\x06data_4\x06data_5\x06data_6\x06data_7\x04warn\x01\x00\x00\x00\x00\x18web-sys-2ffcad8c6dc62865\x00"
            };
        }
    }
    #[cfg(feature = "console")]
    pub use gen_console::*;
}
pub use features::*;
/// Getter for the `Window` object
///
/// [MDN Documentation]
///
/// *This API requires the following crate features to be activated: `Window`*
///
/// [MDN Documentation]: https://developer.mozilla.org/en-US/docs/Web/API/Window
#[cfg(feature = "Window")]
pub fn window() -> Option<Window> {
    use wasm_bindgen::JsCast;
    js_sys::global().dyn_into::<Window>().ok()
}
